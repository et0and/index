"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/3d-force-graph-ar@1.8.4_three@0.163.0";
exports.ids = ["vendor-chunks/3d-force-graph-ar@1.8.4_three@0.163.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/3d-force-graph-ar@1.8.4_three@0.163.0/node_modules/3d-force-graph-ar/dist/3d-force-graph-ar.mjs":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/3d-force-graph-ar@1.8.4_three@0.163.0/node_modules/3d-force-graph-ar/dist/3d-force-graph-ar.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _3dForceGraphAr)\n/* harmony export */ });\n/* harmony import */ var aframe_forcegraph_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aframe-forcegraph-component */ \"(ssr)/./node_modules/.pnpm/aframe-forcegraph-component@3.0.8_three@0.163.0/node_modules/aframe-forcegraph-component/index.js\");\n/* harmony import */ var kapsule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! kapsule */ \"(ssr)/./node_modules/.pnpm/kapsule@1.14.5/node_modules/kapsule/dist/kapsule.mjs\");\n\n\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\n//\n\nvar _3dForceGraphAr = (0,kapsule__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n  props: {\n    width: {},\n    height: {},\n    yOffset: {\n      \"default\": 1.5\n    },\n    // marker size units\n    glScale: {\n      \"default\": 200\n    },\n    // gl units per marker width\n    jsonUrl: {},\n    graphData: {\n      \"default\": {\n        nodes: [],\n        links: []\n      }\n    },\n    numDimensions: {\n      \"default\": 3\n    },\n    dagMode: {},\n    dagLevelDistance: {},\n    dagNodeFilter: {\n      \"default\": function _default() {\n        return true;\n      }\n    },\n    onDagError: {\n      \"default\": undefined\n    },\n    nodeRelSize: {\n      \"default\": 4\n    },\n    // volume per val unit\n    nodeId: {\n      \"default\": 'id'\n    },\n    nodeVal: {\n      \"default\": 'val'\n    },\n    nodeResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the sphere's circumference\n    nodeVisibility: {\n      \"default\": true\n    },\n    nodeColor: {\n      \"default\": 'color'\n    },\n    nodeAutoColorBy: {},\n    nodeOpacity: {\n      \"default\": 0.75\n    },\n    nodeThreeObject: {},\n    nodeThreeObjectExtend: {\n      \"default\": false\n    },\n    linkSource: {\n      \"default\": 'source'\n    },\n    linkTarget: {\n      \"default\": 'target'\n    },\n    linkVisibility: {\n      \"default\": true\n    },\n    linkColor: {\n      \"default\": 'color'\n    },\n    linkAutoColorBy: {},\n    linkOpacity: {\n      \"default\": 0.2\n    },\n    linkWidth: {\n      \"default\": 0\n    },\n    linkResolution: {\n      \"default\": 6\n    },\n    // how many radial segments in each line cylinder's geometry\n    linkCurvature: {\n      \"default\": 0\n    },\n    linkCurveRotation: {\n      \"default\": 0\n    },\n    linkMaterial: {},\n    linkThreeObject: {},\n    linkThreeObjectExtend: {\n      \"default\": false\n    },\n    linkPositionUpdate: {},\n    linkDirectionalArrowLength: {\n      \"default\": 0\n    },\n    linkDirectionalArrowColor: {},\n    linkDirectionalArrowRelPos: {\n      \"default\": 0.5\n    },\n    // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: {\n      \"default\": 0\n    },\n    // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: {\n      \"default\": 0.01\n    },\n    // in link length ratio per frame\n    linkDirectionalParticleWidth: {\n      \"default\": 0.5\n    },\n    linkDirectionalParticleColor: {},\n    linkDirectionalParticleResolution: {\n      \"default\": 4\n    },\n    // how many slice segments in the particle sphere's circumference\n    onNodeHover: {},\n    onNodeClick: {},\n    onLinkHover: {},\n    onLinkClick: {},\n    forceEngine: {\n      \"default\": 'd3'\n    },\n    // d3 or ngraph\n    d3AlphaMin: {\n      \"default\": 0\n    },\n    d3AlphaDecay: {\n      \"default\": 0.0228\n    },\n    d3VelocityDecay: {\n      \"default\": 0.4\n    },\n    ngraphPhysics: {},\n    warmupTicks: {\n      \"default\": 0\n    },\n    // how many times to tick the force engine at init before starting to render\n    cooldownTicks: {},\n    cooldownTime: {\n      \"default\": 15000\n    },\n    // ms\n    onEngineTick: {},\n    onEngineStop: {}\n  },\n  methods: _objectSpread2(_objectSpread2({}, Object.assign.apply(Object, [{}].concat(_toConsumableArray(['getGraphBbox', 'emitParticle', 'd3Force', 'd3ReheatSimulation', 'refresh'].map(function (method) {\n    return _defineProperty({}, method, function (state) {\n      var aframeComp = state.forcegraph.components.forcegraph;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var returnVal = aframeComp[method].apply(aframeComp, args);\n      return returnVal === aframeComp ? this // chain based on this object, not the inner aframe component\n      : returnVal;\n    });\n  }))))), {}, {\n    _destructor: function _destructor() {\n      this.graphData({\n        nodes: [],\n        links: []\n      });\n    }\n  }),\n  init: function init(domNode, state) {\n    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$markerAttrs = _ref2.markerAttrs,\n      markerAttrs = _ref2$markerAttrs === void 0 ? {\n        preset: 'hiro'\n      } : _ref2$markerAttrs;\n    // Wipe DOM\n    domNode.innerHTML = '';\n    state.container = document.createElement('div');\n    domNode.appendChild(state.container);\n\n    // Create scene\n    var scene = document.createElement('a-scene');\n    scene.setAttribute('embedded', '');\n    scene.setAttribute('vr-mode-ui', 'enabled: false');\n    scene.setAttribute('arjs', 'debugUIEnabled: false;');\n    var arMarker = document.createElement('a-marker');\n    // add marker attributes\n    Object.entries(markerAttrs).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        attr = _ref4[0],\n        val = _ref4[1];\n      return arMarker.setAttribute(attr, val);\n    });\n    scene.appendChild(arMarker);\n\n    // Setup raycaster cursor\n    var mouseCursor;\n    scene.appendChild(mouseCursor = document.createElement('a-entity'));\n    mouseCursor.setAttribute('cursor' /*, 'rayOrigin: mouse'*/); // mouse raycaster has accuracy issues in ar.js: https://github.com/AR-js-org/AR.js/issues/40\n    mouseCursor.setAttribute('raycaster', 'objects: [forcegraph]');\n\n    // Add forcegraph entity\n    state.forcegraph = document.createElement('a-entity');\n    state.forcegraph.setAttribute('forcegraph', null);\n    arMarker.appendChild(state.forcegraph);\n    var cameraEntity = document.createElement('a-entity');\n    cameraEntity.setAttribute('camera', '');\n    scene.appendChild(cameraEntity);\n\n    // attach scene\n    state.container.appendChild(scene);\n    //domNode.appendChild(scene);\n  },\n  update: function update(state, changedProps) {\n    changedProps.hasOwnProperty('width') && state.width && (state.container.style.width = \"\".concat(state.width, \"px\"));\n    changedProps.hasOwnProperty('height') && state.height && (state.container.style.height = \"\".concat(state.height, \"px\"));\n    changedProps.hasOwnProperty('glScale') && state.forcegraph.setAttribute('scale', _toConsumableArray(new Array(3)).map(function () {\n      return 1 / state.glScale;\n    }).join(' '));\n    changedProps.hasOwnProperty('yOffset') && state.forcegraph.setAttribute('position', \"0 \".concat(state.yOffset, \" 0\"));\n    var passThroughProps = ['jsonUrl', 'numDimensions', 'dagMode', 'dagLevelDistance', 'dagNodeFilter', 'onDagError', 'nodeRelSize', 'nodeId', 'nodeVal', 'nodeResolution', 'nodeVisibility', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'onNodeHover', 'onNodeClick', 'onLinkHover', 'onLinkClick', 'forceEngine', 'd3AlphaMin', 'd3AlphaDecay', 'd3VelocityDecay', 'ngraphPhysics', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'];\n    var newProps = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(state).filter(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        prop = _ref6[0],\n        val = _ref6[1];\n      return changedProps.hasOwnProperty(prop) && passThroughProps.indexOf(prop) !== -1 && val !== undefined && val !== null;\n    }).map(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 2),\n        key = _ref8[0],\n        val = _ref8[1];\n      return _defineProperty({}, key, val);\n    })), _toConsumableArray(Object.entries(state.graphData).map(function (_ref10) {\n      var _ref11 = _slicedToArray(_ref10, 2),\n        key = _ref11[0],\n        val = _ref11[1];\n      return _defineProperty({}, key, val);\n    }))));\n    state.forcegraph.setAttribute('forcegraph', newProps);\n  }\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/3d-force-graph-ar@1.8.4_three@0.163.0/node_modules/3d-force-graph-ar/dist/3d-force-graph-ar.mjs\n");

/***/ })

};
;