/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/aframe-forcegraph-component@3.0.8_three@0.163.0";
exports.ids = ["vendor-chunks/aframe-forcegraph-component@3.0.8_three@0.163.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/aframe-forcegraph-component@3.0.8_three@0.163.0/node_modules/aframe-forcegraph-component/index.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/aframe-forcegraph-component@3.0.8_three@0.163.0/node_modules/aframe-forcegraph-component/index.js ***!
  \******************************************************************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global AFRAME */\n\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nlet accessorFn = __webpack_require__(/*! accessor-fn */ \"(ssr)/./node_modules/.pnpm/accessor-fn@1.5.0/node_modules/accessor-fn/dist/accessor-fn.mjs\");\nif ('default' in accessorFn) {\n  // unwrap default export\n  accessorFn = accessorFn.default;\n}\n\nlet ThreeForceGraph = __webpack_require__(/*! three-forcegraph */ \"(ssr)/./node_modules/.pnpm/three-forcegraph@1.41.13_three@0.163.0/node_modules/three-forcegraph/dist/three-forcegraph.mjs\");\nif ('default' in ThreeForceGraph) {\n  // unwrap default export\n  ThreeForceGraph = ThreeForceGraph.default;\n}\n\nconst parseJson = function (prop) {\n  return (typeof prop === 'string')\n    ? JSON.parse(prop)\n    : prop; // already parsed\n};\n\nconst parseFn = function (prop) {\n  if (typeof prop === 'function') return prop; // already a function\n  const geval = eval; // Avoid using eval directly https://github.com/rollup/rollup/wiki/Troubleshooting#avoiding-eval\n  try {\n    const evalled = geval('(' + prop + ')');\n    return evalled;\n  } catch (e) {} // Can't eval, not a function\n  return null;\n};\n\nconst parseAccessor = function (prop) {\n  if (!isNaN(parseFloat(prop))) { return parseFloat(prop); } // parse numbers\n  if (parseFn(prop)) { return parseFn(prop); } // parse functions\n  return prop; // strings\n};\n\n/**\n * 3D Force-Directed Graph component for A-Frame.\n */\nAFRAME.registerComponent('forcegraph', {\n  schema: {\n    jsonUrl: { type: 'string', default: '' },\n    nodes: { parse: parseJson, default: [] },\n    links: { parse: parseJson, default: [] },\n    numDimensions: { type: 'number', default: 3 },\n    dagMode: { type: 'string', default: '' },\n    dagLevelDistance: { type: 'number', default: 0 },\n    dagNodeFilter: { parse: parseFn, default: function() { return true; }},\n    onDagError: { parse: parseFn, default: undefined },\n    nodeRelSize: { type: 'number', default: 4 }, // volume per val unit\n    nodeId: { type: 'string', default: 'id' },\n    nodeVal: { parse: parseAccessor, default: 'val' },\n    nodeResolution: { type: 'number', default: 8 }, // how many slice segments in the sphere's circumference\n    nodeVisibility: { parse: parseAccessor, default: true },\n    nodeColor: { parse: parseAccessor, default: 'color' },\n    nodeAutoColorBy: { parse: parseAccessor, default: '' }, // color nodes with the same field equally\n    nodeOpacity: { type: 'number', default: 0.75 },\n    nodeThreeObject: { parse: parseAccessor, default: null },\n    nodeThreeObjectExtend: { parse: parseAccessor, default: false },\n    linkSource: { type: 'string', default: 'source' },\n    linkTarget: { type: 'string', default: 'target' },\n    linkVisibility: { parse: parseAccessor, default: true },\n    linkColor: { parse: parseAccessor, default: 'color' },\n    linkAutoColorBy: { parse: parseAccessor, default: '' }, // color links with the same field equally\n    linkOpacity: { type: 'number', default: 0.2 },\n    linkWidth: { parse: parseAccessor, default: 0 },\n    linkResolution: { type: 'number', default: 6 }, // how many radial segments in each line cylinder's geometry\n    linkCurvature: { parse: parseAccessor, default: 0 },\n    linkCurveRotation: { parse: parseAccessor, default: 0 },\n    linkMaterial: { parse: parseAccessor, default: null },\n    linkThreeObject: { parse: parseAccessor, default: null },\n    linkThreeObjectExtend: { parse: parseAccessor, default: false },\n    linkPositionUpdate: { parse: parseFn, default: null },\n    linkDirectionalArrowLength: { parse: parseAccessor, default: 0 },\n    linkDirectionalArrowColor: { parse: parseAccessor, default: null },\n    linkDirectionalArrowRelPos: { parse: parseAccessor, default: 0.5 }, // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: { type: 'number', default: 8 }, // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: { parse: parseAccessor, default: 0 }, // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: { parse: parseAccessor, default: 0.01 }, // in link length ratio per frame\n    linkDirectionalParticleWidth: { parse: parseAccessor, default: 0.5 },\n    linkDirectionalParticleColor: { parse: parseAccessor, default: null },\n    linkDirectionalParticleResolution: { type: 'number', default: 4 }, // how many slice segments in the particle sphere's circumference\n    onNodeHover: { parse: parseFn, default: () => {} },\n    onLinkHover: { parse: parseFn, default: () => {} },\n    onNodeClick: { parse: parseFn, default: () => {} },\n    onLinkClick: { parse: parseFn, default: () => {} },\n    forceEngine: { type: 'string', default: 'd3' }, // 'd3' or 'ngraph'\n    d3AlphaMin: { type: 'number', default: 0 },\n    d3AlphaDecay: { type: 'number', default: 0.0228 },\n    d3VelocityDecay: { type: 'number', default: 0.4 },\n    ngraphPhysics: { parse: parseJson, default: null },\n    warmupTicks: { type: 'int', default: 0 }, // how many times to tick the force engine at init before starting to render\n    cooldownTicks: { type: 'int', default: 1e18 }, // Simulate infinity (int parser doesn't accept Infinity object)\n    cooldownTime: { type: 'int', default: 15000 }, // ms\n    onEngineTick: { parse: parseFn, default: function () {} },\n    onEngineStop: { parse: parseFn, default: function () {} }\n  },\n\n  // Bind component methods\n  getGraphBbox: function() {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    return this.forceGraph.getGraphBbox();\n  },\n  emitParticle: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    const forceGraph = this.forceGraph;\n    const returnVal = forceGraph.emitParticle.apply(forceGraph, arguments);\n\n    return returnVal === forceGraph\n      ? this // return self, not the inner forcegraph component\n      : returnVal;\n  },\n\n  d3Force: function () {\n    if (!this.forceGraph) {\n      // Got here before component init -> initialize forceGraph\n      this.forceGraph = new ThreeForceGraph();\n    }\n\n    const forceGraph = this.forceGraph;\n    const returnVal = forceGraph.d3Force.apply(forceGraph, arguments);\n\n    return returnVal === forceGraph\n      ? this // return self, not the inner forcegraph component\n      : returnVal;\n  },\n\n  d3ReheatSimulation: function () {\n    this.forceGraph && this.forceGraph.d3ReheatSimulation();\n    return this;\n  },\n\n  refresh: function () {\n    this.forceGraph && this.forceGraph.refresh();\n    return this;\n  },\n\n  init: function () {\n    const state = this.state = {}; // Internal state\n\n    // Add info msg\n    state.infoEl = document.createElement('a-text');\n    state.infoEl.setAttribute('position', '0 -0.1 -1'); // Canvas center\n    state.infoEl.setAttribute('width', 1);\n    state.infoEl.setAttribute('align', 'center');\n    state.infoEl.setAttribute('color', 'lavender');\n\n    // Get camera dom element and attach fixed view elements to camera\n    const cameraEl = document.querySelector('a-entity[camera], a-camera');\n    cameraEl.appendChild(state.infoEl);\n\n    // Keep reference to Three camera object\n    state.cameraObj = cameraEl.object3D.children\n      .filter(function (child) { return child.type === 'PerspectiveCamera'; })[0];\n\n    // On camera switch\n    this.el.sceneEl.addEventListener('camera-set-active', function (evt) {\n      // Switch camera reference\n      state.cameraObj = evt.detail.cameraEl.components.camera.camera;\n    });\n\n    // setup FG object\n    if (!this.forceGraph) this.forceGraph = new ThreeForceGraph(); // initialize forceGraph if it doesn't exist yet\n    this.forceGraph\n      .onFinishUpdate(() => this.el.setObject3D('forcegraphGroup', this.forceGraph)) // Bind forcegraph to elem\n      .onLoading(() => state.infoEl.setAttribute('value', 'Loading...')) // Add loading msg\n      .onFinishLoading(() => state.infoEl.setAttribute('value', ''));\n\n    // prefer raycaster events over mouseenter/mouseleave because they expose immediately available intersection data via detail.getIntersection()\n    this.el.addEventListener('raycaster-intersected', ev => state.hoverDetail = ev.detail);\n    this.el.addEventListener('raycaster-intersected-cleared', ev => state.hoverDetail = ev.detail);\n\n    this.el.addEventListener('click', () =>\n      state.hoverObj && this.data['on' + (state.hoverObj.__graphObjType === 'node' ? 'Node' : 'Link') + 'Click'](state.hoverObj.__data)\n    );\n  },\n\n  remove: function () {\n    // Clean-up elems\n    this.state.infoEl.remove();\n    this.el.removeObject3D('forcegraphGroup');\n  },\n\n  update: function (oldData) {\n    const comp = this;\n    const elData = this.data;\n    const diff = AFRAME.utils.diff(elData, oldData);\n\n    const fgProps = [\n      'jsonUrl',\n      'numDimensions',\n      'dagMode',\n      'dagLevelDistance',\n      'dagNodeFilter',\n      'onDagError',\n      'nodeRelSize',\n      'nodeId',\n      'nodeVal',\n      'nodeResolution',\n      'nodeVisibility',\n      'nodeColor',\n      'nodeAutoColorBy',\n      'nodeOpacity',\n      'nodeThreeObject',\n      'nodeThreeObjectExtend',\n      'linkSource',\n      'linkTarget',\n      'linkVisibility',\n      'linkColor',\n      'linkAutoColorBy',\n      'linkOpacity',\n      'linkWidth',\n      'linkResolution',\n      'linkCurvature',\n      'linkCurveRotation',\n      'linkMaterial',\n      'linkThreeObject',\n      'linkThreeObjectExtend',\n      'linkPositionUpdate',\n      'linkDirectionalArrowLength',\n      'linkDirectionalArrowColor',\n      'linkDirectionalArrowRelPos',\n      'linkDirectionalArrowResolution',\n      'linkDirectionalParticles',\n      'linkDirectionalParticleSpeed',\n      'linkDirectionalParticleWidth',\n      'linkDirectionalParticleColor',\n      'linkDirectionalParticleResolution',\n      'forceEngine',\n      'd3AlphaMin',\n      'd3AphaDecay',\n      'd3VelocityDecay',\n      'ngraphPhysics',\n      'warmupTicks',\n      'cooldownTicks',\n      'cooldownTime',\n      'onEngineTick',\n      'onEngineStop'\n    ];\n\n    fgProps\n      .filter(function (p) { return p in diff; })\n      .forEach(function (p) { comp.forceGraph[p](elData[p] !== '' ? elData[p] : null); }); // Convert blank values into nulls\n\n    if ('nodes' in diff || 'links' in diff) {\n      comp.forceGraph.graphData({\n        nodes: elData.nodes,\n        links: elData.links\n      });\n    }\n  },\n\n  tick: function (t, td) {\n    const state = this.state;\n    const props = this.data;\n\n    // Update hover (intersected) object\n    const intersection = state.hoverDetail\n      ? state.hoverDetail.getIntersection\n        ? state.hoverDetail.getIntersection(this.el) // available in raycaster-intersected events\n        : state.hoverDetail.intersection || undefined // available in mouseenter/mouseleave events (with delayed update)\n      : undefined;\n\n    // Note:\n    // Unfortunately we only have access to the intersected object closer to the camera (1st element in the raycaster intersectObjects result),\n    // there is no \".getIntersections()\" method available in the event details. Therefore, we can't prioritize hover on nodes over links, or even exclude\n    // objects that are neither nodes or links. This makes the interaction a bit erratic if nodes have a lot of links in front.\n    // Configuring the raycaster.params.Line.threshold might help with this somewhat, but that config is also not available via the a-frame raycaster component.\n\n    // recurse up until forcegraph obj is found\n    let topObject = intersection ? intersection.object : undefined;\n    while (topObject && !topObject.hasOwnProperty('__graphObjType'))\n      topObject = topObject.parent;\n\n    if (topObject !== state.hoverObj) {\n      const prevObjType = state.hoverObj ? state.hoverObj.__graphObjType : null;\n      const prevObjData = state.hoverObj ? state.hoverObj.__data : null;\n      const objType = topObject ? topObject.__graphObjType : null;\n      const objData = topObject ? topObject.__data : null;\n\n      if (prevObjType && prevObjType !== objType) {\n        // Hover out\n        props['on' + (prevObjType === 'node' ? 'Node' : 'Link') + 'Hover'](null, prevObjData);\n      }\n      if (objType) {\n        // Hover in\n        props['on' + (objType === 'node' ? 'Node' : 'Link') + 'Hover'](objData, prevObjType === objType ? prevObjData : null);\n      }\n\n      state.hoverObj = topObject;\n    }\n\n    // Run force-graph ticker\n    this.forceGraph.tickFrame();\n  }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/aframe-forcegraph-component@3.0.8_three@0.163.0/node_modules/aframe-forcegraph-component/index.js\n");

/***/ })

};
;