/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ngraph.forcelayout@3.3.1";
exports.ids = ["vendor-chunks/ngraph.forcelayout@3.3.1"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = createLayout;\nmodule.exports.simulator = __webpack_require__(/*! ./lib/createPhysicsSimulator */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js\");\n\nvar eventify = __webpack_require__(/*! ngraph.events */ \"(ssr)/./node_modules/.pnpm/ngraph.events@1.2.2/node_modules/ngraph.events/index.js\");\n\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = (physicsSettings && physicsSettings.createSimulator) || __webpack_require__(/*! ./lib/createPhysicsSimulator */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js\");\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n\n  var springTransform = physicsSimulator.settings.springTransform || noop;\n\n  // Initialize physics with what we have in the graph:\n  initPhysics();\n  listenToEvents();\n\n  var wasStable = false;\n\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step();\n\n      // Save the movement in case if someone wants to query it in the step\n      // callback.\n      api.lastMove = lastMove;\n\n      // Allow listeners to perform low-level actions after nodes are updated.\n      api.fire('step');\n\n      var ratio = lastMove/bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n      updateStableStatus(isStableNow);\n\n\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function (nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function (nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function (linkId) {\n      var spring = springs[linkId];\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function () {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function (node, isPinned) {\n      var body = getInitializedBody(node.id);\n       body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function (node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n\n  eventify(api);\n\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n\n  function getForceVectorLength() {\n    var fx = 0, fy = 0;\n    forEachBody(function(body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      var node = graph.getNode(nodeId);\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody  = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n\n    springTransform(link, spring);\n\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n\n      delete springs[link.id];\n\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n    if (!node.links) {\n      return neighbors;\n    }\n    var maxNeighbors = Math.min(node.links.length, 2);\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n  function isNodeOriginallyPinned(node) {\n    return (node && (node.isPinned || (node.data && node.data.isPinned)));\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n    return body;\n  }\n\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\n\nfunction noop() { }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js ***!
  \********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const getVariableName = __webpack_require__(/*! ./getVariableName */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js\");\n\nmodule.exports = function createPatternBuilder(dimension) {\n\n  return pattern;\n  \n  function pattern(template, config) {\n    let indent = (config && config.indent) || 0;\n    let join = (config && config.join !== undefined) ? config.join : '\\n';\n    let indentString = Array(indent + 1).join(' ');\n    let buffer = [];\n    for (let i = 0; i < dimension; ++i) {\n      let variableName = getVariableName(i);\n      let prefix = (i === 0) ? '' : indentString;\n      buffer.push(prefix + template.replace(/{var}/g, variableName));\n    }\n    return buffer.join(join);\n  }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2NyZWF0ZVBhdHRlcm5CdWlsZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHdCQUF3QixtQkFBTyxDQUFDLG9KQUFtQjs7QUFFbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQztBQUNBO0FBQ0EsOENBQThDLElBQUk7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXBoYWVsc2FsYWphLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5mb3JjZWxheW91dEAzLjMuMS9ub2RlX21vZHVsZXMvbmdyYXBoLmZvcmNlbGF5b3V0L2xpYi9jb2RlR2VuZXJhdG9ycy9jcmVhdGVQYXR0ZXJuQnVpbGRlci5qcz81M2Q2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdldFZhcmlhYmxlTmFtZSA9IHJlcXVpcmUoJy4vZ2V0VmFyaWFibGVOYW1lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlUGF0dGVybkJ1aWxkZXIoZGltZW5zaW9uKSB7XG5cbiAgcmV0dXJuIHBhdHRlcm47XG4gIFxuICBmdW5jdGlvbiBwYXR0ZXJuKHRlbXBsYXRlLCBjb25maWcpIHtcbiAgICBsZXQgaW5kZW50ID0gKGNvbmZpZyAmJiBjb25maWcuaW5kZW50KSB8fCAwO1xuICAgIGxldCBqb2luID0gKGNvbmZpZyAmJiBjb25maWcuam9pbiAhPT0gdW5kZWZpbmVkKSA/IGNvbmZpZy5qb2luIDogJ1xcbic7XG4gICAgbGV0IGluZGVudFN0cmluZyA9IEFycmF5KGluZGVudCArIDEpLmpvaW4oJyAnKTtcbiAgICBsZXQgYnVmZmVyID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaW1lbnNpb247ICsraSkge1xuICAgICAgbGV0IHZhcmlhYmxlTmFtZSA9IGdldFZhcmlhYmxlTmFtZShpKTtcbiAgICAgIGxldCBwcmVmaXggPSAoaSA9PT0gMCkgPyAnJyA6IGluZGVudFN0cmluZztcbiAgICAgIGJ1ZmZlci5wdXNoKHByZWZpeCArIHRlbXBsYXRlLnJlcGxhY2UoL3t2YXJ9L2csIHZhcmlhYmxlTmFtZSkpO1xuICAgIH1cbiAgICByZXR1cm4gYnVmZmVyLmpvaW4oam9pbik7XG4gIH1cbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js":
/*!**************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js ***!
  \**************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = generateBoundsFunction;\nmodule.exports.generateFunctionBody = generateBoundsFunctionBody;\n\nconst createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nfunction generateBoundsFunction(dimension) {\n  let code = generateBoundsFunctionBody(dimension);\n  return new Function('bodies', 'settings', 'random', code);\n}\n\nfunction generateBoundsFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n\n  let code = `\n  var boundingBox = {\n    ${pattern('min_{var}: 0, max_{var}: 0,', {indent: 4})}\n  };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset: resetBoundingBox,\n\n    getBestNewPosition: function (neighbors) {\n      var ${pattern('base_{var} = 0', {join: ', '})};\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          let neighborPos = neighbors[i].pos;\n          ${pattern('base_{var} += neighborPos.{var};', {indent: 10})}\n        }\n\n        ${pattern('base_{var} /= neighbors.length;', {indent: 8})}\n      } else {\n        ${pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {indent: 8})}\n      }\n\n      var springLength = settings.springLength;\n      return {\n        ${pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {indent: 8})}\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) return; // No bodies - no borders.\n\n    ${pattern('var max_{var} = -Infinity;', {indent: 4})}\n    ${pattern('var min_{var} = Infinity;', {indent: 4})}\n\n    while(i--) {\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\n      var bodyPos = bodies[i].pos;\n      ${pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {indent: 6})}\n      ${pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {indent: 6})}\n    }\n\n    ${pattern('boundingBox.min_{var} = min_{var};', {indent: 4})}\n    ${pattern('boundingBox.max_{var} = max_{var};', {indent: 4})}\n  }\n\n  function resetBoundingBox() {\n    ${pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {indent: 4})}\n  }\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQm91bmRzLmpzIiwibWFwcGluZ3MiOiI7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkMsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCOztBQUU3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNLGNBQWMsSUFBSSxVQUFVLElBQUksUUFBUSxVQUFVO0FBQ3hEOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQSxZQUFZLGVBQWUsS0FBSyxPQUFPLFdBQVc7O0FBRWxEO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBLFlBQVksZUFBZSxLQUFLLGdCQUFnQixLQUFLLElBQUksV0FBVztBQUNwRTs7QUFFQSxVQUFVLGVBQWUsS0FBSyxvQkFBb0IsSUFBSSxVQUFVO0FBQ2hFLFFBQVE7QUFDUixVQUFVLGVBQWUsS0FBSyxvQkFBb0IsS0FBSyxtQkFBbUIsSUFBSSxNQUFNLElBQUksVUFBVTtBQUNsRzs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxVQUFVLElBQUksUUFBUSxLQUFLLGlEQUFpRCxVQUFVO0FBQ2hHO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EseUJBQXlCOztBQUV6QixNQUFNLGtCQUFrQixLQUFLLFlBQVksSUFBSSxVQUFVO0FBQ3ZELE1BQU0sa0JBQWtCLEtBQUssV0FBVyxJQUFJLFVBQVU7O0FBRXREO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0JBQXNCLEtBQUssT0FBTyxJQUFJLE9BQU8sS0FBSyxXQUFXLEtBQUssSUFBSSxVQUFVO0FBQ3hGLFFBQVEsc0JBQXNCLEtBQUssT0FBTyxJQUFJLE9BQU8sS0FBSyxXQUFXLEtBQUssSUFBSSxVQUFVO0FBQ3hGOztBQUVBLE1BQU0sMEJBQTBCLEtBQUssT0FBTyxLQUFLLElBQUksVUFBVTtBQUMvRCxNQUFNLDBCQUEwQixLQUFLLE9BQU8sS0FBSyxJQUFJLFVBQVU7QUFDL0Q7O0FBRUE7QUFDQSxNQUFNLDBCQUEwQixLQUFLLG1CQUFtQixLQUFLLElBQUksSUFBSSxVQUFVO0FBQy9FO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFwaGFlbHNhbGFqYS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvZ2VuZXJhdGVCb3VuZHMuanM/ZTBjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVCb3VuZHNGdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlRnVuY3Rpb25Cb2R5ID0gZ2VuZXJhdGVCb3VuZHNGdW5jdGlvbkJvZHk7XG5cbmNvbnN0IGNyZWF0ZVBhdHRlcm5CdWlsZGVyID0gcmVxdWlyZSgnLi9jcmVhdGVQYXR0ZXJuQnVpbGRlcicpO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZUJvdW5kc0Z1bmN0aW9uKGRpbWVuc2lvbikge1xuICBsZXQgY29kZSA9IGdlbmVyYXRlQm91bmRzRnVuY3Rpb25Cb2R5KGRpbWVuc2lvbik7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ2JvZGllcycsICdzZXR0aW5ncycsICdyYW5kb20nLCBjb2RlKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVCb3VuZHNGdW5jdGlvbkJvZHkoZGltZW5zaW9uKSB7XG4gIGxldCBwYXR0ZXJuID0gY3JlYXRlUGF0dGVybkJ1aWxkZXIoZGltZW5zaW9uKTtcblxuICBsZXQgY29kZSA9IGBcbiAgdmFyIGJvdW5kaW5nQm94ID0ge1xuICAgICR7cGF0dGVybignbWluX3t2YXJ9OiAwLCBtYXhfe3Zhcn06IDAsJywge2luZGVudDogNH0pfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYm94OiBib3VuZGluZ0JveCxcblxuICAgIHVwZGF0ZTogdXBkYXRlQm91bmRpbmdCb3gsXG5cbiAgICByZXNldDogcmVzZXRCb3VuZGluZ0JveCxcblxuICAgIGdldEJlc3ROZXdQb3NpdGlvbjogZnVuY3Rpb24gKG5laWdoYm9ycykge1xuICAgICAgdmFyICR7cGF0dGVybignYmFzZV97dmFyfSA9IDAnLCB7am9pbjogJywgJ30pfTtcblxuICAgICAgaWYgKG5laWdoYm9ycy5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZWlnaGJvcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBsZXQgbmVpZ2hib3JQb3MgPSBuZWlnaGJvcnNbaV0ucG9zO1xuICAgICAgICAgICR7cGF0dGVybignYmFzZV97dmFyfSArPSBuZWlnaGJvclBvcy57dmFyfTsnLCB7aW5kZW50OiAxMH0pfVxuICAgICAgICB9XG5cbiAgICAgICAgJHtwYXR0ZXJuKCdiYXNlX3t2YXJ9IC89IG5laWdoYm9ycy5sZW5ndGg7Jywge2luZGVudDogOH0pfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHtwYXR0ZXJuKCdiYXNlX3t2YXJ9ID0gKGJvdW5kaW5nQm94Lm1pbl97dmFyfSArIGJvdW5kaW5nQm94Lm1heF97dmFyfSkgLyAyOycsIHtpbmRlbnQ6IDh9KX1cbiAgICAgIH1cblxuICAgICAgdmFyIHNwcmluZ0xlbmd0aCA9IHNldHRpbmdzLnNwcmluZ0xlbmd0aDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgICR7cGF0dGVybigne3Zhcn06IGJhc2Vfe3Zhcn0gKyAocmFuZG9tLm5leHREb3VibGUoKSAtIDAuNSkgKiBzcHJpbmdMZW5ndGgsJywge2luZGVudDogOH0pfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gdXBkYXRlQm91bmRpbmdCb3goKSB7XG4gICAgdmFyIGkgPSBib2RpZXMubGVuZ3RoO1xuICAgIGlmIChpID09PSAwKSByZXR1cm47IC8vIE5vIGJvZGllcyAtIG5vIGJvcmRlcnMuXG5cbiAgICAke3BhdHRlcm4oJ3ZhciBtYXhfe3Zhcn0gPSAtSW5maW5pdHk7Jywge2luZGVudDogNH0pfVxuICAgICR7cGF0dGVybigndmFyIG1pbl97dmFyfSA9IEluZmluaXR5OycsIHtpbmRlbnQ6IDR9KX1cblxuICAgIHdoaWxlKGktLSkge1xuICAgICAgLy8gdGhpcyBpcyBPKG4pLCBpdCBjb3VsZCBiZSBkb25lIGZhc3RlciB3aXRoIHF1YWR0cmVlLCBpZiB3ZSBjaGVjayB0aGUgcm9vdCBub2RlIGJvdW5kc1xuICAgICAgdmFyIGJvZHlQb3MgPSBib2RpZXNbaV0ucG9zO1xuICAgICAgJHtwYXR0ZXJuKCdpZiAoYm9keVBvcy57dmFyfSA8IG1pbl97dmFyfSkgbWluX3t2YXJ9ID0gYm9keVBvcy57dmFyfTsnLCB7aW5kZW50OiA2fSl9XG4gICAgICAke3BhdHRlcm4oJ2lmIChib2R5UG9zLnt2YXJ9ID4gbWF4X3t2YXJ9KSBtYXhfe3Zhcn0gPSBib2R5UG9zLnt2YXJ9OycsIHtpbmRlbnQ6IDZ9KX1cbiAgICB9XG5cbiAgICAke3BhdHRlcm4oJ2JvdW5kaW5nQm94Lm1pbl97dmFyfSA9IG1pbl97dmFyfTsnLCB7aW5kZW50OiA0fSl9XG4gICAgJHtwYXR0ZXJuKCdib3VuZGluZ0JveC5tYXhfe3Zhcn0gPSBtYXhfe3Zhcn07Jywge2luZGVudDogNH0pfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRCb3VuZGluZ0JveCgpIHtcbiAgICAke3BhdHRlcm4oJ2JvdW5kaW5nQm94Lm1pbl97dmFyfSA9IGJvdW5kaW5nQm94Lm1heF97dmFyfSA9IDA7Jywge2luZGVudDogNH0pfVxuICB9XG5gO1xuICByZXR1cm4gY29kZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js ***!
  \******************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody;\n\n// InlineTransform: getVectorCode\nmodule.exports.getVectorCode = getVectorCode;\n// InlineTransform: getBodyCode\nmodule.exports.getBodyCode = getBodyCode;\n// InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  let code = generateCreateBodyFunctionBody(dimension, debugSetters);\n  let {Body} = (new Function(code))();\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  let code = `\n${getVectorCode(dimension, debugSetters)}\n${getBodyCode(dimension, debugSetters)}\nreturn {Body: Body, Vector: Vector};\n`;\n  return code;\n}\n\nfunction getBodyCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let variableList = pattern('{var}', {join: ', '});\n  return `\nfunction Body(${variableList}) {\n  this.isPinned = false;\n  this.pos = new Vector(${variableList});\n  this.force = new Vector();\n  this.velocity = new Vector();\n  this.mass = 1;\n\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.reset = function() {\n  this.force.reset();\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.setPosition = function (${variableList}) {\n  ${pattern('this.pos.{var} = {var} || 0;', {indent: 2})}\n};`;\n}\n\nfunction getVectorCode(dimension, debugSetters) {\n  let pattern = createPatternBuilder(dimension);\n  let setters = '';\n  if (debugSetters) {\n    setters = `${pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\")}`;\n  }\n\n  let variableList = pattern('{var}', {join: ', '});\n  return `function Vector(${variableList}) {\n  ${setters}\n    if (typeof arguments[0] === 'object') {\n      // could be another vector\n      let v = arguments[0];\n      ${pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {indent: 4})}\n      ${pattern('this.{var} = v.{var};', {indent: 4})}\n    } else {\n      ${pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {indent: 4})}\n    }\n  }\n  \n  Vector.prototype.reset = function () {\n    ${pattern('this.{var} = ', {join: ''})}0;\n  };`;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlQm9keS5qcyIsIm1hcHBpbmdzIjoiO0FBQ0EsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCOztBQUU3RDtBQUNBLDZDQUE2Qzs7QUFFN0M7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSwwQkFBMEI7QUFDMUIsd0RBQXdEOztBQUV4RDtBQUNBO0FBQ0EsT0FBTyxNQUFNO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGLEVBQUU7QUFDRixRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsSUFBSSxJQUFJLFdBQVc7QUFDbEQ7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5Q0FBeUMsYUFBYTtBQUN0RCxJQUFJLG1CQUFtQixLQUFLLEdBQUcsS0FBSyxLQUFLLElBQUksVUFBVTtBQUN2RCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsU0FBUyxLQUFLO0FBQ2QsOEJBQThCLElBQUksSUFBSTtBQUN0QyxxQkFBcUI7QUFDckIseUVBQXlFLElBQUksR0FBRztBQUNoRixNQUFNLEtBQUssS0FBSztBQUNoQixHQUFHO0FBQ0gsb0JBQW9CLFNBQVMsT0FBTztBQUNwQyxDQUFDLEVBQUUsR0FBRztBQUNOOztBQUVBLCtCQUErQixJQUFJLElBQUksV0FBVztBQUNsRCw0QkFBNEIsYUFBYTtBQUN6QyxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpQ0FBaUMsSUFBSSxrRkFBa0YsSUFBSSxJQUFJLElBQUksVUFBVTtBQUNySixRQUFRLGVBQWUsS0FBSyxLQUFLLEtBQUssSUFBSSxVQUFVO0FBQ3BELE1BQU07QUFDTixRQUFRLGVBQWUsS0FBSyxVQUFVLEtBQUssZ0JBQWdCLEtBQUssSUFBSSxJQUFJLFVBQVU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGVBQWUsS0FBSyxNQUFNLFNBQVMsRUFBRTtBQUMzQyxJQUFJO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXBoYWVsc2FsYWphLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5mb3JjZWxheW91dEAzLjMuMS9ub2RlX21vZHVsZXMvbmdyYXBoLmZvcmNlbGF5b3V0L2xpYi9jb2RlR2VuZXJhdG9ycy9nZW5lcmF0ZUNyZWF0ZUJvZHkuanM/ZWVmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGNyZWF0ZVBhdHRlcm5CdWlsZGVyID0gcmVxdWlyZSgnLi9jcmVhdGVQYXR0ZXJuQnVpbGRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdlbmVyYXRlQ3JlYXRlQm9keUZ1bmN0aW9uO1xubW9kdWxlLmV4cG9ydHMuZ2VuZXJhdGVDcmVhdGVCb2R5RnVuY3Rpb25Cb2R5ID0gZ2VuZXJhdGVDcmVhdGVCb2R5RnVuY3Rpb25Cb2R5O1xuXG4vLyBJbmxpbmVUcmFuc2Zvcm06IGdldFZlY3RvckNvZGVcbm1vZHVsZS5leHBvcnRzLmdldFZlY3RvckNvZGUgPSBnZXRWZWN0b3JDb2RlO1xuLy8gSW5saW5lVHJhbnNmb3JtOiBnZXRCb2R5Q29kZVxubW9kdWxlLmV4cG9ydHMuZ2V0Qm9keUNvZGUgPSBnZXRCb2R5Q29kZTtcbi8vIElubGluZVRyYW5zZm9ybUV4cG9ydDogbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHsgcmV0dXJuIEJvZHk7IH1cblxuZnVuY3Rpb24gZ2VuZXJhdGVDcmVhdGVCb2R5RnVuY3Rpb24oZGltZW5zaW9uLCBkZWJ1Z1NldHRlcnMpIHtcbiAgbGV0IGNvZGUgPSBnZW5lcmF0ZUNyZWF0ZUJvZHlGdW5jdGlvbkJvZHkoZGltZW5zaW9uLCBkZWJ1Z1NldHRlcnMpO1xuICBsZXQge0JvZHl9ID0gKG5ldyBGdW5jdGlvbihjb2RlKSkoKTtcbiAgcmV0dXJuIEJvZHk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3JlYXRlQm9keUZ1bmN0aW9uQm9keShkaW1lbnNpb24sIGRlYnVnU2V0dGVycykge1xuICBsZXQgY29kZSA9IGBcbiR7Z2V0VmVjdG9yQ29kZShkaW1lbnNpb24sIGRlYnVnU2V0dGVycyl9XG4ke2dldEJvZHlDb2RlKGRpbWVuc2lvbiwgZGVidWdTZXR0ZXJzKX1cbnJldHVybiB7Qm9keTogQm9keSwgVmVjdG9yOiBWZWN0b3J9O1xuYDtcbiAgcmV0dXJuIGNvZGU7XG59XG5cbmZ1bmN0aW9uIGdldEJvZHlDb2RlKGRpbWVuc2lvbikge1xuICBsZXQgcGF0dGVybiA9IGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbik7XG4gIGxldCB2YXJpYWJsZUxpc3QgPSBwYXR0ZXJuKCd7dmFyfScsIHtqb2luOiAnLCAnfSk7XG4gIHJldHVybiBgXG5mdW5jdGlvbiBCb2R5KCR7dmFyaWFibGVMaXN0fSkge1xuICB0aGlzLmlzUGlubmVkID0gZmFsc2U7XG4gIHRoaXMucG9zID0gbmV3IFZlY3Rvcigke3ZhcmlhYmxlTGlzdH0pO1xuICB0aGlzLmZvcmNlID0gbmV3IFZlY3RvcigpO1xuICB0aGlzLnZlbG9jaXR5ID0gbmV3IFZlY3RvcigpO1xuICB0aGlzLm1hc3MgPSAxO1xuXG4gIHRoaXMuc3ByaW5nQ291bnQgPSAwO1xuICB0aGlzLnNwcmluZ0xlbmd0aCA9IDA7XG59XG5cbkJvZHkucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZm9yY2UucmVzZXQoKTtcbiAgdGhpcy5zcHJpbmdDb3VudCA9IDA7XG4gIHRoaXMuc3ByaW5nTGVuZ3RoID0gMDtcbn1cblxuQm9keS5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoJHt2YXJpYWJsZUxpc3R9KSB7XG4gICR7cGF0dGVybigndGhpcy5wb3Mue3Zhcn0gPSB7dmFyfSB8fCAwOycsIHtpbmRlbnQ6IDJ9KX1cbn07YDtcbn1cblxuZnVuY3Rpb24gZ2V0VmVjdG9yQ29kZShkaW1lbnNpb24sIGRlYnVnU2V0dGVycykge1xuICBsZXQgcGF0dGVybiA9IGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbik7XG4gIGxldCBzZXR0ZXJzID0gJyc7XG4gIGlmIChkZWJ1Z1NldHRlcnMpIHtcbiAgICBzZXR0ZXJzID0gYCR7cGF0dGVybihcIlxcblxcXG4gICB2YXIgdnt2YXJ9O1xcblxcXG5PYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3t2YXJ9Jywge1xcblxcXG4gIHNldDogZnVuY3Rpb24odikgeyBcXG5cXFxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKHYpKSB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgbm9uLW51bWJlcnMgdG8ge3Zhcn0nKTtcXG5cXFxuICAgIHZ7dmFyfSA9IHY7IFxcblxcXG4gIH0sXFxuXFxcbiAgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIHZ7dmFyfTsgfVxcblxcXG59KTtcIil9YDtcbiAgfVxuXG4gIGxldCB2YXJpYWJsZUxpc3QgPSBwYXR0ZXJuKCd7dmFyfScsIHtqb2luOiAnLCAnfSk7XG4gIHJldHVybiBgZnVuY3Rpb24gVmVjdG9yKCR7dmFyaWFibGVMaXN0fSkge1xuICAke3NldHRlcnN9XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBjb3VsZCBiZSBhbm90aGVyIHZlY3RvclxuICAgICAgbGV0IHYgPSBhcmd1bWVudHNbMF07XG4gICAgICAke3BhdHRlcm4oJ2lmICghTnVtYmVyLmlzRmluaXRlKHYue3Zhcn0pKSB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCB2YWx1ZSBpcyBub3QgYSBmaW5pdGUgbnVtYmVyIGF0IFZlY3RvciBjb25zdHJ1Y3RvciAoe3Zhcn0pXCIpOycsIHtpbmRlbnQ6IDR9KX1cbiAgICAgICR7cGF0dGVybigndGhpcy57dmFyfSA9IHYue3Zhcn07Jywge2luZGVudDogNH0pfVxuICAgIH0gZWxzZSB7XG4gICAgICAke3BhdHRlcm4oJ3RoaXMue3Zhcn0gPSB0eXBlb2Yge3Zhcn0gPT09IFwibnVtYmVyXCIgPyB7dmFyfSA6IDA7Jywge2luZGVudDogNH0pfVxuICAgIH1cbiAgfVxuICBcbiAgVmVjdG9yLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAke3BhdHRlcm4oJ3RoaXMue3Zhcn0gPSAnLCB7am9pbjogJyd9KX0wO1xuICB9O2A7XG59Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js":
/*!***********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js ***!
  \***********************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateCreateDragForceFunction;\nmodule.exports.generateCreateDragForceFunctionBody = generateCreateDragForceFunctionBody;\n\nfunction generateCreateDragForceFunction(dimension) {\n  let code = generateCreateDragForceFunctionBody(dimension);\n  return new Function('options', code);\n}\n\nfunction generateCreateDragForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.dragCoefficient)) throw new Error('dragCoefficient is not a finite number');\n\n  return {\n    update: function(body) {\n      ${pattern('body.force.{var} -= options.dragCoefficient * body.velocity.{var};', {indent: 6})}\n    }\n  };\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlRHJhZ0ZvcmNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLDZCQUE2QixtQkFBTyxDQUFDLDhKQUF3Qjs7QUFFN0Q7QUFDQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRLHFCQUFxQixLQUFLLDRDQUE0QyxLQUFLLElBQUksVUFBVTtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmFwaGFlbHNhbGFqYS8uL25vZGVfbW9kdWxlcy8ucG5wbS9uZ3JhcGguZm9yY2VsYXlvdXRAMy4zLjEvbm9kZV9tb2R1bGVzL25ncmFwaC5mb3JjZWxheW91dC9saWIvY29kZUdlbmVyYXRvcnMvZ2VuZXJhdGVDcmVhdGVEcmFnRm9yY2UuanM/NTQ1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVQYXR0ZXJuQnVpbGRlciA9IHJlcXVpcmUoJy4vY3JlYXRlUGF0dGVybkJ1aWxkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZUNyZWF0ZURyYWdGb3JjZUZ1bmN0aW9uO1xubW9kdWxlLmV4cG9ydHMuZ2VuZXJhdGVDcmVhdGVEcmFnRm9yY2VGdW5jdGlvbkJvZHkgPSBnZW5lcmF0ZUNyZWF0ZURyYWdGb3JjZUZ1bmN0aW9uQm9keTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVDcmVhdGVEcmFnRm9yY2VGdW5jdGlvbihkaW1lbnNpb24pIHtcbiAgbGV0IGNvZGUgPSBnZW5lcmF0ZUNyZWF0ZURyYWdGb3JjZUZ1bmN0aW9uQm9keShkaW1lbnNpb24pO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdvcHRpb25zJywgY29kZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3JlYXRlRHJhZ0ZvcmNlRnVuY3Rpb25Cb2R5KGRpbWVuc2lvbikge1xuICBsZXQgcGF0dGVybiA9IGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbik7XG4gIGxldCBjb2RlID0gYFxuICBpZiAoIU51bWJlci5pc0Zpbml0ZShvcHRpb25zLmRyYWdDb2VmZmljaWVudCkpIHRocm93IG5ldyBFcnJvcignZHJhZ0NvZWZmaWNpZW50IGlzIG5vdCBhIGZpbml0ZSBudW1iZXInKTtcblxuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24oYm9keSkge1xuICAgICAgJHtwYXR0ZXJuKCdib2R5LmZvcmNlLnt2YXJ9IC09IG9wdGlvbnMuZHJhZ0NvZWZmaWNpZW50ICogYm9keS52ZWxvY2l0eS57dmFyfTsnLCB7aW5kZW50OiA2fSl9XG4gICAgfVxuICB9O1xuYDtcbiAgcmV0dXJuIGNvZGU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js ***!
  \*************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateCreateSpringForceFunction;\nmodule.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;\n\nfunction generateCreateSpringForceFunction(dimension) {\n  let code = generateCreateSpringForceFunctionBody(dimension);\n  return new Function('options', 'random', code);\n}\n\nfunction generateCreateSpringForceFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from;\n      var body2 = spring.to;\n      var length = spring.length < 0 ? options.springLength : spring.length;\n      ${pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {indent: 6})}\n      var r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n      if (r === 0) {\n        ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n      }\n\n      var d = r - length;\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      ${pattern('body1.force.{var} += coefficient * d{var}', {indent: 6})};\n      body1.springCount += 1;\n      body1.springLength += r;\n\n      ${pattern('body2.force.{var} -= coefficient * d{var}', {indent: 6})};\n      body2.springCount += 1;\n      body2.springLength += r;\n    }\n  };\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2UuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCOztBQUU3RDtBQUNBLG9EQUFvRDs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxlQUFlLEtBQUssYUFBYSxLQUFLLGFBQWEsS0FBSyxJQUFJLFVBQVU7QUFDOUUsMEJBQTBCLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxZQUFZLEVBQUU7O0FBRXBFO0FBQ0EsVUFBVSxXQUFXLEtBQUssbUNBQW1DLElBQUksVUFBVTtBQUMzRSx3QkFBd0IsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLFlBQVksRUFBRTtBQUNsRTs7QUFFQTtBQUNBOztBQUVBLFFBQVEsc0JBQXNCLEtBQUssbUJBQW1CLElBQUksSUFBSSxVQUFVO0FBQ3hFO0FBQ0E7O0FBRUEsUUFBUSxzQkFBc0IsS0FBSyxtQkFBbUIsSUFBSSxJQUFJLFVBQVU7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXBoYWVsc2FsYWphLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5mb3JjZWxheW91dEAzLjMuMS9ub2RlX21vZHVsZXMvbmdyYXBoLmZvcmNlbGF5b3V0L2xpYi9jb2RlR2VuZXJhdG9ycy9nZW5lcmF0ZUNyZWF0ZVNwcmluZ0ZvcmNlLmpzPzAyNDMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgY3JlYXRlUGF0dGVybkJ1aWxkZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVBhdHRlcm5CdWlsZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVDcmVhdGVTcHJpbmdGb3JjZUZ1bmN0aW9uO1xubW9kdWxlLmV4cG9ydHMuZ2VuZXJhdGVDcmVhdGVTcHJpbmdGb3JjZUZ1bmN0aW9uQm9keSA9IGdlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2VGdW5jdGlvbkJvZHk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2VGdW5jdGlvbihkaW1lbnNpb24pIHtcbiAgbGV0IGNvZGUgPSBnZW5lcmF0ZUNyZWF0ZVNwcmluZ0ZvcmNlRnVuY3Rpb25Cb2R5KGRpbWVuc2lvbik7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ29wdGlvbnMnLCAncmFuZG9tJywgY29kZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ3JlYXRlU3ByaW5nRm9yY2VGdW5jdGlvbkJvZHkoZGltZW5zaW9uKSB7XG4gIGxldCBwYXR0ZXJuID0gY3JlYXRlUGF0dGVybkJ1aWxkZXIoZGltZW5zaW9uKTtcbiAgbGV0IGNvZGUgPSBgXG4gIGlmICghTnVtYmVyLmlzRmluaXRlKG9wdGlvbnMuc3ByaW5nQ29lZmZpY2llbnQpKSB0aHJvdyBuZXcgRXJyb3IoJ1NwcmluZyBjb2VmZmljaWVudCBpcyBub3QgYSBudW1iZXInKTtcbiAgaWYgKCFOdW1iZXIuaXNGaW5pdGUob3B0aW9ucy5zcHJpbmdMZW5ndGgpKSB0aHJvdyBuZXcgRXJyb3IoJ1NwcmluZyBsZW5ndGggaXMgbm90IGEgbnVtYmVyJyk7XG5cbiAgcmV0dXJuIHtcbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGZvcmNlcyBhY3Rpbmcgb24gYSBzcHJpbmdcbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIChzcHJpbmcpIHtcbiAgICAgIHZhciBib2R5MSA9IHNwcmluZy5mcm9tO1xuICAgICAgdmFyIGJvZHkyID0gc3ByaW5nLnRvO1xuICAgICAgdmFyIGxlbmd0aCA9IHNwcmluZy5sZW5ndGggPCAwID8gb3B0aW9ucy5zcHJpbmdMZW5ndGggOiBzcHJpbmcubGVuZ3RoO1xuICAgICAgJHtwYXR0ZXJuKCd2YXIgZHt2YXJ9ID0gYm9keTIucG9zLnt2YXJ9IC0gYm9keTEucG9zLnt2YXJ9OycsIHtpbmRlbnQ6IDZ9KX1cbiAgICAgIHZhciByID0gTWF0aC5zcXJ0KCR7cGF0dGVybignZHt2YXJ9ICogZHt2YXJ9Jywge2pvaW46ICcgKyAnfSl9KTtcblxuICAgICAgaWYgKHIgPT09IDApIHtcbiAgICAgICAgJHtwYXR0ZXJuKCdke3Zhcn0gPSAocmFuZG9tLm5leHREb3VibGUoKSAtIDAuNSkgLyA1MDsnLCB7aW5kZW50OiA4fSl9XG4gICAgICAgIHIgPSBNYXRoLnNxcnQoJHtwYXR0ZXJuKCdke3Zhcn0gKiBke3Zhcn0nLCB7am9pbjogJyArICd9KX0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgZCA9IHIgLSBsZW5ndGg7XG4gICAgICB2YXIgY29lZmZpY2llbnQgPSAoKHNwcmluZy5jb2VmZmljaWVudCA+IDApID8gc3ByaW5nLmNvZWZmaWNpZW50IDogb3B0aW9ucy5zcHJpbmdDb2VmZmljaWVudCkgKiBkIC8gcjtcblxuICAgICAgJHtwYXR0ZXJuKCdib2R5MS5mb3JjZS57dmFyfSArPSBjb2VmZmljaWVudCAqIGR7dmFyfScsIHtpbmRlbnQ6IDZ9KX07XG4gICAgICBib2R5MS5zcHJpbmdDb3VudCArPSAxO1xuICAgICAgYm9keTEuc3ByaW5nTGVuZ3RoICs9IHI7XG5cbiAgICAgICR7cGF0dGVybignYm9keTIuZm9yY2Uue3Zhcn0gLT0gY29lZmZpY2llbnQgKiBke3Zhcn0nLCB7aW5kZW50OiA2fSl9O1xuICAgICAgYm9keTIuc3ByaW5nQ291bnQgKz0gMTtcbiAgICAgIGJvZHkyLnNwcmluZ0xlbmd0aCArPSByO1xuICAgIH1cbiAgfTtcbmA7XG4gIHJldHVybiBjb2RlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js":
/*!******************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js ***!
  \******************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\n\nmodule.exports = generateIntegratorFunction;\nmodule.exports.generateIntegratorFunctionBody = generateIntegratorFunctionBody;\n\nfunction generateIntegratorFunction(dimension) {\n  let code = generateIntegratorFunctionBody(dimension);\n  return new Function('bodies', 'timeStep', 'adaptiveTimeStepWeight', code);\n}\n\nfunction generateIntegratorFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let code = `\n  var length = bodies.length;\n  if (length === 0) return 0;\n\n  ${pattern('var d{var} = 0, t{var} = 0;', {indent: 2})}\n\n  for (var i = 0; i < length; ++i) {\n    var body = bodies[i];\n    if (body.isPinned) continue;\n\n    if (adaptiveTimeStepWeight && body.springCount) {\n      timeStep = (adaptiveTimeStepWeight * body.springLength/body.springCount);\n    }\n\n    var coeff = timeStep / body.mass;\n\n    ${pattern('body.velocity.{var} += coeff * body.force.{var};', {indent: 4})}\n    ${pattern('var v{var} = body.velocity.{var};', {indent: 4})}\n    var v = Math.sqrt(${pattern('v{var} * v{var}', {join: ' + '})});\n\n    if (v > 1) {\n      // We normalize it so that we move within timeStep range. \n      // for the case when v <= 1 - we let velocity to fade out.\n      ${pattern('body.velocity.{var} = v{var} / v;', {indent: 6})}\n    }\n\n    ${pattern('d{var} = timeStep * body.velocity.{var};', {indent: 4})}\n\n    ${pattern('body.pos.{var} += d{var};', {indent: 4})}\n\n    ${pattern('t{var} += Math.abs(d{var});', {indent: 4})}\n  }\n\n  return (${pattern('t{var} * t{var}', {join: ' + '})})/length;\n`;\n  return code;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlSW50ZWdyYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQSw2QkFBNkIsbUJBQU8sQ0FBQyw4SkFBd0I7O0FBRTdEO0FBQ0EsNkNBQTZDOztBQUU3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUksZUFBZSxLQUFLLE9BQU8sS0FBSyxJQUFJLElBQUksVUFBVTs7QUFFdEQsa0JBQWtCLFlBQVk7QUFDOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsTUFBTSx3QkFBd0IsS0FBSyx1QkFBdUIsS0FBSyxJQUFJLFVBQVU7QUFDN0UsTUFBTSxlQUFlLEtBQUssaUJBQWlCLEtBQUssSUFBSSxVQUFVO0FBQzlELHdCQUF3QixXQUFXLEtBQUssSUFBSSxJQUFJLElBQUksWUFBWSxFQUFFOztBQUVsRTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHdCQUF3QixLQUFLLElBQUksS0FBSyxJQUFJLElBQUksVUFBVTtBQUNoRTs7QUFFQSxNQUFNLFdBQVcsS0FBSyw0QkFBNEIsS0FBSyxJQUFJLFVBQVU7O0FBRXJFLE1BQU0sbUJBQW1CLEtBQUssS0FBSyxLQUFLLElBQUksVUFBVTs7QUFFdEQsTUFBTSxXQUFXLEtBQUssY0FBYyxJQUFJLEVBQUUsSUFBSSxVQUFVO0FBQ3hEOztBQUVBLFlBQVksV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLFlBQVksRUFBRTtBQUN0RDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXBoYWVsc2FsYWphLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5mb3JjZWxheW91dEAzLjMuMS9ub2RlX21vZHVsZXMvbmdyYXBoLmZvcmNlbGF5b3V0L2xpYi9jb2RlR2VuZXJhdG9ycy9nZW5lcmF0ZUludGVncmF0b3IuanM/ZjVhZCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVQYXR0ZXJuQnVpbGRlciA9IHJlcXVpcmUoJy4vY3JlYXRlUGF0dGVybkJ1aWxkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnZW5lcmF0ZUludGVncmF0b3JGdW5jdGlvbjtcbm1vZHVsZS5leHBvcnRzLmdlbmVyYXRlSW50ZWdyYXRvckZ1bmN0aW9uQm9keSA9IGdlbmVyYXRlSW50ZWdyYXRvckZ1bmN0aW9uQm9keTtcblxuZnVuY3Rpb24gZ2VuZXJhdGVJbnRlZ3JhdG9yRnVuY3Rpb24oZGltZW5zaW9uKSB7XG4gIGxldCBjb2RlID0gZ2VuZXJhdGVJbnRlZ3JhdG9yRnVuY3Rpb25Cb2R5KGRpbWVuc2lvbik7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ2JvZGllcycsICd0aW1lU3RlcCcsICdhZGFwdGl2ZVRpbWVTdGVwV2VpZ2h0JywgY29kZSk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlSW50ZWdyYXRvckZ1bmN0aW9uQm9keShkaW1lbnNpb24pIHtcbiAgbGV0IHBhdHRlcm4gPSBjcmVhdGVQYXR0ZXJuQnVpbGRlcihkaW1lbnNpb24pO1xuICBsZXQgY29kZSA9IGBcbiAgdmFyIGxlbmd0aCA9IGJvZGllcy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAwO1xuXG4gICR7cGF0dGVybigndmFyIGR7dmFyfSA9IDAsIHR7dmFyfSA9IDA7Jywge2luZGVudDogMn0pfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcbiAgICBpZiAoYm9keS5pc1Bpbm5lZCkgY29udGludWU7XG5cbiAgICBpZiAoYWRhcHRpdmVUaW1lU3RlcFdlaWdodCAmJiBib2R5LnNwcmluZ0NvdW50KSB7XG4gICAgICB0aW1lU3RlcCA9IChhZGFwdGl2ZVRpbWVTdGVwV2VpZ2h0ICogYm9keS5zcHJpbmdMZW5ndGgvYm9keS5zcHJpbmdDb3VudCk7XG4gICAgfVxuXG4gICAgdmFyIGNvZWZmID0gdGltZVN0ZXAgLyBib2R5Lm1hc3M7XG5cbiAgICAke3BhdHRlcm4oJ2JvZHkudmVsb2NpdHkue3Zhcn0gKz0gY29lZmYgKiBib2R5LmZvcmNlLnt2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cbiAgICAke3BhdHRlcm4oJ3ZhciB2e3Zhcn0gPSBib2R5LnZlbG9jaXR5Lnt2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cbiAgICB2YXIgdiA9IE1hdGguc3FydCgke3BhdHRlcm4oJ3Z7dmFyfSAqIHZ7dmFyfScsIHtqb2luOiAnICsgJ30pfSk7XG5cbiAgICBpZiAodiA+IDEpIHtcbiAgICAgIC8vIFdlIG5vcm1hbGl6ZSBpdCBzbyB0aGF0IHdlIG1vdmUgd2l0aGluIHRpbWVTdGVwIHJhbmdlLiBcbiAgICAgIC8vIGZvciB0aGUgY2FzZSB3aGVuIHYgPD0gMSAtIHdlIGxldCB2ZWxvY2l0eSB0byBmYWRlIG91dC5cbiAgICAgICR7cGF0dGVybignYm9keS52ZWxvY2l0eS57dmFyfSA9IHZ7dmFyfSAvIHY7Jywge2luZGVudDogNn0pfVxuICAgIH1cblxuICAgICR7cGF0dGVybignZHt2YXJ9ID0gdGltZVN0ZXAgKiBib2R5LnZlbG9jaXR5Lnt2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cblxuICAgICR7cGF0dGVybignYm9keS5wb3Mue3Zhcn0gKz0gZHt2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cblxuICAgICR7cGF0dGVybigndHt2YXJ9ICs9IE1hdGguYWJzKGR7dmFyfSk7Jywge2luZGVudDogNH0pfVxuICB9XG5cbiAgcmV0dXJuICgke3BhdHRlcm4oJ3R7dmFyfSAqIHR7dmFyfScsIHtqb2luOiAnICsgJ30pfSkvbGVuZ3RoO1xuYDtcbiAgcmV0dXJuIGNvZGU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js":
/*!****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js ***!
  \****************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const createPatternBuilder = __webpack_require__(/*! ./createPatternBuilder */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/createPatternBuilder.js\");\nconst getVariableName = __webpack_require__(/*! ./getVariableName */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js\");\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody;\n\n// These exports are for InlineTransform tool.\n// InlineTransform: getInsertStackCode\nmodule.exports.getInsertStackCode = getInsertStackCode;\n// InlineTransform: getQuadNodeCode\nmodule.exports.getQuadNodeCode = getQuadNodeCode;\n// InlineTransform: isSamePosition\nmodule.exports.isSamePosition = isSamePosition;\n// InlineTransform: getChildBodyCode\nmodule.exports.getChildBodyCode = getChildBodyCode;\n// InlineTransform: setChildBodyCode\nmodule.exports.setChildBodyCode = setChildBodyCode;\n\nfunction generateQuadTreeFunction(dimension) {\n  let code = generateQuadTreeFunctionBody(dimension);\n  return (new Function(code))();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n\n  let code = `\n${getInsertStackCode()}\n${getQuadNodeCode(dimension)}\n${isSamePosition(dimension)}\n${getChildBodyCode(dimension)}\n${setChildBodyCode(dimension)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${assignQuads('      node.')}\n      node.body = null;\n      node.mass = ${pattern('node.mass_{var} = ', {join: ''})}0;\n      ${pattern('node.min_{var} = node.max_{var} = ', {join: ''})}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${pattern('var d{var};', {indent: 4})}\n    var r; \n    ${pattern('var f{var} = 0;', {indent: 4})}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${pattern('f{var} += v * d{var};', {indent: 8})}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {indent: 8})}\n        r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {indent: 10})}\n          r = Math.sqrt(${pattern('d{var} * d{var}', {join: ' + '})});\n        }\n        // If s / r < θ, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${getVariableName(0)} - node.min_${getVariableName(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${pattern('f{var} += v * d{var};', {indent: 10})}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${runRecursiveOnChildren()}\n        }\n      }\n    }\n\n    ${pattern('sourceBody.force.{var} += f{var};', {indent: 4})}\n  }\n\n  function insertBodies(bodies) {\n    ${pattern('var {var}min = Number.MAX_VALUE;', {indent: 4})}\n    ${pattern('var {var}max = Number.MIN_VALUE;', {indent: 4})}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {indent: 6})}\n      ${pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {indent: 6})}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {indent: 4})}\n\n    currentInCache = 0;\n    root = newNode();\n    ${pattern('root.min_{var} = {var}min;', {indent: 4})}\n    ${pattern('root.max_{var} = {var}min + maxSideLength;', {indent: 4})}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${pattern('var {var} = body.pos.{var};', {indent: 8})}\n        node.mass += body.mass;\n        ${pattern('node.mass_{var} += body.mass * {var};', {indent: 8})}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${pattern('var min_{var} = node.min_{var};', {indent: 8})}\n        ${pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {indent: 8})}\n\n${assignInsertionQuadIndex(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${pattern('child.min_{var} = min_{var};', {indent: 10})}\n          ${pattern('child.max_{var} = max_{var};', {indent: 10})}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {indent: 12})}\n\n            ${pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {indent: 12})}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\nreturn createQuadTree;\n\n`;\n  return code;\n\n\n  function assignInsertionQuadIndex(indentCount) {\n    let insertionCode = [];\n    let indent = Array(indentCount + 1).join(' ');\n    for (let i = 0; i < dimension; ++i) {\n      insertionCode.push(indent + `if (${getVariableName(i)} > max_${getVariableName(i)}) {`);\n      insertionCode.push(indent + `  quadIdx = quadIdx + ${Math.pow(2, i)};`);\n      insertionCode.push(indent + `  min_${getVariableName(i)} = max_${getVariableName(i)};`);\n      insertionCode.push(indent + `  max_${getVariableName(i)} = node.max_${getVariableName(i)};`);\n      insertionCode.push(indent + `}`);\n    }\n    return insertionCode.join('\\n');\n    // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    let indent = Array(11).join(' ');\n    let recursiveCode = [];\n    for (let i = 0; i < quadCount; ++i) {\n      recursiveCode.push(indent + `if (node.quad${i}) {`);\n      recursiveCode.push(indent + `  queue[pushIdx] = node.quad${i};`);\n      recursiveCode.push(indent + `  queueLength += 1;`);\n      recursiveCode.push(indent + `  pushIdx += 1;`);\n      recursiveCode.push(indent + `}`);\n    }\n    return recursiveCode.join('\\n');\n    // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction isSamePosition(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  return `\n  function isSamePosition(point1, point2) {\n    ${pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {indent: 2})}\n  \n    return ${pattern('d{var} < 1e-8', {join: ' && '})};\n  }  \n`;\n}\n\nfunction setChildBodyCode(dimension) {\n  var quadCount = Math.pow(2, dimension);\n  return `\nfunction setChild(node, idx, child) {\n  ${setChildBody()}\n}`;\n  function setChildBody() {\n    let childBody = [];\n    for (let i = 0; i < quadCount; ++i) {\n      let prefix = (i === 0) ? '  ' : '  else ';\n      childBody.push(`${prefix}if (idx === ${i}) node.quad${i} = child;`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n}\n\nfunction getChildBodyCode(dimension) {\n  return `function getChild(node, idx) {\n${getChildBody()}\n  return null;\n}`;\n\n  function getChildBody() {\n    let childBody = [];\n    let quadCount = Math.pow(2, dimension);\n    for (let i = 0; i < quadCount; ++i) {\n      childBody.push(`  if (idx === ${i}) return node.quad${i};`);\n    }\n\n    return childBody.join('\\n');\n    // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n}\n\nfunction getQuadNodeCode(dimension) {\n  let pattern = createPatternBuilder(dimension);\n  let quadCount = Math.pow(2, dimension);\n  var quadNodeCode = `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${assignQuads('  this.')}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${pattern('this.mass_{var} = 0;', {indent: 2})}\n\n  // bounding box coordinates\n  ${pattern('this.min_{var} = 0;', {indent: 2})}\n  ${pattern('this.max_{var} = 0;', {indent: 2})}\n}\n`;\n  return quadNodeCode;\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    let quads = [];\n    for (let i = 0; i < quadCount; ++i) {\n      quads.push(`${indent}quad${i} = null;`);\n    }\n    return quads.join('\\n');\n  }\n}\n\nfunction getInsertStackCode() {\n  return `\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n`;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlUXVhZFRyZWUuanMiLCJtYXBwaW5ncyI6IkFBQUEsNkJBQTZCLG1CQUFPLENBQUMsOEpBQXdCO0FBQzdELHdCQUF3QixtQkFBTyxDQUFDLG9KQUFtQjs7QUFFbkQ7QUFDQSwyQ0FBMkM7O0FBRTNDO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQSwrQkFBK0I7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRixFQUFFO0FBQ0YsRUFBRTtBQUNGLEVBQUU7QUFDRixFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxvQkFBb0Isb0JBQW9CLEtBQUssTUFBTSxTQUFTLEVBQUU7QUFDOUQsUUFBUSxtQkFBbUIsS0FBSyxZQUFZLEtBQUssTUFBTSxTQUFTLEVBQUU7QUFDbEUsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTSxlQUFlLEtBQUssSUFBSSxVQUFVO0FBQ3hDO0FBQ0EsTUFBTSxlQUFlLEtBQUssSUFBSSxJQUFJLFVBQVU7QUFDNUM7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsV0FBVyxLQUFLLFlBQVksS0FBSyxrQkFBa0IsS0FBSyxJQUFJLFVBQVU7QUFDaEYsd0JBQXdCLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxZQUFZLEVBQUU7O0FBRWxFO0FBQ0E7QUFDQSxZQUFZLFdBQVcsS0FBSyxtQ0FBbUMsSUFBSSxXQUFXO0FBQzlFLDBCQUEwQixXQUFXLEtBQUssSUFBSSxJQUFJLElBQUksWUFBWSxFQUFFO0FBQ3BFOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsV0FBVyxLQUFLLFNBQVMsS0FBSyxJQUFJLFVBQVU7QUFDdEQsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLFVBQVUsV0FBVyxLQUFLLGFBQWEsS0FBSyw4QkFBOEIsS0FBSyxJQUFJLFVBQVU7QUFDN0Ysd0JBQXdCLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxZQUFZLEVBQUU7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVyxLQUFLLG1DQUFtQyxJQUFJLFdBQVc7QUFDOUUsMEJBQTBCLFdBQVcsS0FBSyxJQUFJLElBQUksSUFBSSxZQUFZLEVBQUU7QUFDcEU7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLG9CQUFvQixhQUFhLG1CQUFtQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksV0FBVyxLQUFLLFNBQVMsS0FBSyxJQUFJLFdBQVc7QUFDekQsVUFBVTtBQUNWOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLDJCQUEyQixLQUFLLEtBQUssS0FBSyxJQUFJLFVBQVU7QUFDOUQ7O0FBRUE7QUFDQSxNQUFNLGNBQWMsSUFBSSx1QkFBdUIsSUFBSSxVQUFVO0FBQzdELE1BQU0sY0FBYyxJQUFJLHVCQUF1QixJQUFJLFVBQVU7QUFDN0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxrQkFBa0IsS0FBSyxHQUFHLElBQUksTUFBTSxJQUFJLFdBQVcsS0FBSyxJQUFJLFVBQVU7QUFDOUUsUUFBUSxrQkFBa0IsS0FBSyxHQUFHLElBQUksTUFBTSxJQUFJLFdBQVcsS0FBSyxJQUFJLFVBQVU7QUFDOUU7O0FBRUE7QUFDQTtBQUNBLE1BQU0sY0FBYyxJQUFJLE9BQU8sSUFBSSxzQ0FBc0MsSUFBSSxPQUFPLElBQUksS0FBSyxJQUFJLFVBQVU7O0FBRTNHO0FBQ0E7QUFDQSxNQUFNLG1CQUFtQixLQUFLLEdBQUcsSUFBSSxJQUFJLElBQUksVUFBVTtBQUN2RCxNQUFNLG1CQUFtQixLQUFLLEdBQUcsSUFBSSxvQkFBb0IsSUFBSSxVQUFVOztBQUV2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxjQUFjLEtBQUssWUFBWSxLQUFLLElBQUksVUFBVTtBQUM1RDtBQUNBLFVBQVUsb0JBQW9CLEtBQUssZ0JBQWdCLEtBQUssSUFBSSxVQUFVOztBQUV0RTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCLFVBQVUsa0JBQWtCLEtBQUssWUFBWSxLQUFLLElBQUksVUFBVTtBQUNoRSxVQUFVLGtCQUFrQixLQUFLLFFBQVEsS0FBSyxZQUFZLElBQUksTUFBTSxJQUFJLFVBQVU7O0FBRWxGLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLG9CQUFvQixLQUFLLE9BQU8sS0FBSyxJQUFJLFdBQVc7QUFDaEUsWUFBWSxvQkFBb0IsS0FBSyxPQUFPLEtBQUssSUFBSSxXQUFXO0FBQ2hFOztBQUVBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxlQUFlLEtBQUssYUFBYSxLQUFLLFlBQVksSUFBSSxXQUFXLElBQUksV0FBVzs7QUFFOUYsY0FBYyxzQkFBc0IsS0FBSyxZQUFZLEtBQUssSUFBSSxLQUFLLElBQUksV0FBVztBQUNsRjtBQUNBO0FBQ0EsWUFBWTs7QUFFWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQyx5Q0FBeUMsb0JBQW9CLFFBQVEsbUJBQW1CLEdBQUc7QUFDM0YsMkRBQTJELGdCQUFnQjtBQUMzRSwyQ0FBMkMsb0JBQW9CLFFBQVEsb0JBQW9CO0FBQzNGLDJDQUEyQyxvQkFBb0IsYUFBYSxvQkFBb0I7QUFDaEcsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQyxrREFBa0QsRUFBRSxHQUFHO0FBQ3ZELGlFQUFpRSxHQUFHO0FBQ3BFLHNEQUFzRDtBQUN0RCxrREFBa0Q7QUFDbEQsb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkMsb0JBQW9CLE9BQU8sTUFBTSxHQUFHLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGVBQWUsS0FBSyxtQkFBbUIsS0FBSyxVQUFVLElBQUksRUFBRSxJQUFJLFVBQVU7QUFDaEY7QUFDQSxhQUFhLFdBQVcsS0FBSyxVQUFVLGFBQWE7QUFDcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLENBQUM7QUFDRDtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkM7QUFDQSx3QkFBd0IsT0FBTyxjQUFjLEVBQUUsYUFBYSxHQUFHLFFBQVE7QUFDdkU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGVBQWU7QUFDbkMsc0NBQXNDLEVBQUUsb0JBQW9CLEdBQUc7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBLElBQUksb0JBQW9CLEtBQUssSUFBSSxJQUFJLFVBQVU7O0FBRS9DO0FBQ0EsSUFBSSxtQkFBbUIsS0FBSyxJQUFJLElBQUksVUFBVTtBQUM5QyxJQUFJLG1CQUFtQixLQUFLLElBQUksSUFBSSxVQUFVO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsZUFBZTtBQUNuQyxvQkFBb0IsT0FBTyxNQUFNLEdBQUcsT0FBTztBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhcGhhZWxzYWxhamEvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dlbmVyYXRlUXVhZFRyZWUuanM/NzA5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVQYXR0ZXJuQnVpbGRlciA9IHJlcXVpcmUoJy4vY3JlYXRlUGF0dGVybkJ1aWxkZXInKTtcbmNvbnN0IGdldFZhcmlhYmxlTmFtZSA9IHJlcXVpcmUoJy4vZ2V0VmFyaWFibGVOYW1lJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuZXJhdGVRdWFkVHJlZUZ1bmN0aW9uO1xubW9kdWxlLmV4cG9ydHMuZ2VuZXJhdGVRdWFkVHJlZUZ1bmN0aW9uQm9keSA9IGdlbmVyYXRlUXVhZFRyZWVGdW5jdGlvbkJvZHk7XG5cbi8vIFRoZXNlIGV4cG9ydHMgYXJlIGZvciBJbmxpbmVUcmFuc2Zvcm0gdG9vbC5cbi8vIElubGluZVRyYW5zZm9ybTogZ2V0SW5zZXJ0U3RhY2tDb2RlXG5tb2R1bGUuZXhwb3J0cy5nZXRJbnNlcnRTdGFja0NvZGUgPSBnZXRJbnNlcnRTdGFja0NvZGU7XG4vLyBJbmxpbmVUcmFuc2Zvcm06IGdldFF1YWROb2RlQ29kZVxubW9kdWxlLmV4cG9ydHMuZ2V0UXVhZE5vZGVDb2RlID0gZ2V0UXVhZE5vZGVDb2RlO1xuLy8gSW5saW5lVHJhbnNmb3JtOiBpc1NhbWVQb3NpdGlvblxubW9kdWxlLmV4cG9ydHMuaXNTYW1lUG9zaXRpb24gPSBpc1NhbWVQb3NpdGlvbjtcbi8vIElubGluZVRyYW5zZm9ybTogZ2V0Q2hpbGRCb2R5Q29kZVxubW9kdWxlLmV4cG9ydHMuZ2V0Q2hpbGRCb2R5Q29kZSA9IGdldENoaWxkQm9keUNvZGU7XG4vLyBJbmxpbmVUcmFuc2Zvcm06IHNldENoaWxkQm9keUNvZGVcbm1vZHVsZS5leHBvcnRzLnNldENoaWxkQm9keUNvZGUgPSBzZXRDaGlsZEJvZHlDb2RlO1xuXG5mdW5jdGlvbiBnZW5lcmF0ZVF1YWRUcmVlRnVuY3Rpb24oZGltZW5zaW9uKSB7XG4gIGxldCBjb2RlID0gZ2VuZXJhdGVRdWFkVHJlZUZ1bmN0aW9uQm9keShkaW1lbnNpb24pO1xuICByZXR1cm4gKG5ldyBGdW5jdGlvbihjb2RlKSkoKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVRdWFkVHJlZUZ1bmN0aW9uQm9keShkaW1lbnNpb24pIHtcbiAgbGV0IHBhdHRlcm4gPSBjcmVhdGVQYXR0ZXJuQnVpbGRlcihkaW1lbnNpb24pO1xuICBsZXQgcXVhZENvdW50ID0gTWF0aC5wb3coMiwgZGltZW5zaW9uKTtcblxuICBsZXQgY29kZSA9IGBcbiR7Z2V0SW5zZXJ0U3RhY2tDb2RlKCl9XG4ke2dldFF1YWROb2RlQ29kZShkaW1lbnNpb24pfVxuJHtpc1NhbWVQb3NpdGlvbihkaW1lbnNpb24pfVxuJHtnZXRDaGlsZEJvZHlDb2RlKGRpbWVuc2lvbil9XG4ke3NldENoaWxkQm9keUNvZGUoZGltZW5zaW9uKX1cblxuZnVuY3Rpb24gY3JlYXRlUXVhZFRyZWUob3B0aW9ucywgcmFuZG9tKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmdyYXZpdHkgPSB0eXBlb2Ygb3B0aW9ucy5ncmF2aXR5ID09PSAnbnVtYmVyJyA/IG9wdGlvbnMuZ3Jhdml0eSA6IC0xO1xuICBvcHRpb25zLnRoZXRhID0gdHlwZW9mIG9wdGlvbnMudGhldGEgPT09ICdudW1iZXInID8gb3B0aW9ucy50aGV0YSA6IDAuODtcblxuICB2YXIgZ3Jhdml0eSA9IG9wdGlvbnMuZ3Jhdml0eTtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gW107XG4gIHZhciBpbnNlcnRTdGFjayA9IG5ldyBJbnNlcnRTdGFjaygpO1xuICB2YXIgdGhldGEgPSBvcHRpb25zLnRoZXRhO1xuXG4gIHZhciBub2Rlc0NhY2hlID0gW107XG4gIHZhciBjdXJyZW50SW5DYWNoZSA9IDA7XG4gIHZhciByb290ID0gbmV3Tm9kZSgpO1xuXG4gIHJldHVybiB7XG4gICAgaW5zZXJ0Qm9kaWVzOiBpbnNlcnRCb2RpZXMsXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHJvb3Qgbm9kZSBpZiBpdCBpcyBwcmVzZW50XG4gICAgICovXG4gICAgZ2V0Um9vdDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gcm9vdDtcbiAgICB9LFxuXG4gICAgdXBkYXRlQm9keUZvcmNlOiB1cGRhdGUsXG5cbiAgICBvcHRpb25zOiBmdW5jdGlvbihuZXdPcHRpb25zKSB7XG4gICAgICBpZiAobmV3T3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG5ld09wdGlvbnMuZ3Jhdml0eSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBncmF2aXR5ID0gbmV3T3B0aW9ucy5ncmF2aXR5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbmV3T3B0aW9ucy50aGV0YSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aGV0YSA9IG5ld09wdGlvbnMudGhldGE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZ3Jhdml0eTogZ3Jhdml0eSxcbiAgICAgICAgdGhldGE6IHRoZXRhXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBuZXdOb2RlKCkge1xuICAgIC8vIFRvIGF2b2lkIHByZXNzdXJlIG9uIEdDIHdlIHJldXNlIG5vZGVzLlxuICAgIHZhciBub2RlID0gbm9kZXNDYWNoZVtjdXJyZW50SW5DYWNoZV07XG4gICAgaWYgKG5vZGUpIHtcbiR7YXNzaWduUXVhZHMoJyAgICAgIG5vZGUuJyl9XG4gICAgICBub2RlLmJvZHkgPSBudWxsO1xuICAgICAgbm9kZS5tYXNzID0gJHtwYXR0ZXJuKCdub2RlLm1hc3Nfe3Zhcn0gPSAnLCB7am9pbjogJyd9KX0wO1xuICAgICAgJHtwYXR0ZXJuKCdub2RlLm1pbl97dmFyfSA9IG5vZGUubWF4X3t2YXJ9ID0gJywge2pvaW46ICcnfSl9MDtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IG5ldyBRdWFkTm9kZSgpO1xuICAgICAgbm9kZXNDYWNoZVtjdXJyZW50SW5DYWNoZV0gPSBub2RlO1xuICAgIH1cblxuICAgICsrY3VycmVudEluQ2FjaGU7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGUoc291cmNlQm9keSkge1xuICAgIHZhciBxdWV1ZSA9IHVwZGF0ZVF1ZXVlO1xuICAgIHZhciB2O1xuICAgICR7cGF0dGVybigndmFyIGR7dmFyfTsnLCB7aW5kZW50OiA0fSl9XG4gICAgdmFyIHI7IFxuICAgICR7cGF0dGVybigndmFyIGZ7dmFyfSA9IDA7Jywge2luZGVudDogNH0pfVxuICAgIHZhciBxdWV1ZUxlbmd0aCA9IDE7XG4gICAgdmFyIHNoaWZ0SWR4ID0gMDtcbiAgICB2YXIgcHVzaElkeCA9IDE7XG5cbiAgICBxdWV1ZVswXSA9IHJvb3Q7XG5cbiAgICB3aGlsZSAocXVldWVMZW5ndGgpIHtcbiAgICAgIHZhciBub2RlID0gcXVldWVbc2hpZnRJZHhdO1xuICAgICAgdmFyIGJvZHkgPSBub2RlLmJvZHk7XG5cbiAgICAgIHF1ZXVlTGVuZ3RoIC09IDE7XG4gICAgICBzaGlmdElkeCArPSAxO1xuICAgICAgdmFyIGRpZmZlcmVudEJvZHkgPSAoYm9keSAhPT0gc291cmNlQm9keSk7XG4gICAgICBpZiAoYm9keSAmJiBkaWZmZXJlbnRCb2R5KSB7XG4gICAgICAgIC8vIElmIHRoZSBjdXJyZW50IG5vZGUgaXMgYSBsZWFmIG5vZGUgKGFuZCBpdCBpcyBub3Qgc291cmNlIGJvZHkpLFxuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIGZvcmNlIGV4ZXJ0ZWQgYnkgdGhlIGN1cnJlbnQgbm9kZSBvbiBib2R5LCBhbmQgYWRkIHRoaXNcbiAgICAgICAgLy8gYW1vdW50IHRvIGJvZHkncyBuZXQgZm9yY2UuXG4gICAgICAgICR7cGF0dGVybignZHt2YXJ9ID0gYm9keS5wb3Mue3Zhcn0gLSBzb3VyY2VCb2R5LnBvcy57dmFyfTsnLCB7aW5kZW50OiA4fSl9XG4gICAgICAgIHIgPSBNYXRoLnNxcnQoJHtwYXR0ZXJuKCdke3Zhcn0gKiBke3Zhcn0nLCB7am9pbjogJyArICd9KX0pO1xuXG4gICAgICAgIGlmIChyID09PSAwKSB7XG4gICAgICAgICAgLy8gUG9vciBtYW4ncyBwcm90ZWN0aW9uIGFnYWluc3QgemVybyBkaXN0YW5jZS5cbiAgICAgICAgICAke3BhdHRlcm4oJ2R7dmFyfSA9IChyYW5kb20ubmV4dERvdWJsZSgpIC0gMC41KSAvIDUwOycsIHtpbmRlbnQ6IDEwfSl9XG4gICAgICAgICAgciA9IE1hdGguc3FydCgke3BhdHRlcm4oJ2R7dmFyfSAqIGR7dmFyfScsIHtqb2luOiAnICsgJ30pfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIHN0YW5kYXJkIGdyYXZpdGF0aW9uIGZvcmNlIGNhbGN1bGF0aW9uIGJ1dCB3ZSBkaXZpZGVcbiAgICAgICAgLy8gYnkgcl4zIHRvIHNhdmUgdHdvIG9wZXJhdGlvbnMgd2hlbiBub3JtYWxpemluZyBmb3JjZSB2ZWN0b3IuXG4gICAgICAgIHYgPSBncmF2aXR5ICogYm9keS5tYXNzICogc291cmNlQm9keS5tYXNzIC8gKHIgKiByICogcik7XG4gICAgICAgICR7cGF0dGVybignZnt2YXJ9ICs9IHYgKiBke3Zhcn07Jywge2luZGVudDogOH0pfVxuICAgICAgfSBlbHNlIGlmIChkaWZmZXJlbnRCb2R5KSB7XG4gICAgICAgIC8vIE90aGVyd2lzZSwgY2FsY3VsYXRlIHRoZSByYXRpbyBzIC8gciwgIHdoZXJlIHMgaXMgdGhlIHdpZHRoIG9mIHRoZSByZWdpb25cbiAgICAgICAgLy8gcmVwcmVzZW50ZWQgYnkgdGhlIGludGVybmFsIG5vZGUsIGFuZCByIGlzIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib2R5XG4gICAgICAgIC8vIGFuZCB0aGUgbm9kZSdzIGNlbnRlci1vZi1tYXNzXG4gICAgICAgICR7cGF0dGVybignZHt2YXJ9ID0gbm9kZS5tYXNzX3t2YXJ9IC8gbm9kZS5tYXNzIC0gc291cmNlQm9keS5wb3Mue3Zhcn07Jywge2luZGVudDogOH0pfVxuICAgICAgICByID0gTWF0aC5zcXJ0KCR7cGF0dGVybignZHt2YXJ9ICogZHt2YXJ9Jywge2pvaW46ICcgKyAnfSl9KTtcblxuICAgICAgICBpZiAociA9PT0gMCkge1xuICAgICAgICAgIC8vIFNvcnJ5IGFib3V0IGNvZGUgZHVwbGljYXRpb24uIEkgZG9uJ3Qgd2FudCB0byBjcmVhdGUgbWFueSBmdW5jdGlvbnNcbiAgICAgICAgICAvLyByaWdodCBhd2F5LiBKdXN0IHdhbnQgdG8gc2VlIHBlcmZvcm1hbmNlIGZpcnN0LlxuICAgICAgICAgICR7cGF0dGVybignZHt2YXJ9ID0gKHJhbmRvbS5uZXh0RG91YmxlKCkgLSAwLjUpIC8gNTA7Jywge2luZGVudDogMTB9KX1cbiAgICAgICAgICByID0gTWF0aC5zcXJ0KCR7cGF0dGVybignZHt2YXJ9ICogZHt2YXJ9Jywge2pvaW46ICcgKyAnfSl9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiBzIC8gciA8IM64LCB0cmVhdCB0aGlzIGludGVybmFsIG5vZGUgYXMgYSBzaW5nbGUgYm9keSwgYW5kIGNhbGN1bGF0ZSB0aGVcbiAgICAgICAgLy8gZm9yY2UgaXQgZXhlcnRzIG9uIHNvdXJjZUJvZHksIGFuZCBhZGQgdGhpcyBhbW91bnQgdG8gc291cmNlQm9keSdzIG5ldCBmb3JjZS5cbiAgICAgICAgaWYgKChub2RlLm1heF8ke2dldFZhcmlhYmxlTmFtZSgwKX0gLSBub2RlLm1pbl8ke2dldFZhcmlhYmxlTmFtZSgwKX0pIC8gciA8IHRoZXRhKSB7XG4gICAgICAgICAgLy8gaW4gdGhlIGlmIHN0YXRlbWVudCBhYm92ZSB3ZSBjb25zaWRlciBub2RlJ3Mgd2lkdGggb25seVxuICAgICAgICAgIC8vIGJlY2F1c2UgdGhlIHJlZ2lvbiB3YXMgbWFkZSBpbnRvIHNxdWFyZSBkdXJpbmcgdHJlZSBjcmVhdGlvbi5cbiAgICAgICAgICAvLyBUaHVzIHRoZXJlIGlzIG5vIGRpZmZlcmVuY2UgYmV0d2VlbiB1c2luZyB3aWR0aCBvciBoZWlnaHQuXG4gICAgICAgICAgdiA9IGdyYXZpdHkgKiBub2RlLm1hc3MgKiBzb3VyY2VCb2R5Lm1hc3MgLyAociAqIHIgKiByKTtcbiAgICAgICAgICAke3BhdHRlcm4oJ2Z7dmFyfSArPSB2ICogZHt2YXJ9OycsIHtpbmRlbnQ6IDEwfSl9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBydW4gdGhlIHByb2NlZHVyZSByZWN1cnNpdmVseSBvbiBlYWNoIG9mIHRoZSBjdXJyZW50IG5vZGUncyBjaGlsZHJlbi5cblxuICAgICAgICAgIC8vIEkgaW50ZW50aW9uYWxseSB1bmZvbGRlZCB0aGlzIGxvb3AsIHRvIHNhdmUgc2V2ZXJhbCBDUFUgY3ljbGVzLlxuJHtydW5SZWN1cnNpdmVPbkNoaWxkcmVuKCl9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAke3BhdHRlcm4oJ3NvdXJjZUJvZHkuZm9yY2Uue3Zhcn0gKz0gZnt2YXJ9OycsIHtpbmRlbnQ6IDR9KX1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydEJvZGllcyhib2RpZXMpIHtcbiAgICAke3BhdHRlcm4oJ3ZhciB7dmFyfW1pbiA9IE51bWJlci5NQVhfVkFMVUU7Jywge2luZGVudDogNH0pfVxuICAgICR7cGF0dGVybigndmFyIHt2YXJ9bWF4ID0gTnVtYmVyLk1JTl9WQUxVRTsnLCB7aW5kZW50OiA0fSl9XG4gICAgdmFyIGkgPSBib2RpZXMubGVuZ3RoO1xuXG4gICAgLy8gVG8gcmVkdWNlIHF1YWQgdHJlZSBkZXB0aCB3ZSBhcmUgbG9va2luZyBmb3IgZXhhY3QgYm91bmRpbmcgYm94IG9mIGFsbCBwYXJ0aWNsZXMuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFyIHBvcyA9IGJvZGllc1tpXS5wb3M7XG4gICAgICAke3BhdHRlcm4oJ2lmIChwb3Mue3Zhcn0gPCB7dmFyfW1pbikge3Zhcn1taW4gPSBwb3Mue3Zhcn07Jywge2luZGVudDogNn0pfVxuICAgICAgJHtwYXR0ZXJuKCdpZiAocG9zLnt2YXJ9ID4ge3Zhcn1tYXgpIHt2YXJ9bWF4ID0gcG9zLnt2YXJ9OycsIHtpbmRlbnQ6IDZ9KX1cbiAgICB9XG5cbiAgICAvLyBNYWtlcyB0aGUgYm91bmRzIHNxdWFyZS5cbiAgICB2YXIgbWF4U2lkZUxlbmd0aCA9IC1JbmZpbml0eTtcbiAgICAke3BhdHRlcm4oJ2lmICh7dmFyfW1heCAtIHt2YXJ9bWluID4gbWF4U2lkZUxlbmd0aCkgbWF4U2lkZUxlbmd0aCA9IHt2YXJ9bWF4IC0ge3Zhcn1taW4gOycsIHtpbmRlbnQ6IDR9KX1cblxuICAgIGN1cnJlbnRJbkNhY2hlID0gMDtcbiAgICByb290ID0gbmV3Tm9kZSgpO1xuICAgICR7cGF0dGVybigncm9vdC5taW5fe3Zhcn0gPSB7dmFyfW1pbjsnLCB7aW5kZW50OiA0fSl9XG4gICAgJHtwYXR0ZXJuKCdyb290Lm1heF97dmFyfSA9IHt2YXJ9bWluICsgbWF4U2lkZUxlbmd0aDsnLCB7aW5kZW50OiA0fSl9XG5cbiAgICBpID0gYm9kaWVzLmxlbmd0aCAtIDE7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgcm9vdC5ib2R5ID0gYm9kaWVzW2ldO1xuICAgIH1cbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBpbnNlcnQoYm9kaWVzW2ldLCByb290KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQobmV3Qm9keSkge1xuICAgIGluc2VydFN0YWNrLnJlc2V0KCk7XG4gICAgaW5zZXJ0U3RhY2sucHVzaChyb290LCBuZXdCb2R5KTtcblxuICAgIHdoaWxlICghaW5zZXJ0U3RhY2suaXNFbXB0eSgpKSB7XG4gICAgICB2YXIgc3RhY2tJdGVtID0gaW5zZXJ0U3RhY2sucG9wKCk7XG4gICAgICB2YXIgbm9kZSA9IHN0YWNrSXRlbS5ub2RlO1xuICAgICAgdmFyIGJvZHkgPSBzdGFja0l0ZW0uYm9keTtcblxuICAgICAgaWYgKCFub2RlLmJvZHkpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBpbnRlcm5hbCBub2RlLiBVcGRhdGUgdGhlIHRvdGFsIG1hc3Mgb2YgdGhlIG5vZGUgYW5kIGNlbnRlci1vZi1tYXNzLlxuICAgICAgICAke3BhdHRlcm4oJ3ZhciB7dmFyfSA9IGJvZHkucG9zLnt2YXJ9OycsIHtpbmRlbnQ6IDh9KX1cbiAgICAgICAgbm9kZS5tYXNzICs9IGJvZHkubWFzcztcbiAgICAgICAgJHtwYXR0ZXJuKCdub2RlLm1hc3Nfe3Zhcn0gKz0gYm9keS5tYXNzICoge3Zhcn07Jywge2luZGVudDogOH0pfVxuXG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGluc2VydCB0aGUgYm9keSBpbiB0aGUgYXBwcm9wcmlhdGUgcXVhZHJhbnQuXG4gICAgICAgIC8vIEJ1dCBmaXJzdCBmaW5kIHRoZSBhcHByb3ByaWF0ZSBxdWFkcmFudC5cbiAgICAgICAgdmFyIHF1YWRJZHggPSAwOyAvLyBBc3N1bWUgd2UgYXJlIGluIHRoZSAwJ3MgcXVhZC5cbiAgICAgICAgJHtwYXR0ZXJuKCd2YXIgbWluX3t2YXJ9ID0gbm9kZS5taW5fe3Zhcn07Jywge2luZGVudDogOH0pfVxuICAgICAgICAke3BhdHRlcm4oJ3ZhciBtYXhfe3Zhcn0gPSAobWluX3t2YXJ9ICsgbm9kZS5tYXhfe3Zhcn0pIC8gMjsnLCB7aW5kZW50OiA4fSl9XG5cbiR7YXNzaWduSW5zZXJ0aW9uUXVhZEluZGV4KDgpfVxuXG4gICAgICAgIHZhciBjaGlsZCA9IGdldENoaWxkKG5vZGUsIHF1YWRJZHgpO1xuXG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICAvLyBUaGUgbm9kZSBpcyBpbnRlcm5hbCBidXQgdGhpcyBxdWFkcmFudCBpcyBub3QgdGFrZW4uIEFkZFxuICAgICAgICAgIC8vIHN1Ym5vZGUgdG8gaXQuXG4gICAgICAgICAgY2hpbGQgPSBuZXdOb2RlKCk7XG4gICAgICAgICAgJHtwYXR0ZXJuKCdjaGlsZC5taW5fe3Zhcn0gPSBtaW5fe3Zhcn07Jywge2luZGVudDogMTB9KX1cbiAgICAgICAgICAke3BhdHRlcm4oJ2NoaWxkLm1heF97dmFyfSA9IG1heF97dmFyfTsnLCB7aW5kZW50OiAxMH0pfVxuICAgICAgICAgIGNoaWxkLmJvZHkgPSBib2R5O1xuXG4gICAgICAgICAgc2V0Q2hpbGQobm9kZSwgcXVhZElkeCwgY2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNvbnRpbnVlIHNlYXJjaGluZyBpbiB0aGlzIHF1YWRyYW50LlxuICAgICAgICAgIGluc2VydFN0YWNrLnB1c2goY2hpbGQsIGJvZHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXZSBhcmUgdHJ5aW5nIHRvIGFkZCB0byB0aGUgbGVhZiBub2RlLlxuICAgICAgICAvLyBXZSBoYXZlIHRvIGNvbnZlcnQgY3VycmVudCBsZWFmIGludG8gaW50ZXJuYWwgbm9kZVxuICAgICAgICAvLyBhbmQgY29udGludWUgYWRkaW5nIHR3byBub2Rlcy5cbiAgICAgICAgdmFyIG9sZEJvZHkgPSBub2RlLmJvZHk7XG4gICAgICAgIG5vZGUuYm9keSA9IG51bGw7IC8vIGludGVybmFsIG5vZGVzIGRvIG5vdCBjYXJ5IGJvZGllc1xuXG4gICAgICAgIGlmIChpc1NhbWVQb3NpdGlvbihvbGRCb2R5LnBvcywgYm9keS5wb3MpKSB7XG4gICAgICAgICAgLy8gUHJldmVudCBpbmZpbml0ZSBzdWJkaXZpc2lvbiBieSBidW1waW5nIG9uZSBub2RlXG4gICAgICAgICAgLy8gYW55d2hlcmUgaW4gdGhpcyBxdWFkcmFudFxuICAgICAgICAgIHZhciByZXRyaWVzQ291bnQgPSAzO1xuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXQgPSByYW5kb20ubmV4dERvdWJsZSgpO1xuICAgICAgICAgICAgJHtwYXR0ZXJuKCd2YXIgZHt2YXJ9ID0gKG5vZGUubWF4X3t2YXJ9IC0gbm9kZS5taW5fe3Zhcn0pICogb2Zmc2V0OycsIHtpbmRlbnQ6IDEyfSl9XG5cbiAgICAgICAgICAgICR7cGF0dGVybignb2xkQm9keS5wb3Mue3Zhcn0gPSBub2RlLm1pbl97dmFyfSArIGR7dmFyfTsnLCB7aW5kZW50OiAxMn0pfVxuICAgICAgICAgICAgcmV0cmllc0NvdW50IC09IDE7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgYnVtcCBpdCBvdXQgb2YgdGhlIGJveC4gSWYgd2UgZG8sIG5leHQgaXRlcmF0aW9uIHNob3VsZCBmaXggaXRcbiAgICAgICAgICB9IHdoaWxlIChyZXRyaWVzQ291bnQgPiAwICYmIGlzU2FtZVBvc2l0aW9uKG9sZEJvZHkucG9zLCBib2R5LnBvcykpO1xuXG4gICAgICAgICAgaWYgKHJldHJpZXNDb3VudCA9PT0gMCAmJiBpc1NhbWVQb3NpdGlvbihvbGRCb2R5LnBvcywgYm9keS5wb3MpKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGlzIHZlcnkgYmFkLCB3ZSByYW4gb3V0IG9mIHByZWNpc2lvbi5cbiAgICAgICAgICAgIC8vIGlmIHdlIGRvIG5vdCByZXR1cm4gZnJvbSB0aGUgbWV0aG9kIHdlJ2xsIGdldCBpbnRvXG4gICAgICAgICAgICAvLyBpbmZpbml0ZSBsb29wIGhlcmUuIFNvIHdlIHNhY3JpZmljZSBjb3JyZWN0bmVzcyBvZiBsYXlvdXQsIGFuZCBrZWVwIHRoZSBhcHAgcnVubmluZ1xuICAgICAgICAgICAgLy8gTmV4dCBsYXlvdXQgaXRlcmF0aW9uIHNob3VsZCBnZXQgbGFyZ2VyIGJvdW5kaW5nIGJveCBpbiB0aGUgZmlyc3Qgc3RlcCBhbmQgZml4IHRoaXNcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gTmV4dCBpdGVyYXRpb24gc2hvdWxkIHN1YmRpdmlkZSBub2RlIGZ1cnRoZXIuXG4gICAgICAgIGluc2VydFN0YWNrLnB1c2gobm9kZSwgb2xkQm9keSk7XG4gICAgICAgIGluc2VydFN0YWNrLnB1c2gobm9kZSwgYm9keSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5yZXR1cm4gY3JlYXRlUXVhZFRyZWU7XG5cbmA7XG4gIHJldHVybiBjb2RlO1xuXG5cbiAgZnVuY3Rpb24gYXNzaWduSW5zZXJ0aW9uUXVhZEluZGV4KGluZGVudENvdW50KSB7XG4gICAgbGV0IGluc2VydGlvbkNvZGUgPSBbXTtcbiAgICBsZXQgaW5kZW50ID0gQXJyYXkoaW5kZW50Q291bnQgKyAxKS5qb2luKCcgJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaW1lbnNpb247ICsraSkge1xuICAgICAgaW5zZXJ0aW9uQ29kZS5wdXNoKGluZGVudCArIGBpZiAoJHtnZXRWYXJpYWJsZU5hbWUoaSl9ID4gbWF4XyR7Z2V0VmFyaWFibGVOYW1lKGkpfSkge2ApO1xuICAgICAgaW5zZXJ0aW9uQ29kZS5wdXNoKGluZGVudCArIGAgIHF1YWRJZHggPSBxdWFkSWR4ICsgJHtNYXRoLnBvdygyLCBpKX07YCk7XG4gICAgICBpbnNlcnRpb25Db2RlLnB1c2goaW5kZW50ICsgYCAgbWluXyR7Z2V0VmFyaWFibGVOYW1lKGkpfSA9IG1heF8ke2dldFZhcmlhYmxlTmFtZShpKX07YCk7XG4gICAgICBpbnNlcnRpb25Db2RlLnB1c2goaW5kZW50ICsgYCAgbWF4XyR7Z2V0VmFyaWFibGVOYW1lKGkpfSA9IG5vZGUubWF4XyR7Z2V0VmFyaWFibGVOYW1lKGkpfTtgKTtcbiAgICAgIGluc2VydGlvbkNvZGUucHVzaChpbmRlbnQgKyBgfWApO1xuICAgIH1cbiAgICByZXR1cm4gaW5zZXJ0aW9uQ29kZS5qb2luKCdcXG4nKTtcbiAgICAvLyBpZiAoeCA+IG1heF94KSB7IC8vIHNvbWV3aGVyZSBpbiB0aGUgZWFzdGVybiBwYXJ0LlxuICAgIC8vICAgcXVhZElkeCA9IHF1YWRJZHggKyAxO1xuICAgIC8vICAgbGVmdCA9IHJpZ2h0O1xuICAgIC8vICAgcmlnaHQgPSBub2RlLnJpZ2h0O1xuICAgIC8vIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJ1blJlY3Vyc2l2ZU9uQ2hpbGRyZW4oKSB7XG4gICAgbGV0IGluZGVudCA9IEFycmF5KDExKS5qb2luKCcgJyk7XG4gICAgbGV0IHJlY3Vyc2l2ZUNvZGUgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1YWRDb3VudDsgKytpKSB7XG4gICAgICByZWN1cnNpdmVDb2RlLnB1c2goaW5kZW50ICsgYGlmIChub2RlLnF1YWQke2l9KSB7YCk7XG4gICAgICByZWN1cnNpdmVDb2RlLnB1c2goaW5kZW50ICsgYCAgcXVldWVbcHVzaElkeF0gPSBub2RlLnF1YWQke2l9O2ApO1xuICAgICAgcmVjdXJzaXZlQ29kZS5wdXNoKGluZGVudCArIGAgIHF1ZXVlTGVuZ3RoICs9IDE7YCk7XG4gICAgICByZWN1cnNpdmVDb2RlLnB1c2goaW5kZW50ICsgYCAgcHVzaElkeCArPSAxO2ApO1xuICAgICAgcmVjdXJzaXZlQ29kZS5wdXNoKGluZGVudCArIGB9YCk7XG4gICAgfVxuICAgIHJldHVybiByZWN1cnNpdmVDb2RlLmpvaW4oJ1xcbicpO1xuICAgIC8vIGlmIChub2RlLnF1YWQwKSB7XG4gICAgLy8gICBxdWV1ZVtwdXNoSWR4XSA9IG5vZGUucXVhZDA7XG4gICAgLy8gICBxdWV1ZUxlbmd0aCArPSAxO1xuICAgIC8vICAgcHVzaElkeCArPSAxO1xuICAgIC8vIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2lnblF1YWRzKGluZGVudCkge1xuICAgIC8vIHRoaXMucXVhZDAgPSBudWxsO1xuICAgIC8vIHRoaXMucXVhZDEgPSBudWxsO1xuICAgIC8vIHRoaXMucXVhZDIgPSBudWxsO1xuICAgIC8vIHRoaXMucXVhZDMgPSBudWxsO1xuICAgIGxldCBxdWFkcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhZENvdW50OyArK2kpIHtcbiAgICAgIHF1YWRzLnB1c2goYCR7aW5kZW50fXF1YWQke2l9ID0gbnVsbDtgKTtcbiAgICB9XG4gICAgcmV0dXJuIHF1YWRzLmpvaW4oJ1xcbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZVBvc2l0aW9uKGRpbWVuc2lvbikge1xuICBsZXQgcGF0dGVybiA9IGNyZWF0ZVBhdHRlcm5CdWlsZGVyKGRpbWVuc2lvbik7XG4gIHJldHVybiBgXG4gIGZ1bmN0aW9uIGlzU2FtZVBvc2l0aW9uKHBvaW50MSwgcG9pbnQyKSB7XG4gICAgJHtwYXR0ZXJuKCd2YXIgZHt2YXJ9ID0gTWF0aC5hYnMocG9pbnQxLnt2YXJ9IC0gcG9pbnQyLnt2YXJ9KTsnLCB7aW5kZW50OiAyfSl9XG4gIFxuICAgIHJldHVybiAke3BhdHRlcm4oJ2R7dmFyfSA8IDFlLTgnLCB7am9pbjogJyAmJiAnfSl9O1xuICB9ICBcbmA7XG59XG5cbmZ1bmN0aW9uIHNldENoaWxkQm9keUNvZGUoZGltZW5zaW9uKSB7XG4gIHZhciBxdWFkQ291bnQgPSBNYXRoLnBvdygyLCBkaW1lbnNpb24pO1xuICByZXR1cm4gYFxuZnVuY3Rpb24gc2V0Q2hpbGQobm9kZSwgaWR4LCBjaGlsZCkge1xuICAke3NldENoaWxkQm9keSgpfVxufWA7XG4gIGZ1bmN0aW9uIHNldENoaWxkQm9keSgpIHtcbiAgICBsZXQgY2hpbGRCb2R5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFkQ291bnQ7ICsraSkge1xuICAgICAgbGV0IHByZWZpeCA9IChpID09PSAwKSA/ICcgICcgOiAnICBlbHNlICc7XG4gICAgICBjaGlsZEJvZHkucHVzaChgJHtwcmVmaXh9aWYgKGlkeCA9PT0gJHtpfSkgbm9kZS5xdWFkJHtpfSA9IGNoaWxkO2ApO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZEJvZHkuam9pbignXFxuJyk7XG4gICAgLy8gaWYgKGlkeCA9PT0gMCkgbm9kZS5xdWFkMCA9IGNoaWxkO1xuICAgIC8vIGVsc2UgaWYgKGlkeCA9PT0gMSkgbm9kZS5xdWFkMSA9IGNoaWxkO1xuICAgIC8vIGVsc2UgaWYgKGlkeCA9PT0gMikgbm9kZS5xdWFkMiA9IGNoaWxkO1xuICAgIC8vIGVsc2UgaWYgKGlkeCA9PT0gMykgbm9kZS5xdWFkMyA9IGNoaWxkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENoaWxkQm9keUNvZGUoZGltZW5zaW9uKSB7XG4gIHJldHVybiBgZnVuY3Rpb24gZ2V0Q2hpbGQobm9kZSwgaWR4KSB7XG4ke2dldENoaWxkQm9keSgpfVxuICByZXR1cm4gbnVsbDtcbn1gO1xuXG4gIGZ1bmN0aW9uIGdldENoaWxkQm9keSgpIHtcbiAgICBsZXQgY2hpbGRCb2R5ID0gW107XG4gICAgbGV0IHF1YWRDb3VudCA9IE1hdGgucG93KDIsIGRpbWVuc2lvbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWFkQ291bnQ7ICsraSkge1xuICAgICAgY2hpbGRCb2R5LnB1c2goYCAgaWYgKGlkeCA9PT0gJHtpfSkgcmV0dXJuIG5vZGUucXVhZCR7aX07YCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkQm9keS5qb2luKCdcXG4nKTtcbiAgICAvLyBpZiAoaWR4ID09PSAwKSByZXR1cm4gbm9kZS5xdWFkMDtcbiAgICAvLyBpZiAoaWR4ID09PSAxKSByZXR1cm4gbm9kZS5xdWFkMTtcbiAgICAvLyBpZiAoaWR4ID09PSAyKSByZXR1cm4gbm9kZS5xdWFkMjtcbiAgICAvLyBpZiAoaWR4ID09PSAzKSByZXR1cm4gbm9kZS5xdWFkMztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRRdWFkTm9kZUNvZGUoZGltZW5zaW9uKSB7XG4gIGxldCBwYXR0ZXJuID0gY3JlYXRlUGF0dGVybkJ1aWxkZXIoZGltZW5zaW9uKTtcbiAgbGV0IHF1YWRDb3VudCA9IE1hdGgucG93KDIsIGRpbWVuc2lvbik7XG4gIHZhciBxdWFkTm9kZUNvZGUgPSBgXG5mdW5jdGlvbiBRdWFkTm9kZSgpIHtcbiAgLy8gYm9keSBzdG9yZWQgaW5zaWRlIHRoaXMgbm9kZS4gSW4gcXVhZCB0cmVlIG9ubHkgbGVhZiBub2RlcyAoYnkgY29uc3RydWN0aW9uKVxuICAvLyBjb250YWluIGJvZGllczpcbiAgdGhpcy5ib2R5ID0gbnVsbDtcblxuICAvLyBDaGlsZCBub2RlcyBhcmUgc3RvcmVkIGluIHF1YWRzLiBFYWNoIHF1YWQgaXMgcHJlc2VudGVkIGJ5IG51bWJlcjpcbiAgLy8gMCB8IDFcbiAgLy8gLS0tLS1cbiAgLy8gMiB8IDNcbiR7YXNzaWduUXVhZHMoJyAgdGhpcy4nKX1cblxuICAvLyBUb3RhbCBtYXNzIG9mIGN1cnJlbnQgbm9kZVxuICB0aGlzLm1hc3MgPSAwO1xuXG4gIC8vIENlbnRlciBvZiBtYXNzIGNvb3JkaW5hdGVzXG4gICR7cGF0dGVybigndGhpcy5tYXNzX3t2YXJ9ID0gMDsnLCB7aW5kZW50OiAyfSl9XG5cbiAgLy8gYm91bmRpbmcgYm94IGNvb3JkaW5hdGVzXG4gICR7cGF0dGVybigndGhpcy5taW5fe3Zhcn0gPSAwOycsIHtpbmRlbnQ6IDJ9KX1cbiAgJHtwYXR0ZXJuKCd0aGlzLm1heF97dmFyfSA9IDA7Jywge2luZGVudDogMn0pfVxufVxuYDtcbiAgcmV0dXJuIHF1YWROb2RlQ29kZTtcblxuICBmdW5jdGlvbiBhc3NpZ25RdWFkcyhpbmRlbnQpIHtcbiAgICAvLyB0aGlzLnF1YWQwID0gbnVsbDtcbiAgICAvLyB0aGlzLnF1YWQxID0gbnVsbDtcbiAgICAvLyB0aGlzLnF1YWQyID0gbnVsbDtcbiAgICAvLyB0aGlzLnF1YWQzID0gbnVsbDtcbiAgICBsZXQgcXVhZHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1YWRDb3VudDsgKytpKSB7XG4gICAgICBxdWFkcy5wdXNoKGAke2luZGVudH1xdWFkJHtpfSA9IG51bGw7YCk7XG4gICAgfVxuICAgIHJldHVybiBxdWFkcy5qb2luKCdcXG4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRJbnNlcnRTdGFja0NvZGUoKSB7XG4gIHJldHVybiBgXG4vKipcbiAqIE91ciBpbXBsZW1lbnRhdGlvbiBvZiBRdWFkVHJlZSBpcyBub24tcmVjdXJzaXZlIHRvIGF2b2lkIEdDIGhpdFxuICogVGhpcyBkYXRhIHN0cnVjdHVyZSByZXByZXNlbnQgc3RhY2sgb2YgZWxlbWVudHNcbiAqIHdoaWNoIHdlIGFyZSB0cnlpbmcgdG8gaW5zZXJ0IGludG8gcXVhZCB0cmVlLlxuICovXG5mdW5jdGlvbiBJbnNlcnRTdGFjayAoKSB7XG4gICAgdGhpcy5zdGFjayA9IFtdO1xuICAgIHRoaXMucG9wSWR4ID0gMDtcbn1cblxuSW5zZXJ0U3RhY2sucHJvdG90eXBlID0ge1xuICAgIGlzRW1wdHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3BJZHggPT09IDA7XG4gICAgfSxcbiAgICBwdXNoOiBmdW5jdGlvbiAobm9kZSwgYm9keSkge1xuICAgICAgICB2YXIgaXRlbSA9IHRoaXMuc3RhY2tbdGhpcy5wb3BJZHhdO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIC8vIHdlIGFyZSB0cnlpbmcgdG8gYXZvaWQgbWVtb3J5IHByZXNzdXJlOiBjcmVhdGUgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIC8vIG9ubHkgd2hlbiBhYnNvbHV0ZWx5IG5lY2Vzc2FyeVxuICAgICAgICAgICAgdGhpcy5zdGFja1t0aGlzLnBvcElkeF0gPSBuZXcgSW5zZXJ0U3RhY2tFbGVtZW50KG5vZGUsIGJvZHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5ub2RlID0gbm9kZTtcbiAgICAgICAgICAgIGl0ZW0uYm9keSA9IGJvZHk7XG4gICAgICAgIH1cbiAgICAgICAgKyt0aGlzLnBvcElkeDtcbiAgICB9LFxuICAgIHBvcDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wb3BJZHggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFja1stLXRoaXMucG9wSWR4XTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5wb3BJZHggPSAwO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIEluc2VydFN0YWNrRWxlbWVudChub2RlLCBib2R5KSB7XG4gICAgdGhpcy5ub2RlID0gbm9kZTsgLy8gUXVhZFRyZWUgbm9kZVxuICAgIHRoaXMuYm9keSA9IGJvZHk7IC8vIHBoeXNpY2FsIGJvZHkgd2hpY2ggbmVlZHMgdG8gYmUgaW5zZXJ0ZWQgdG8gbm9kZVxufVxuYDtcbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js ***!
  \***************************************************************************************************************************/
/***/ ((module) => {

eval("module.exports = function getVariableName(index) {\n  if (index === 0) return 'x';\n  if (index === 1) return 'y';\n  if (index === 2) return 'z';\n  return 'c' + (index + 1);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL2NvZGVHZW5lcmF0b3JzL2dldFZhcmlhYmxlTmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXBoYWVsc2FsYWphLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5mb3JjZWxheW91dEAzLjMuMS9ub2RlX21vZHVsZXMvbmdyYXBoLmZvcmNlbGF5b3V0L2xpYi9jb2RlR2VuZXJhdG9ycy9nZXRWYXJpYWJsZU5hbWUuanM/NTRjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFZhcmlhYmxlTmFtZShpbmRleCkge1xuICBpZiAoaW5kZXggPT09IDApIHJldHVybiAneCc7XG4gIGlmIChpbmRleCA9PT0gMSkgcmV0dXJuICd5JztcbiAgaWYgKGluZGV4ID09PSAyKSByZXR1cm4gJ3onO1xuICByZXR1cm4gJ2MnICsgKGluZGV4ICsgMSk7XG59OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/getVariableName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/**\n * Manages a simulation of physical forces acting on bodies and springs.\n */\nmodule.exports = createPhysicsSimulator;\n\nvar generateCreateBodyFunction = __webpack_require__(/*! ./codeGenerators/generateCreateBody */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateBody.js\");\nvar generateQuadTreeFunction = __webpack_require__(/*! ./codeGenerators/generateQuadTree */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateQuadTree.js\");\nvar generateBoundsFunction = __webpack_require__(/*! ./codeGenerators/generateBounds */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateBounds.js\");\nvar generateCreateDragForceFunction = __webpack_require__(/*! ./codeGenerators/generateCreateDragForce */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateDragForce.js\");\nvar generateCreateSpringForceFunction = __webpack_require__(/*! ./codeGenerators/generateCreateSpringForce */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateCreateSpringForce.js\");\nvar generateIntegratorFunction = __webpack_require__(/*! ./codeGenerators/generateIntegrator */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/codeGenerators/generateIntegrator.js\");\n\nvar dimensionalCache = {};\n\nfunction createPhysicsSimulator(settings) {\n  var Spring = __webpack_require__(/*! ./spring */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js\");\n  var merge = __webpack_require__(/*! ngraph.merge */ \"(ssr)/./node_modules/.pnpm/ngraph.merge@1.0.0/node_modules/ngraph.merge/index.js\");\n  var eventify = __webpack_require__(/*! ngraph.events */ \"(ssr)/./node_modules/.pnpm/ngraph.events@1.2.2/node_modules/ngraph.events/index.js\");\n  if (settings) {\n    // Check for names from older versions of the layout\n    if (settings.springCoeff !== undefined) throw new Error('springCoeff was renamed to springCoefficient');\n    if (settings.dragCoeff !== undefined) throw new Error('dragCoeff was renamed to dragCoefficient');\n  }\n\n  settings = merge(settings, {\n      /**\n       * Ideal length for links (springs in physical model).\n       */\n      springLength: 10,\n\n      /**\n       * Hook's law coefficient. 1 - solid spring.\n       */\n      springCoefficient: 0.8, \n\n      /**\n       * Coulomb's law coefficient. It's used to repel nodes thus should be negative\n       * if you make it positive nodes start attract each other :).\n       */\n      gravity: -12,\n\n      /**\n       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).\n       * The closer it's to 1 the more nodes algorithm will have to go through.\n       * Setting it to one makes Barnes Hut simulation no different from\n       * brute-force forces calculation (each node is considered).\n       */\n      theta: 0.8,\n\n      /**\n       * Drag force coefficient. Used to slow down system, thus should be less than 1.\n       * The closer it is to 0 the less tight system will be.\n       */\n      dragCoefficient: 0.9, // TODO: Need to rename this to something better. E.g. `dragCoefficient`\n\n      /**\n       * Default time step (dt) for forces integration\n       */\n      timeStep : 0.5,\n\n      /**\n       * Adaptive time step uses average spring length to compute actual time step:\n       * See: https://twitter.com/anvaka/status/1293067160755957760\n       */\n      adaptiveTimeStepWeight: 0,\n\n      /**\n       * This parameter defines number of dimensions of the space where simulation\n       * is performed. \n       */\n      dimensions: 2,\n\n      /**\n       * In debug mode more checks are performed, this will help you catch errors\n       * quickly, however for production build it is recommended to turn off this flag\n       * to speed up computation.\n       */\n      debug: false\n  });\n\n  var factory = dimensionalCache[settings.dimensions];\n  if (!factory) {\n    var dimensions = settings.dimensions;\n    factory = {\n      Body: generateCreateBodyFunction(dimensions, settings.debug),\n      createQuadTree: generateQuadTreeFunction(dimensions),\n      createBounds: generateBoundsFunction(dimensions),\n      createDragForce: generateCreateDragForceFunction(dimensions),\n      createSpringForce: generateCreateSpringForceFunction(dimensions),\n      integrate: generateIntegratorFunction(dimensions),\n    };\n    dimensionalCache[dimensions] = factory;\n  }\n\n  var Body = factory.Body;\n  var createQuadTree = factory.createQuadTree;\n  var createBounds = factory.createBounds;\n  var createDragForce = factory.createDragForce;\n  var createSpringForce = factory.createSpringForce;\n  var integrate = factory.integrate;\n  var createBody = pos => new Body(pos);\n\n  var random = (__webpack_require__(/*! ngraph.random */ \"(ssr)/./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js\").random)(42);\n  var bodies = []; // Bodies in this simulation.\n  var springs = []; // Springs in this simulation.\n\n  var quadTree = createQuadTree(settings, random);\n  var bounds = createBounds(bodies, settings, random);\n  var springForce = createSpringForce(settings, random);\n  var dragForce = createDragForce(settings);\n\n  var totalMovement = 0; // how much movement we made on last step\n  var forces = [];\n  var forceMap = new Map();\n  var iterationNumber = 0;\n \n  addForce('nbody', nbodyForce);\n  addForce('spring', updateSpringForce);\n\n  var publicApi = {\n    /**\n     * Array of bodies, registered with current simulator\n     *\n     * Note: To add new body, use addBody() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    bodies: bodies,\n  \n    quadTree: quadTree,\n\n    /**\n     * Array of springs, registered with current simulator\n     *\n     * Note: To add new spring, use addSpring() method. This property is only\n     * exposed for testing/performance purposes.\n     */\n    springs: springs,\n\n    /**\n     * Returns settings with which current simulator was initialized\n     */\n    settings: settings,\n\n    /**\n     * Adds a new force to simulation\n     */\n    addForce: addForce,\n    \n    /**\n     * Removes a force from the simulation.\n     */\n    removeForce: removeForce,\n\n    /**\n     * Returns a map of all registered forces.\n     */\n    getForces: getForces,\n\n    /**\n     * Performs one step of force simulation.\n     *\n     * @returns {boolean} true if system is considered stable; False otherwise.\n     */\n    step: function () {\n      for (var i = 0; i < forces.length; ++i) {\n        forces[i](iterationNumber);\n      }\n      var movement = integrate(bodies, settings.timeStep, settings.adaptiveTimeStepWeight);\n      iterationNumber += 1;\n      return movement;\n    },\n\n    /**\n     * Adds body to the system\n     *\n     * @param {ngraph.physics.primitives.Body} body physical body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBody: function (body) {\n      if (!body) {\n        throw new Error('Body is required');\n      }\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Adds body to the system at given position\n     *\n     * @param {Object} pos position of a body\n     *\n     * @returns {ngraph.physics.primitives.Body} added body\n     */\n    addBodyAt: function (pos) {\n      if (!pos) {\n        throw new Error('Body position is required');\n      }\n      var body = createBody(pos);\n      bodies.push(body);\n\n      return body;\n    },\n\n    /**\n     * Removes body from the system\n     *\n     * @param {ngraph.physics.primitives.Body} body to remove\n     *\n     * @returns {Boolean} true if body found and removed. falsy otherwise;\n     */\n    removeBody: function (body) {\n      if (!body) { return; }\n\n      var idx = bodies.indexOf(body);\n      if (idx < 0) { return; }\n\n      bodies.splice(idx, 1);\n      if (bodies.length === 0) {\n        bounds.reset();\n      }\n      return true;\n    },\n\n    /**\n     * Adds a spring to this simulation.\n     *\n     * @returns {Object} - a handle for a spring. If you want to later remove\n     * spring pass it to removeSpring() method.\n     */\n    addSpring: function (body1, body2, springLength, springCoefficient) {\n      if (!body1 || !body2) {\n        throw new Error('Cannot add null spring to force simulator');\n      }\n\n      if (typeof springLength !== 'number') {\n        springLength = -1; // assume global configuration\n      }\n\n      var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1);\n      springs.push(spring);\n\n      // TODO: could mark simulator as dirty.\n      return spring;\n    },\n\n    /**\n     * Returns amount of movement performed on last step() call\n     */\n    getTotalMovement: function () {\n      return totalMovement;\n    },\n\n    /**\n     * Removes spring from the system\n     *\n     * @param {Object} spring to remove. Spring is an object returned by addSpring\n     *\n     * @returns {Boolean} true if spring found and removed. falsy otherwise;\n     */\n    removeSpring: function (spring) {\n      if (!spring) { return; }\n      var idx = springs.indexOf(spring);\n      if (idx > -1) {\n        springs.splice(idx, 1);\n        return true;\n      }\n    },\n\n    getBestNewBodyPosition: function (neighbors) {\n      return bounds.getBestNewPosition(neighbors);\n    },\n\n    /**\n     * Returns bounding box which covers all bodies\n     */\n    getBBox: getBoundingBox, \n    getBoundingBox: getBoundingBox, \n\n    invalidateBBox: function () {\n      console.warn('invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call');\n    },\n\n    // TODO: Move the force specific stuff to force\n    gravity: function (value) {\n      if (value !== undefined) {\n        settings.gravity = value;\n        quadTree.options({gravity: value});\n        return this;\n      } else {\n        return settings.gravity;\n      }\n    },\n\n    theta: function (value) {\n      if (value !== undefined) {\n        settings.theta = value;\n        quadTree.options({theta: value});\n        return this;\n      } else {\n        return settings.theta;\n      }\n    },\n\n    /**\n     * Returns pseudo-random number generator instance.\n     */\n    random: random\n  };\n\n  // allow settings modification via public API:\n  expose(settings, publicApi);\n\n  eventify(publicApi);\n\n  return publicApi;\n\n  function getBoundingBox() {\n    bounds.update();\n    return bounds.box;\n  }\n\n  function addForce(forceName, forceFunction) {\n    if (forceMap.has(forceName)) throw new Error('Force ' + forceName + ' is already added');\n\n    forceMap.set(forceName, forceFunction);\n    forces.push(forceFunction);\n  }\n\n  function removeForce(forceName) {\n    var forceIndex = forces.indexOf(forceMap.get(forceName));\n    if (forceIndex < 0) return;\n    forces.splice(forceIndex, 1);\n    forceMap.delete(forceName);\n  }\n\n  function getForces() {\n    // TODO: Should I trust them or clone the forces?\n    return forceMap;\n  }\n\n  function nbodyForce(/* iterationUmber */) {\n    if (bodies.length === 0) return;\n\n    quadTree.insertBodies(bodies);\n    var i = bodies.length;\n    while (i--) {\n      var body = bodies[i];\n      if (!body.isPinned) {\n        body.reset();\n        quadTree.updateBodyForce(body);\n        dragForce.update(body);\n      }\n    }\n  }\n\n  function updateSpringForce() {\n    var i = springs.length;\n    while (i--) {\n      springForce.update(springs[i]);\n    }\n  }\n\n}\n\nfunction expose(settings, target) {\n  for (var key in settings) {\n    augment(settings, target, key);\n  }\n}\n\nfunction augment(source, target, key) {\n  if (!source.hasOwnProperty(key)) return;\n  if (typeof target[key] === 'function') {\n    // this accessor is already defined. Ignore it\n    return;\n  }\n  var sourceIsNumber = Number.isFinite(source[key]);\n\n  if (sourceIsNumber) {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        if (!Number.isFinite(value)) throw new Error('Value of ' + key + ' should be a valid number.');\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    };\n  } else {\n    target[key] = function (value) {\n      if (value !== undefined) {\n        source[key] = value;\n        return target;\n      }\n      return source[key];\n    };\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/createPhysicsSimulator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js ***!
  \***************************************************************************************************/
/***/ ((module) => {

eval("module.exports = Spring;\n\n/**\n * Represents a physical spring. Spring connects two bodies, has rest length\n * stiffness coefficient and optional weight\n */\nfunction Spring(fromBody, toBody, length, springCoefficient) {\n    this.from = fromBody;\n    this.to = toBody;\n    this.length = length;\n    this.coefficient = springCoefficient;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL3NwcmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3JhcGhhZWxzYWxhamEvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLmZvcmNlbGF5b3V0QDMuMy4xL25vZGVfbW9kdWxlcy9uZ3JhcGguZm9yY2VsYXlvdXQvbGliL3NwcmluZy5qcz9jMDYzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gU3ByaW5nO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBwaHlzaWNhbCBzcHJpbmcuIFNwcmluZyBjb25uZWN0cyB0d28gYm9kaWVzLCBoYXMgcmVzdCBsZW5ndGhcbiAqIHN0aWZmbmVzcyBjb2VmZmljaWVudCBhbmQgb3B0aW9uYWwgd2VpZ2h0XG4gKi9cbmZ1bmN0aW9uIFNwcmluZyhmcm9tQm9keSwgdG9Cb2R5LCBsZW5ndGgsIHNwcmluZ0NvZWZmaWNpZW50KSB7XG4gICAgdGhpcy5mcm9tID0gZnJvbUJvZHk7XG4gICAgdGhpcy50byA9IHRvQm9keTtcbiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICB0aGlzLmNvZWZmaWNpZW50ID0gc3ByaW5nQ29lZmZpY2llbnQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/lib/spring.js\n");

/***/ })

};
;