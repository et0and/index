/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ngraph.random@1.1.0";
exports.ids = ["vendor-chunks/ngraph.random@1.1.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("module.exports = random;\n\n// TODO: Deprecate?\nmodule.exports.random = random,\nmodule.exports.randomIterator = randomIterator\n\n/**\n * Creates seeded PRNG with two methods:\n *   next() and nextDouble()\n */\nfunction random(inputSeed) {\n  var seed = typeof inputSeed === 'number' ? inputSeed : (+new Date());\n  return new Generator(seed)\n}\n\nfunction Generator(seed) {\n  this.seed = seed;\n}\n\n/**\n  * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)\n  *\n  * @param maxValue Number REQUIRED. Omitting this number will result in NaN values from PRNG.\n  */\nGenerator.prototype.next = next;\n\n/**\n  * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)\n  * This function is the same as Math.random() (except that it could be seeded)\n  */\nGenerator.prototype.nextDouble = nextDouble;\n\n/**\n * Returns a random real number from uniform distribution in [0, 1)\n */\nGenerator.prototype.uniform = nextDouble;\n\n/**\n * Returns a random real number from a Gaussian distribution\n * with 0 as a mean, and 1 as standard deviation u ~ N(0,1)\n */\nGenerator.prototype.gaussian = gaussian;\n\nfunction gaussian() {\n  // use the polar form of the Box-Muller transform\n  // based on https://introcs.cs.princeton.edu/java/23recursion/StdRandom.java\n  var r, x, y;\n  do {\n    x = this.nextDouble() * 2 - 1;\n    y = this.nextDouble() * 2 - 1;\n    r = x * x + y * y;\n  } while (r >= 1 || r === 0);\n\n  return x * Math.sqrt(-2 * Math.log(r)/r);\n}\n\n/**\n * See https://twitter.com/anvaka/status/1296182534150135808\n */\nGenerator.prototype.levy = levy;\n\nfunction levy() {\n  var beta = 3 / 2;\n  var sigma = Math.pow(\n      gamma( 1 + beta ) * Math.sin(Math.PI * beta / 2) / \n        (gamma((1 + beta) / 2) * beta * Math.pow(2, (beta - 1) / 2)),\n      1/beta\n  );\n  return this.gaussian() * sigma / Math.pow(Math.abs(this.gaussian()), 1/beta);\n}\n\n// gamma function approximation\nfunction gamma(z) {\n  return Math.sqrt(2 * Math.PI / z) * Math.pow((1 / Math.E) * (z + 1 / (12 * z - 1 / (10 * z))), z);\n}\n\nfunction nextDouble() {\n  var seed = this.seed;\n  // Robert Jenkins' 32 bit integer hash function.\n  seed = ((seed + 0x7ed55d16) + (seed << 12)) & 0xffffffff;\n  seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;\n  seed = ((seed + 0x165667b1) + (seed << 5)) & 0xffffffff;\n  seed = ((seed + 0xd3a2646c) ^ (seed << 9)) & 0xffffffff;\n  seed = ((seed + 0xfd7046c5) + (seed << 3)) & 0xffffffff;\n  seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;\n  this.seed = seed;\n  return (seed & 0xfffffff) / 0x10000000;\n}\n\nfunction next(maxValue) {\n  return Math.floor(this.nextDouble() * maxValue);\n}\n\n/*\n * Creates iterator over array, which returns items of array in random order\n * Time complexity is guaranteed to be O(n);\n */\nfunction randomIterator(array, customRandom) {\n  var localRandom = customRandom || random();\n  if (typeof localRandom.next !== 'function') {\n    throw new Error('customRandom does not match expected API: next() function is missing');\n  }\n\n  return {\n    forEach: forEach,\n\n    /**\n     * Shuffles array randomly, in place.\n     */\n    shuffle: shuffle\n  };\n\n  function shuffle() {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n    }\n\n    return array;\n  }\n\n  function forEach(callback) {\n    var i, j, t;\n    for (i = array.length - 1; i > 0; --i) {\n      j = localRandom.next(i + 1); // i inclusive\n      t = array[j];\n      array[j] = array[i];\n      array[i] = t;\n\n      callback(t);\n    }\n\n    if (array.length) {\n      callback(array[0]);\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vbmdyYXBoLnJhbmRvbUAxLjEuMC9ub2RlX21vZHVsZXMvbmdyYXBoLnJhbmRvbS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQiw2QkFBNkI7O0FBRTdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTztBQUN0QyxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCLE9BQU87QUFDdEMsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yYXBoYWVsc2FsYWphLy4vbm9kZV9tb2R1bGVzLy5wbnBtL25ncmFwaC5yYW5kb21AMS4xLjAvbm9kZV9tb2R1bGVzL25ncmFwaC5yYW5kb20vaW5kZXguanM/MjMyOSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbTtcblxuLy8gVE9ETzogRGVwcmVjYXRlP1xubW9kdWxlLmV4cG9ydHMucmFuZG9tID0gcmFuZG9tLFxubW9kdWxlLmV4cG9ydHMucmFuZG9tSXRlcmF0b3IgPSByYW5kb21JdGVyYXRvclxuXG4vKipcbiAqIENyZWF0ZXMgc2VlZGVkIFBSTkcgd2l0aCB0d28gbWV0aG9kczpcbiAqICAgbmV4dCgpIGFuZCBuZXh0RG91YmxlKClcbiAqL1xuZnVuY3Rpb24gcmFuZG9tKGlucHV0U2VlZCkge1xuICB2YXIgc2VlZCA9IHR5cGVvZiBpbnB1dFNlZWQgPT09ICdudW1iZXInID8gaW5wdXRTZWVkIDogKCtuZXcgRGF0ZSgpKTtcbiAgcmV0dXJuIG5ldyBHZW5lcmF0b3Ioc2VlZClcbn1cblxuZnVuY3Rpb24gR2VuZXJhdG9yKHNlZWQpIHtcbiAgdGhpcy5zZWVkID0gc2VlZDtcbn1cblxuLyoqXG4gICogR2VuZXJhdGVzIHJhbmRvbSBpbnRlZ2VyIG51bWJlciBpbiB0aGUgcmFuZ2UgZnJvbSAwIChpbmNsdXNpdmUpIHRvIG1heFZhbHVlIChleGNsdXNpdmUpXG4gICpcbiAgKiBAcGFyYW0gbWF4VmFsdWUgTnVtYmVyIFJFUVVJUkVELiBPbWl0dGluZyB0aGlzIG51bWJlciB3aWxsIHJlc3VsdCBpbiBOYU4gdmFsdWVzIGZyb20gUFJORy5cbiAgKi9cbkdlbmVyYXRvci5wcm90b3R5cGUubmV4dCA9IG5leHQ7XG5cbi8qKlxuICAqIEdlbmVyYXRlcyByYW5kb20gZG91YmxlIG51bWJlciBpbiB0aGUgcmFuZ2UgZnJvbSAwIChpbmNsdXNpdmUpIHRvIDEgKGV4Y2x1c2l2ZSlcbiAgKiBUaGlzIGZ1bmN0aW9uIGlzIHRoZSBzYW1lIGFzIE1hdGgucmFuZG9tKCkgKGV4Y2VwdCB0aGF0IGl0IGNvdWxkIGJlIHNlZWRlZClcbiAgKi9cbkdlbmVyYXRvci5wcm90b3R5cGUubmV4dERvdWJsZSA9IG5leHREb3VibGU7XG5cbi8qKlxuICogUmV0dXJucyBhIHJhbmRvbSByZWFsIG51bWJlciBmcm9tIHVuaWZvcm0gZGlzdHJpYnV0aW9uIGluIFswLCAxKVxuICovXG5HZW5lcmF0b3IucHJvdG90eXBlLnVuaWZvcm0gPSBuZXh0RG91YmxlO1xuXG4vKipcbiAqIFJldHVybnMgYSByYW5kb20gcmVhbCBudW1iZXIgZnJvbSBhIEdhdXNzaWFuIGRpc3RyaWJ1dGlvblxuICogd2l0aCAwIGFzIGEgbWVhbiwgYW5kIDEgYXMgc3RhbmRhcmQgZGV2aWF0aW9uIHUgfiBOKDAsMSlcbiAqL1xuR2VuZXJhdG9yLnByb3RvdHlwZS5nYXVzc2lhbiA9IGdhdXNzaWFuO1xuXG5mdW5jdGlvbiBnYXVzc2lhbigpIHtcbiAgLy8gdXNlIHRoZSBwb2xhciBmb3JtIG9mIHRoZSBCb3gtTXVsbGVyIHRyYW5zZm9ybVxuICAvLyBiYXNlZCBvbiBodHRwczovL2ludHJvY3MuY3MucHJpbmNldG9uLmVkdS9qYXZhLzIzcmVjdXJzaW9uL1N0ZFJhbmRvbS5qYXZhXG4gIHZhciByLCB4LCB5O1xuICBkbyB7XG4gICAgeCA9IHRoaXMubmV4dERvdWJsZSgpICogMiAtIDE7XG4gICAgeSA9IHRoaXMubmV4dERvdWJsZSgpICogMiAtIDE7XG4gICAgciA9IHggKiB4ICsgeSAqIHk7XG4gIH0gd2hpbGUgKHIgPj0gMSB8fCByID09PSAwKTtcblxuICByZXR1cm4geCAqIE1hdGguc3FydCgtMiAqIE1hdGgubG9nKHIpL3IpO1xufVxuXG4vKipcbiAqIFNlZSBodHRwczovL3R3aXR0ZXIuY29tL2FudmFrYS9zdGF0dXMvMTI5NjE4MjUzNDE1MDEzNTgwOFxuICovXG5HZW5lcmF0b3IucHJvdG90eXBlLmxldnkgPSBsZXZ5O1xuXG5mdW5jdGlvbiBsZXZ5KCkge1xuICB2YXIgYmV0YSA9IDMgLyAyO1xuICB2YXIgc2lnbWEgPSBNYXRoLnBvdyhcbiAgICAgIGdhbW1hKCAxICsgYmV0YSApICogTWF0aC5zaW4oTWF0aC5QSSAqIGJldGEgLyAyKSAvIFxuICAgICAgICAoZ2FtbWEoKDEgKyBiZXRhKSAvIDIpICogYmV0YSAqIE1hdGgucG93KDIsIChiZXRhIC0gMSkgLyAyKSksXG4gICAgICAxL2JldGFcbiAgKTtcbiAgcmV0dXJuIHRoaXMuZ2F1c3NpYW4oKSAqIHNpZ21hIC8gTWF0aC5wb3coTWF0aC5hYnModGhpcy5nYXVzc2lhbigpKSwgMS9iZXRhKTtcbn1cblxuLy8gZ2FtbWEgZnVuY3Rpb24gYXBwcm94aW1hdGlvblxuZnVuY3Rpb24gZ2FtbWEoeikge1xuICByZXR1cm4gTWF0aC5zcXJ0KDIgKiBNYXRoLlBJIC8geikgKiBNYXRoLnBvdygoMSAvIE1hdGguRSkgKiAoeiArIDEgLyAoMTIgKiB6IC0gMSAvICgxMCAqIHopKSksIHopO1xufVxuXG5mdW5jdGlvbiBuZXh0RG91YmxlKCkge1xuICB2YXIgc2VlZCA9IHRoaXMuc2VlZDtcbiAgLy8gUm9iZXJ0IEplbmtpbnMnIDMyIGJpdCBpbnRlZ2VyIGhhc2ggZnVuY3Rpb24uXG4gIHNlZWQgPSAoKHNlZWQgKyAweDdlZDU1ZDE2KSArIChzZWVkIDw8IDEyKSkgJiAweGZmZmZmZmZmO1xuICBzZWVkID0gKChzZWVkIF4gMHhjNzYxYzIzYykgXiAoc2VlZCA+Pj4gMTkpKSAmIDB4ZmZmZmZmZmY7XG4gIHNlZWQgPSAoKHNlZWQgKyAweDE2NTY2N2IxKSArIChzZWVkIDw8IDUpKSAmIDB4ZmZmZmZmZmY7XG4gIHNlZWQgPSAoKHNlZWQgKyAweGQzYTI2NDZjKSBeIChzZWVkIDw8IDkpKSAmIDB4ZmZmZmZmZmY7XG4gIHNlZWQgPSAoKHNlZWQgKyAweGZkNzA0NmM1KSArIChzZWVkIDw8IDMpKSAmIDB4ZmZmZmZmZmY7XG4gIHNlZWQgPSAoKHNlZWQgXiAweGI1NWE0ZjA5KSBeIChzZWVkID4+PiAxNikpICYgMHhmZmZmZmZmZjtcbiAgdGhpcy5zZWVkID0gc2VlZDtcbiAgcmV0dXJuIChzZWVkICYgMHhmZmZmZmZmKSAvIDB4MTAwMDAwMDA7XG59XG5cbmZ1bmN0aW9uIG5leHQobWF4VmFsdWUpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5uZXh0RG91YmxlKCkgKiBtYXhWYWx1ZSk7XG59XG5cbi8qXG4gKiBDcmVhdGVzIGl0ZXJhdG9yIG92ZXIgYXJyYXksIHdoaWNoIHJldHVybnMgaXRlbXMgb2YgYXJyYXkgaW4gcmFuZG9tIG9yZGVyXG4gKiBUaW1lIGNvbXBsZXhpdHkgaXMgZ3VhcmFudGVlZCB0byBiZSBPKG4pO1xuICovXG5mdW5jdGlvbiByYW5kb21JdGVyYXRvcihhcnJheSwgY3VzdG9tUmFuZG9tKSB7XG4gIHZhciBsb2NhbFJhbmRvbSA9IGN1c3RvbVJhbmRvbSB8fCByYW5kb20oKTtcbiAgaWYgKHR5cGVvZiBsb2NhbFJhbmRvbS5uZXh0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjdXN0b21SYW5kb20gZG9lcyBub3QgbWF0Y2ggZXhwZWN0ZWQgQVBJOiBuZXh0KCkgZnVuY3Rpb24gaXMgbWlzc2luZycpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JFYWNoOiBmb3JFYWNoLFxuXG4gICAgLyoqXG4gICAgICogU2h1ZmZsZXMgYXJyYXkgcmFuZG9tbHksIGluIHBsYWNlLlxuICAgICAqL1xuICAgIHNodWZmbGU6IHNodWZmbGVcbiAgfTtcblxuICBmdW5jdGlvbiBzaHVmZmxlKCkge1xuICAgIHZhciBpLCBqLCB0O1xuICAgIGZvciAoaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPiAwOyAtLWkpIHtcbiAgICAgIGogPSBsb2NhbFJhbmRvbS5uZXh0KGkgKyAxKTsgLy8gaSBpbmNsdXNpdmVcbiAgICAgIHQgPSBhcnJheVtqXTtcbiAgICAgIGFycmF5W2pdID0gYXJyYXlbaV07XG4gICAgICBhcnJheVtpXSA9IHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaykge1xuICAgIHZhciBpLCBqLCB0O1xuICAgIGZvciAoaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPiAwOyAtLWkpIHtcbiAgICAgIGogPSBsb2NhbFJhbmRvbS5uZXh0KGkgKyAxKTsgLy8gaSBpbmNsdXNpdmVcbiAgICAgIHQgPSBhcnJheVtqXTtcbiAgICAgIGFycmF5W2pdID0gYXJyYXlbaV07XG4gICAgICBhcnJheVtpXSA9IHQ7XG5cbiAgICAgIGNhbGxiYWNrKHQpO1xuICAgIH1cblxuICAgIGlmIChhcnJheS5sZW5ndGgpIHtcbiAgICAgIGNhbGxiYWNrKGFycmF5WzBdKTtcbiAgICB9XG4gIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/ngraph.random@1.1.0/node_modules/ngraph.random/index.js\n");

/***/ })

};
;