"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@musicorum+lastfm@0.3.1";
exports.ids = ["vendor-chunks/@musicorum+lastfm@0.3.1"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/@musicorum+lastfm@0.3.1/node_modules/@musicorum/lastfm/dist/LastClient.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@musicorum+lastfm@0.3.1/node_modules/@musicorum/lastfm/dist/LastClient.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LastClient: () => (/* binding */ LastClient)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n\n\nclass LastfmError extends Error {\n    response;\n    error;\n    constructor(response) {\n        super(response.message);\n        this.response = response;\n        this.error = response.error;\n    }\n}\n/**\n * Sources: {@link https://lastfm-docs.github.io/api-docs/codes/} and {@link https://www.last.fm/api/errorcodes}\n */\nvar LastfmErrorCode;\n(function (LastfmErrorCode) {\n    /**\n     * This service does not exist\n     */\n    LastfmErrorCode[LastfmErrorCode[\"SERVICE_UNAVAILABLE\"] = 2] = \"SERVICE_UNAVAILABLE\";\n    /**\n     *  No method with that name in this package\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_METHOD\"] = 3] = \"INVALID_METHOD\";\n    /**\n     * You do not have permissions to access the service\n     */\n    LastfmErrorCode[LastfmErrorCode[\"AUTHENTICATION_FAILED\"] = 4] = \"AUTHENTICATION_FAILED\";\n    /**\n     * This service doesn't exist in that format\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_RESPONSE_FORMAT\"] = 5] = \"INVALID_RESPONSE_FORMAT\";\n    /**\n     * Your request is missing a required parameter\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_PARAMETER\"] = 6] = \"INVALID_PARAMETER\";\n    /**\n     * Invalid resource specified\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_RESOURCE\"] = 7] = \"INVALID_RESOURCE\";\n    /**\n     * Most likely the backend service failed. Please try again.\n     */\n    LastfmErrorCode[LastfmErrorCode[\"OPERATION_FAILED\"] = 8] = \"OPERATION_FAILED\";\n    /**\n     *  Invalid session key - Please re-authenticate\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_SERSSION_TOKEN\"] = 9] = \"INVALID_SERSSION_TOKEN\";\n    /**\n     * You must be granted with a valid key by last.fm\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_API_TOKEN\"] = 10] = \"INVALID_API_TOKEN\";\n    /**\n     * This service is temporary offline. Try again later.\n     */\n    LastfmErrorCode[LastfmErrorCode[\"SERVICE_OFFLINE\"] = 11] = \"SERVICE_OFFLINE\";\n    /**\n     * Invalid method signature supplied\n     */\n    LastfmErrorCode[LastfmErrorCode[\"INVALID_SIGNATURE\"] = 13] = \"INVALID_SIGNATURE\";\n    /**\n     * This token has not been authorized\n     */\n    LastfmErrorCode[LastfmErrorCode[\"UNAUTHORIZED_TOKEN\"] = 14] = \"UNAUTHORIZED_TOKEN\";\n    /**\n     * The service is temporarily unavailable, please try again.\n     */\n    LastfmErrorCode[LastfmErrorCode[\"TEMPORARY_ERROR\"] = 16] = \"TEMPORARY_ERROR\";\n    /**\n     * User requires to be logged in to use this method\n     * This may be caused when trying to get some user's data with restricted privicy\n     */\n    LastfmErrorCode[LastfmErrorCode[\"REQUIRES_LOGIN\"] = 17] = \"REQUIRES_LOGIN\";\n    /**\n     * This application is not allowed to make requests to the web services\n     */\n    LastfmErrorCode[LastfmErrorCode[\"API_KEY_SUSPENDED\"] = 26] = \"API_KEY_SUSPENDED\";\n    /**\n     * This type of request is no longer supported\n     */\n    LastfmErrorCode[LastfmErrorCode[\"DEPRECATED\"] = 27] = \"DEPRECATED\";\n    /**\n     * Your IP has made too many requests in a short period\n     */\n    LastfmErrorCode[LastfmErrorCode[\"RATE_LIMIT_EXCEEDED\"] = 29] = \"RATE_LIMIT_EXCEEDED\";\n})(LastfmErrorCode || (LastfmErrorCode = {}));\n\n/**\n * Paginated results for a resource. This can be used to get specific pages or multiple pages\n */\nclass PaginatedResult {\n    requester;\n    totalPages;\n    totalResults;\n    perPage;\n    pages = [];\n    constructor(attr, requester) {\n        this.requester = requester;\n        this.totalPages = parseInt(attr.totalPages);\n        this.perPage = parseInt(attr.perPage);\n        this.totalResults = parseInt(attr.total);\n    }\n    /**\n     * Appends contents of a page to this paginated result\n     * @param page The page number of the contents to append\n     * @param items The resources of that page to append\n     * @returns This current paginated result\n     */\n    appendPage(page, items) {\n        // page index is converted to array index subtracting one number\n        // e.g. page 1 reffers to index 0\n        this.pages[--page] = items;\n        return this;\n    }\n    /**\n     * Get the contents from a page\n     * @param page The page to get the contents from. Page numbers start from 1\n     * @returns A list of the resources of that specific page\n     */\n    getPage(page) {\n        return this.pages[--page];\n    }\n    /**\n     * Get all contents fetched from this paginated result\n     * @returns All contents of all fetched pages. Note that missing pages will be ignoed\n     */\n    getAll() {\n        return this.pages.flat();\n    }\n    /**\n     * Fetches content from a page from the API, if it wasn't fetched yet\n     * @param page The page number to fetch content from. Page numbers start from 1\n     * @param force This will force to fetch that page, even if it's already fetched\n     * @returns The results from that page.\n     */\n    async fetchPage(page, force = false) {\n        if (this.pages[page - 1] && !force) {\n            return this.getPage(page);\n        }\n        const results = await this.requester(page);\n        this.appendPage(page, results);\n        return results;\n    }\n}\n\nfunction parseLastfmImages(images) {\n    return images\n        .filter((i) => !!i['#text'])\n        .map((i) => ({\n        size: i.size,\n        url: i['#text']\n    }));\n}\nfunction parseLastfmPagination(original) {\n    return {\n        page: parseInt(original.page),\n        totalPages: parseInt(original.totalPages),\n        perPage: parseInt(original.perPage),\n        total: parseInt(original.total)\n    };\n}\n\nclass User {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async getInfo(user) {\n        const original = await this.client.request('user.getInfo', { user });\n        return {\n            name: original.user.name,\n            realName: original.user.name,\n            age: parseInt(original.user.age),\n            playCount: parseInt(original.user.playcount),\n            country: original.user.country,\n            registered: new Date(parseInt(original.user.registered.unixtime) * 1000),\n            gender: original.user.gender,\n            subscriber: original.user.subscriber === '1',\n            images: parseLastfmImages(original.user.image),\n            url: original.user.url\n        };\n    }\n    async getRecentTracks(user, params) {\n        const stringParams = {\n            user,\n            limit: (params?.limit ?? 50).toString(),\n            page: (params?.page ?? 1).toString(),\n            extended: params?.extended === true ? '1' : '0'\n        };\n        if (params?.from) {\n            stringParams.from = Math.round(params.from.getTime() / 1000).toString();\n        }\n        if (params?.to) {\n            stringParams.to = Math.round(params.to.getTime() / 1000).toString();\n        }\n        const response = await this.client.request('user.getRecentTracks', stringParams);\n        const trackList = Array.isArray(response.recenttracks.track)\n            ? response.recenttracks.track\n            : [response.recenttracks.track];\n        const tracks = trackList.map((track) => ({\n            name: track.name,\n            mbid: track.mbid ?? undefined,\n            streamable: track.streamable == '1',\n            artist: {\n                name: track.artist.name || track.artist['#text'],\n                mbid: track.artist.mbid ?? undefined\n            },\n            images: parseLastfmImages(track.image),\n            album: {\n                name: track.album['#text'],\n                mbid: track.album.mbid ?? undefined\n            },\n            url: track.url,\n            date: track.date?.uts\n                ? new Date(parseInt(track.date.uts) * 1000)\n                : undefined,\n            nowPlaying: track['@attr']?.nowplaying === 'true',\n            loved: 'loved' in track ? track.loved === '1' : undefined\n        }));\n        return {\n            tracks,\n            attr: response.recenttracks['@attr']\n        };\n    }\n    async getRecentTracksPaginated(user, params) {\n        const metadataResponse = await this.getRecentTracks(user, params);\n        const paginated = new PaginatedResult(metadataResponse.attr, async (page) => {\n            const tracks = await this.getRecentTracks(user, {\n                ...params,\n                page\n            }).then((r) => r.tracks);\n            // skip first item if its now playing and not at first page, to prevent duplicates\n            return page !== 1 && tracks[0].nowPlaying ? tracks.slice(1) : tracks;\n        });\n        paginated.appendPage(params?.page ?? 1, metadataResponse.tracks);\n        return paginated;\n    }\n    async getTopAlbums(user, params) {\n        const response = await this.client.request('user.getTopAlbums', {\n            ...params,\n            user\n        });\n        const albums = response.topalbums.album.map((a) => ({\n            name: a.name,\n            artist: a.artist,\n            playCount: parseInt(a.playcount),\n            rank: parseInt(a['@attr'].rank),\n            mbid: a.mbid,\n            images: parseLastfmImages(a.image)\n        }));\n        return {\n            albums,\n            pagination: parseLastfmPagination(response.topalbums['@attr'])\n        };\n    }\n    async getTopArtists(user, params) {\n        const response = await this.client.request('user.getTopArtists', {\n            ...params,\n            user\n        });\n        const artists = response.topartists.artist.map((a) => ({\n            name: a.name,\n            mbid: a.mbid,\n            url: a.url,\n            playCount: parseInt(a.playcount),\n            streamable: a.streamable === '1',\n            rank: parseInt(a['@attr'].rank),\n            images: parseLastfmImages(a.image)\n        }));\n        return {\n            artists,\n            pagination: parseLastfmPagination(response.topartists['@attr'])\n        };\n    }\n    async getTopTracks(user, params) {\n        const response = await this.client.request('user.getTopTracks', {\n            ...params,\n            user\n        });\n        const tracks = response.toptracks.track.map((t) => ({\n            name: t.name,\n            mbid: t.mbid,\n            url: t.url,\n            playCount: parseInt(t.playcount),\n            artist: t.artist,\n            streamable: t.streamable.fulltrack === '1',\n            rank: parseInt(t['@attr'].rank),\n            images: parseLastfmImages(t.image)\n        }));\n        return {\n            tracks,\n            pagination: parseLastfmPagination(response.toptracks['@attr'])\n        };\n    }\n}\n\nclass Track {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async getInfo(trackName, artistName, params) {\n        const original = await this.client.request('track.getInfo', {\n            track: trackName,\n            artist: artistName,\n            mbid: params?.mbid,\n            autocorrect: params?.autoCorrect === true ? '1' : '0',\n            username: params?.username\n        });\n        if (!original.track)\n            return undefined;\n        return {\n            user: typeof original.track.userloved === 'string'\n                ? {\n                    loved: original.track.userloved === '1',\n                    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                    playCount: parseInt(original.track.userplaycount)\n                }\n                : undefined,\n            name: original.track.name,\n            mbid: original.track.mbid ?? undefined,\n            url: original.track.url,\n            duration: original.track.duration !== '0'\n                ? parseInt(original.track.duration)\n                : undefined,\n            listeners: parseInt(original.track.listeners),\n            playcount: parseInt(original.track.playcount),\n            artist: {\n                name: original.track.artist.name,\n                mbid: original.track.artist.mbid ?? undefined,\n                url: original.track.artist.url\n            },\n            album: original.track.album\n                ? {\n                    name: original.track.album.title,\n                    artist: original.track.album.artist,\n                    url: original.track.album.url,\n                    images: original.track.album.image\n                        ? parseLastfmImages(original.track.album.image)\n                        : undefined\n                }\n                : undefined,\n            tags: original.track.toptags?.tag,\n            wiki: original.track.wiki\n                ? {\n                    published: new Date(original.track.wiki.published),\n                    summary: original.track.wiki.summary,\n                    content: original.track.wiki.content\n                }\n                : undefined\n        };\n    }\n    async love(trackName, artistName, token) {\n        await this.client.request('track.love', {\n            track: trackName,\n            artist: artistName,\n            token\n        });\n    }\n    async unlove(trackName, artistName, token) {\n        await this.client.request('track.unlove', {\n            track: trackName,\n            artist: artistName,\n            token\n        });\n    }\n}\n\nconst parseAlbumInfoTracks = (tracks) => {\n    return tracks.map((track) => ({\n        name: track.name,\n        duration: track.duration,\n        artist: {\n            name: track.artist.name,\n            mbid: track.artist.mbid ?? undefined,\n            url: track.artist.url\n        },\n        url: track.url,\n        rank: track['@attr']?.rank ?? undefined\n    }));\n};\nclass Album {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async getInfo(albumName, artistName, params) {\n        const original = await this.client.request('album.getInfo', {\n            album: albumName,\n            artist: artistName,\n            mbid: params?.mbid,\n            autocorrect: params?.autoCorrect === true ? '1' : '0',\n            username: params?.username,\n            lang: params?.biographyLanguage\n        });\n        if (!original.album)\n            return undefined;\n        return {\n            artist: original.album.artist,\n            images: original.album.image\n                ? parseLastfmImages(original.album.image)\n                : undefined,\n            listeners: parseInt(original.album.listeners),\n            mbid: original.album.mbid !== '' ? original.album.mbid : undefined,\n            name: original.album.name,\n            playCount: parseInt(original.album.playcount),\n            tags: original.album.tags?.tag,\n            tracks: original.album.tracks?.track\n                ? parseAlbumInfoTracks(original.album.tracks?.track)\n                : undefined,\n            url: original.album.url,\n            user: original.album.userplaycount\n                ? { playCount: original.album.userplaycount }\n                : undefined,\n            wiki: original.album.wiki\n                ? {\n                    published: new Date(original.album.wiki.published),\n                    summary: original.album.wiki.summary,\n                    content: original.album.wiki.content\n                }\n                : undefined\n        };\n    }\n}\n\nconst parseSimilarArtists = (similarArtists) => {\n    return similarArtists.map((similarArtist) => ({\n        name: similarArtist.name,\n        url: similarArtist.url,\n        images: similarArtist.image\n            ? parseLastfmImages(similarArtist.image)\n            : undefined\n    }));\n};\nclass Artist {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async getInfo(artistName, params) {\n        const original = await this.client.request('artist.getInfo', {\n            artist: artistName,\n            mbid: params?.mbid,\n            autocorrect: params?.autoCorrect === true ? '1' : '0',\n            username: params?.username,\n            lang: params?.biographyLanguage\n        });\n        if (!original.artist)\n            return undefined;\n        return {\n            name: original.artist.name,\n            mbid: original.artist.mbid,\n            url: original.artist.url,\n            images: original.artist.image\n                ? parseLastfmImages(original.artist.image)\n                : undefined,\n            streamable: original.artist.streamable === '1',\n            onTour: original.artist.ontour === '1',\n            listeners: parseInt(original.artist.stats.listeners),\n            playCount: parseInt(original.artist.stats.playcount),\n            user: original.artist.stats.userplaycount\n                ? { playCount: parseInt(original.artist.stats.userplaycount) }\n                : undefined,\n            similarArtists: original.artist.similar?.artist\n                ? parseSimilarArtists(original.artist.similar.artist)\n                : undefined,\n            tags: original.artist.tags?.tag,\n            wiki: original.artist.bio\n                ? {\n                    published: new Date(original.artist.bio.published),\n                    summary: original.artist.bio.summary,\n                    content: original.artist.bio.content\n                }\n                : undefined\n        };\n    }\n}\n\nclass Auth {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    async getToken() {\n        const original = await this.client.request('auth.getToken', undefined, true);\n        return original.token;\n    }\n    async getSession(token) {\n        const original = await this.client.request('auth.getSession', { token }, true);\n        return {\n            username: original.session.name,\n            key: original.session.key,\n            subscriber: original.session.subscriber === '1'\n        };\n    }\n}\n\nclass Utilities {\n    client;\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Returns the URL to the Last.fm authentication page\n     */\n    buildDesktopAuthURL(token) {\n        return `https://www.last.fm/api/auth/?api_key=${this.client.apiKey}&token=${token}`;\n    }\n}\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\nclass LastClient {\n    apiKey;\n    apiSecret;\n    apiUrl = 'https://ws.audioscrobbler.com/2.0';\n    user = new User(this);\n    track = new Track(this);\n    album = new Album(this);\n    artist = new Artist(this);\n    auth = new Auth(this);\n    utilities = new Utilities(this);\n    headers;\n    constructor(apiKey, apiSecret, userAgent) {\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        if (!apiKey)\n            throw new Error('apiKey is required and is missing');\n        this.headers = {\n            'User-Agent': userAgent ??\n                'Unknown app (@musicorum/lastfm; github.com/musicorum-app/lastfm)'\n        };\n    }\n    onRequestStarted(method, params, internalData\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { }\n    onRequestFinished(method, params, internalData, response\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { }\n    /**\n     * @todo implement signed requests\n     */\n    async request(method, params, signed = false, write = false) {\n        if (signed && !this.apiSecret)\n            throw new Error('apiSecret is required for signed requests');\n        params = {\n            ...params,\n            method,\n            api_key: this.apiKey,\n            format: 'json'\n        };\n        const cleanParams = Object.fromEntries(Object.entries(params).filter(([_, v]) => !!v));\n        const searchParams = new URLSearchParams(cleanParams);\n        if (signed) {\n            // order cleanParams alphabetically by key\n            const orderedParams = Object.fromEntries(Object.entries(cleanParams).sort(([a], [b]) => a.localeCompare(b)));\n            const signature = Object.entries(orderedParams)\n                .filter(([k]) => k !== 'format')\n                .map(([k, v]) => `${k}${v}`)\n                .join('') + this.apiSecret;\n            const hashedSignature = crypto__WEBPACK_IMPORTED_MODULE_0__.createHash('md5')\n                .update(signature)\n                .digest('hex');\n            searchParams.set('api_sig', hashedSignature);\n        }\n        const queryString = searchParams.toString();\n        const internalData = {};\n        this.onRequestStarted(method, cleanParams, internalData);\n        const response = write\n            ? await fetch(`${this.apiUrl}/?format=json`, {\n                method: 'POST',\n                headers: this.headers,\n                body: queryString\n            })\n            : await fetch(`${this.apiUrl}?${queryString}`, { headers: this.headers });\n        const data = await response.json();\n        this.onRequestFinished(method, cleanParams, internalData, data);\n        if (!response.ok)\n            throw new LastfmError(data);\n        return data;\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@musicorum+lastfm@0.3.1/node_modules/@musicorum/lastfm/dist/LastClient.js\n");

/***/ })

};
;