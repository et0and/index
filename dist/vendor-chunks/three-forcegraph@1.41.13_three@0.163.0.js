"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/three-forcegraph@1.41.13_three@0.163.0";
exports.ids = ["vendor-chunks/three-forcegraph@1.41.13_three@0.163.0"];
exports.modules = {

/***/ "(ssr)/./node_modules/.pnpm/three-forcegraph@1.41.13_three@0.163.0/node_modules/three-forcegraph/dist/three-forcegraph.mjs":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/three-forcegraph@1.41.13_three@0.163.0/node_modules/three-forcegraph/dist/three-forcegraph.mjs ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ threeForcegraph)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/.pnpm/three@0.163.0/node_modules/three/build/three.module.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/simulation.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/link.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/manyBody.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/center.js\");\n/* harmony import */ var d3_force_3d__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! d3-force-3d */ \"(ssr)/./node_modules/.pnpm/d3-force-3d@3.0.5/node_modules/d3-force-3d/src/radial.js\");\n/* harmony import */ var ngraph_graph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ngraph.graph */ \"(ssr)/./node_modules/.pnpm/ngraph.graph@20.0.1/node_modules/ngraph.graph/index.js\");\n/* harmony import */ var ngraph_forcelayout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ngraph.forcelayout */ \"(ssr)/./node_modules/.pnpm/ngraph.forcelayout@3.3.1/node_modules/ngraph.forcelayout/index.js\");\n/* harmony import */ var kapsule__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! kapsule */ \"(ssr)/./node_modules/.pnpm/kapsule@1.14.5/node_modules/kapsule/dist/kapsule.mjs\");\n/* harmony import */ var accessor_fn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! accessor-fn */ \"(ssr)/./node_modules/.pnpm/accessor-fn@1.5.0/node_modules/accessor-fn/dist/accessor-fn.mjs\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/min.js\");\n/* harmony import */ var d3_array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-array */ \"(ssr)/./node_modules/.pnpm/d3-array@3.2.4/node_modules/d3-array/src/max.js\");\n/* harmony import */ var data_joint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! data-joint */ \"(ssr)/./node_modules/.pnpm/data-joint@1.3.1/node_modules/data-joint/dist/data-joint.mjs\");\n/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! d3-scale */ \"(ssr)/./node_modules/.pnpm/d3-scale@4.0.2/node_modules/d3-scale/src/ordinal.js\");\n/* harmony import */ var d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! d3-scale-chromatic */ \"(ssr)/./node_modules/.pnpm/d3-scale-chromatic@3.1.0/node_modules/d3-scale-chromatic/src/categorical/Paired.js\");\n/* harmony import */ var tinycolor2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tinycolor2 */ \"(ssr)/./node_modules/.pnpm/tinycolor2@1.6.0/node_modules/tinycolor2/esm/tinycolor.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _construct(t, e, r) {\n  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && _setPrototypeOf(p, r.prototype), p;\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar materialDispose = function materialDispose(material) {\n  if (material instanceof Array) {\n    material.forEach(materialDispose);\n  } else {\n    if (material.map) {\n      material.map.dispose();\n    }\n    material.dispose();\n  }\n};\nvar deallocate = function deallocate(obj) {\n  if (obj.geometry) {\n    obj.geometry.dispose();\n  }\n  if (obj.material) {\n    materialDispose(obj.material);\n  }\n  if (obj.texture) {\n    obj.texture.dispose();\n  }\n  if (obj.children) {\n    obj.children.forEach(deallocate);\n  }\n};\nvar emptyObject = function emptyObject(obj) {\n  while (obj.children.length) {\n    var childObj = obj.children[0];\n    obj.remove(childObj);\n    deallocate(childObj);\n  }\n};\n\nvar _excluded = [\"objFilter\"];\nfunction threeDigest(data, scene) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref$objFilter = _ref.objFilter,\n    objFilter = _ref$objFilter === void 0 ? function () {\n      return true;\n    } : _ref$objFilter,\n    options = _objectWithoutProperties(_ref, _excluded);\n  return (0,data_joint__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(data, scene.children.filter(objFilter), function (obj) {\n    return scene.add(obj);\n  }, function (obj) {\n    scene.remove(obj);\n    emptyObject(obj);\n  }, _objectSpread2({\n    objBindAttr: '__threeObj'\n  }, options));\n}\n\nvar colorStr2Hex = function colorStr2Hex(str) {\n  return isNaN(str) ? parseInt((0,tinycolor2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(str).toHex(), 16) : str;\n};\nvar colorAlpha = function colorAlpha(str) {\n  return isNaN(str) ? (0,tinycolor2__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(str).getAlpha() : 1;\n};\nvar autoColorScale = (0,d3_scale__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(d3_scale_chromatic__WEBPACK_IMPORTED_MODULE_6__[\"default\"]);\n\n// Autoset attribute colorField by colorByAccessor property\n// If an object has already a color, don't set it\n// Objects can be nodes or links\nfunction autoColorObjects(objects, colorByAccessor, colorField) {\n  if (!colorByAccessor || typeof colorField !== 'string') return;\n  objects.filter(function (obj) {\n    return !obj[colorField];\n  }).forEach(function (obj) {\n    obj[colorField] = autoColorScale(colorByAccessor(obj));\n  });\n}\n\nfunction getDagDepths (_ref, idAccessor) {\n  var nodes = _ref.nodes,\n    links = _ref.links;\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n    _ref2$nodeFilter = _ref2.nodeFilter,\n    nodeFilter = _ref2$nodeFilter === void 0 ? function () {\n      return true;\n    } : _ref2$nodeFilter,\n    _ref2$onLoopError = _ref2.onLoopError,\n    onLoopError = _ref2$onLoopError === void 0 ? function (loopIds) {\n      throw \"Invalid DAG structure! Found cycle in node path: \".concat(loopIds.join(' -> '), \".\");\n    } : _ref2$onLoopError;\n  // linked graph\n  var graph = {};\n  nodes.forEach(function (node) {\n    return graph[idAccessor(node)] = {\n      data: node,\n      out: [],\n      depth: -1,\n      skip: !nodeFilter(node)\n    };\n  });\n  links.forEach(function (_ref3) {\n    var source = _ref3.source,\n      target = _ref3.target;\n    var sourceId = getNodeId(source);\n    var targetId = getNodeId(target);\n    if (!graph.hasOwnProperty(sourceId)) throw \"Missing source node with id: \".concat(sourceId);\n    if (!graph.hasOwnProperty(targetId)) throw \"Missing target node with id: \".concat(targetId);\n    var sourceNode = graph[sourceId];\n    var targetNode = graph[targetId];\n    sourceNode.out.push(targetNode);\n    function getNodeId(node) {\n      return _typeof(node) === 'object' ? idAccessor(node) : node;\n    }\n  });\n  var foundLoops = [];\n  traverse(Object.values(graph));\n  var nodeDepths = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(graph).filter(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      node = _ref5[1];\n    return !node.skip;\n  }).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      id = _ref7[0],\n      node = _ref7[1];\n    return _defineProperty({}, id, node.depth);\n  }))));\n  return nodeDepths;\n  function traverse(nodes) {\n    var nodeStack = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    var currentDepth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var _loop = function _loop() {\n      var node = nodes[i];\n      if (nodeStack.indexOf(node) !== -1) {\n        var loop = [].concat(_toConsumableArray(nodeStack.slice(nodeStack.indexOf(node))), [node]).map(function (d) {\n          return idAccessor(d.data);\n        });\n        if (!foundLoops.some(function (foundLoop) {\n          return foundLoop.length === loop.length && foundLoop.every(function (id, idx) {\n            return id === loop[idx];\n          });\n        })) {\n          foundLoops.push(loop);\n          onLoopError(loop);\n        }\n        return 1; // continue\n      }\n      if (currentDepth > node.depth) {\n        // Don't unnecessarily revisit chunks of the graph\n        node.depth = currentDepth;\n        traverse(node.out, [].concat(_toConsumableArray(nodeStack), [node]), currentDepth + (node.skip ? 0 : 1));\n      }\n    };\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      if (_loop()) continue;\n    }\n  }\n}\n\nvar three$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  Group: three__WEBPACK_IMPORTED_MODULE_7__.Group,\n  Mesh: three__WEBPACK_IMPORTED_MODULE_7__.Mesh,\n  MeshLambertMaterial: three__WEBPACK_IMPORTED_MODULE_7__.MeshLambertMaterial,\n  Color: three__WEBPACK_IMPORTED_MODULE_7__.Color,\n  BufferGeometry: three__WEBPACK_IMPORTED_MODULE_7__.BufferGeometry,\n  BufferAttribute: three__WEBPACK_IMPORTED_MODULE_7__.BufferAttribute,\n  Matrix4: three__WEBPACK_IMPORTED_MODULE_7__.Matrix4,\n  Vector3: three__WEBPACK_IMPORTED_MODULE_7__.Vector3,\n  SphereGeometry: three__WEBPACK_IMPORTED_MODULE_7__.SphereGeometry,\n  CylinderGeometry: three__WEBPACK_IMPORTED_MODULE_7__.CylinderGeometry,\n  TubeGeometry: three__WEBPACK_IMPORTED_MODULE_7__.TubeGeometry,\n  ConeGeometry: three__WEBPACK_IMPORTED_MODULE_7__.ConeGeometry,\n  Line: three__WEBPACK_IMPORTED_MODULE_7__.Line,\n  LineBasicMaterial: three__WEBPACK_IMPORTED_MODULE_7__.LineBasicMaterial,\n  QuadraticBezierCurve3: three__WEBPACK_IMPORTED_MODULE_7__.QuadraticBezierCurve3,\n  CubicBezierCurve3: three__WEBPACK_IMPORTED_MODULE_7__.CubicBezierCurve3,\n  Box3: three__WEBPACK_IMPORTED_MODULE_7__.Box3\n};\nvar ngraph = {\n  graph: ngraph_graph__WEBPACK_IMPORTED_MODULE_0__,\n  forcelayout: ngraph_forcelayout__WEBPACK_IMPORTED_MODULE_1__\n};\n\n//\n\nvar DAG_LEVEL_NODE_RATIO = 2;\n\n// support multiple method names for backwards threejs compatibility\nvar setAttributeFn = new three$1.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar applyMatrix4Fn = new three$1.BufferGeometry().applyMatrix4 ? 'applyMatrix4' : 'applyMatrix';\nvar ForceGraph = (0,kapsule__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({\n  props: {\n    jsonUrl: {\n      onChange: function onChange(jsonUrl, state) {\n        var _this = this;\n        if (jsonUrl && !state.fetchingJson) {\n          // Load data asynchronously\n          state.fetchingJson = true;\n          state.onLoading();\n          fetch(jsonUrl).then(function (r) {\n            return r.json();\n          }).then(function (json) {\n            state.fetchingJson = false;\n            state.onFinishLoading(json);\n            _this.graphData(json);\n          });\n        }\n      },\n      triggerUpdate: false\n    },\n    graphData: {\n      \"default\": {\n        nodes: [],\n        links: []\n      },\n      onChange: function onChange(graphData, state) {\n        state.engineRunning = false; // Pause simulation immediately\n      }\n    },\n    numDimensions: {\n      \"default\": 3,\n      onChange: function onChange(numDim, state) {\n        var chargeForce = state.d3ForceLayout.force('charge');\n        // Increase repulsion on 3D mode for improved spatial separation\n        if (chargeForce) {\n          chargeForce.strength(numDim > 2 ? -60 : -30);\n        }\n        if (numDim < 3) {\n          eraseDimension(state.graphData.nodes, 'z');\n        }\n        if (numDim < 2) {\n          eraseDimension(state.graphData.nodes, 'y');\n        }\n        function eraseDimension(nodes, dim) {\n          nodes.forEach(function (d) {\n            delete d[dim]; // position\n            delete d[\"v\".concat(dim)]; // velocity\n          });\n        }\n      }\n    },\n    dagMode: {\n      onChange: function onChange(dagMode, state) {\n        // td, bu, lr, rl, zin, zout, radialin, radialout\n        !dagMode && state.forceEngine === 'd3' && (state.graphData.nodes || []).forEach(function (n) {\n          return n.fx = n.fy = n.fz = undefined;\n        }); // unfix nodes when disabling dag mode\n      }\n    },\n    dagLevelDistance: {},\n    dagNodeFilter: {\n      \"default\": function _default(node) {\n        return true;\n      }\n    },\n    onDagError: {\n      triggerUpdate: false\n    },\n    nodeRelSize: {\n      \"default\": 4\n    },\n    // volume per val unit\n    nodeId: {\n      \"default\": 'id'\n    },\n    nodeVal: {\n      \"default\": 'val'\n    },\n    nodeResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the sphere's circumference\n    nodeColor: {\n      \"default\": 'color'\n    },\n    nodeAutoColorBy: {},\n    nodeOpacity: {\n      \"default\": 0.75\n    },\n    nodeVisibility: {\n      \"default\": true\n    },\n    nodeThreeObject: {},\n    nodeThreeObjectExtend: {\n      \"default\": false\n    },\n    nodePositionUpdate: {\n      triggerUpdate: false\n    },\n    // custom function to call for updating the node's position. Signature: (threeObj, { x, y, z}, node). If the function returns a truthy value, the regular node position update will not run.\n    linkSource: {\n      \"default\": 'source'\n    },\n    linkTarget: {\n      \"default\": 'target'\n    },\n    linkVisibility: {\n      \"default\": true\n    },\n    linkColor: {\n      \"default\": 'color'\n    },\n    linkAutoColorBy: {},\n    linkOpacity: {\n      \"default\": 0.2\n    },\n    linkWidth: {},\n    // Rounded to nearest decimal. For falsy values use dimensionless line with 1px regardless of distance.\n    linkResolution: {\n      \"default\": 6\n    },\n    // how many radial segments in each line tube's geometry\n    linkCurvature: {\n      \"default\": 0,\n      triggerUpdate: false\n    },\n    // line curvature radius (0: straight, 1: semi-circle)\n    linkCurveRotation: {\n      \"default\": 0,\n      triggerUpdate: false\n    },\n    // line curve rotation along the line axis (0: interection with XY plane, PI: upside down)\n    linkMaterial: {},\n    linkThreeObject: {},\n    linkThreeObjectExtend: {\n      \"default\": false\n    },\n    linkPositionUpdate: {\n      triggerUpdate: false\n    },\n    // custom function to call for updating the link's position. Signature: (threeObj, { start: { x, y, z},  end: { x, y, z }}, link). If the function returns a truthy value, the regular link position update will not run.\n    linkDirectionalArrowLength: {\n      \"default\": 0\n    },\n    linkDirectionalArrowColor: {},\n    linkDirectionalArrowRelPos: {\n      \"default\": 0.5,\n      triggerUpdate: false\n    },\n    // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: {\n      \"default\": 0\n    },\n    // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: {\n      \"default\": 0.01,\n      triggerUpdate: false\n    },\n    // in link length ratio per frame\n    linkDirectionalParticleWidth: {\n      \"default\": 0.5\n    },\n    linkDirectionalParticleColor: {},\n    linkDirectionalParticleResolution: {\n      \"default\": 4\n    },\n    // how many slice segments in the particle sphere's circumference\n    forceEngine: {\n      \"default\": 'd3'\n    },\n    // d3 or ngraph\n    d3AlphaMin: {\n      \"default\": 0\n    },\n    d3AlphaDecay: {\n      \"default\": 0.0228,\n      triggerUpdate: false,\n      onChange: function onChange(alphaDecay, state) {\n        state.d3ForceLayout.alphaDecay(alphaDecay);\n      }\n    },\n    d3AlphaTarget: {\n      \"default\": 0,\n      triggerUpdate: false,\n      onChange: function onChange(alphaTarget, state) {\n        state.d3ForceLayout.alphaTarget(alphaTarget);\n      }\n    },\n    d3VelocityDecay: {\n      \"default\": 0.4,\n      triggerUpdate: false,\n      onChange: function onChange(velocityDecay, state) {\n        state.d3ForceLayout.velocityDecay(velocityDecay);\n      }\n    },\n    ngraphPhysics: {\n      \"default\": {\n        // defaults from https://github.com/anvaka/ngraph.physics.simulator/blob/master/index.js\n        timeStep: 20,\n        gravity: -1.2,\n        theta: 0.8,\n        springLength: 30,\n        springCoefficient: 0.0008,\n        dragCoefficient: 0.02\n      }\n    },\n    warmupTicks: {\n      \"default\": 0,\n      triggerUpdate: false\n    },\n    // how many times to tick the force engine at init before starting to render\n    cooldownTicks: {\n      \"default\": Infinity,\n      triggerUpdate: false\n    },\n    cooldownTime: {\n      \"default\": 15000,\n      triggerUpdate: false\n    },\n    // ms\n    onLoading: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onFinishLoading: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onUpdate: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onFinishUpdate: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onEngineTick: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    },\n    onEngineStop: {\n      \"default\": function _default() {},\n      triggerUpdate: false\n    }\n  },\n  methods: {\n    refresh: function refresh(state) {\n      state._flushObjects = true;\n      state._rerender();\n      return this;\n    },\n    // Expose d3 forces for external manipulation\n    d3Force: function d3Force(state, forceName, forceFn) {\n      if (forceFn === undefined) {\n        return state.d3ForceLayout.force(forceName); // Force getter\n      }\n      state.d3ForceLayout.force(forceName, forceFn); // Force setter\n      return this;\n    },\n    d3ReheatSimulation: function d3ReheatSimulation(state) {\n      state.d3ForceLayout.alpha(1);\n      this.resetCountdown();\n      return this;\n    },\n    // reset cooldown state\n    resetCountdown: function resetCountdown(state) {\n      state.cntTicks = 0;\n      state.startTickTime = new Date();\n      state.engineRunning = true;\n      return this;\n    },\n    tickFrame: function tickFrame(state) {\n      var isD3Sim = state.forceEngine !== 'ngraph';\n      if (state.engineRunning) {\n        layoutTick();\n      }\n      updateArrows();\n      updatePhotons();\n      return this;\n\n      //\n\n      function layoutTick() {\n        if (++state.cntTicks > state.cooldownTicks || new Date() - state.startTickTime > state.cooldownTime || isD3Sim && state.d3AlphaMin > 0 && state.d3ForceLayout.alpha() < state.d3AlphaMin) {\n          state.engineRunning = false; // Stop ticking graph\n          state.onEngineStop();\n        } else {\n          state.layout[isD3Sim ? 'tick' : 'step'](); // Tick it\n          state.onEngineTick();\n        }\n        var nodeThreeObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeThreeObjectExtend);\n\n        // Update nodes position\n        state.graphData.nodes.forEach(function (node) {\n          var obj = node.__threeObj;\n          if (!obj) return;\n          var pos = isD3Sim ? node : state.layout.getNodePosition(node[state.nodeId]);\n          var extendedObj = nodeThreeObjectExtendAccessor(node);\n          if (!state.nodePositionUpdate || !state.nodePositionUpdate(extendedObj ? obj.children[0] : obj, {\n            x: pos.x,\n            y: pos.y,\n            z: pos.z\n          }, node) // pass child custom object if extending the default\n          || extendedObj) {\n            obj.position.x = pos.x;\n            obj.position.y = pos.y || 0;\n            obj.position.z = pos.z || 0;\n          }\n        });\n\n        // Update links position\n        var linkWidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkWidth);\n        var linkCurvatureAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkCurvature);\n        var linkCurveRotationAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkCurveRotation);\n        var linkThreeObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkThreeObjectExtend);\n        state.graphData.links.forEach(function (link) {\n          var lineObj = link.__lineObj;\n          if (!lineObj) return;\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          calcLinkCurve(link); // calculate link curve for all links, including custom replaced, so it can be used in directional functionality\n\n          var extendedObj = linkThreeObjectExtendAccessor(link);\n          if (state.linkPositionUpdate && state.linkPositionUpdate(extendedObj ? lineObj.children[1] : lineObj,\n          // pass child custom object if extending the default\n          {\n            start: {\n              x: start.x,\n              y: start.y,\n              z: start.z\n            },\n            end: {\n              x: end.x,\n              y: end.y,\n              z: end.z\n            }\n          }, link) && !extendedObj) {\n            // exit if successfully custom updated position of non-extended obj\n            return;\n          }\n          var curveResolution = 30; // # line segments\n          var curve = link.__curve;\n\n          // select default line obj if it's an extended group\n          var line = lineObj.children.length ? lineObj.children[0] : lineObj;\n          if (line.type === 'Line') {\n            // Update line geometry\n            if (!curve) {\n              // straight line\n              var linePos = line.geometry.getAttribute('position');\n              if (!linePos || !linePos.array || linePos.array.length !== 6) {\n                line.geometry[setAttributeFn]('position', linePos = new three$1.BufferAttribute(new Float32Array(2 * 3), 3));\n              }\n              linePos.array[0] = start.x;\n              linePos.array[1] = start.y || 0;\n              linePos.array[2] = start.z || 0;\n              linePos.array[3] = end.x;\n              linePos.array[4] = end.y || 0;\n              linePos.array[5] = end.z || 0;\n              linePos.needsUpdate = true;\n            } else {\n              // bezier curve line\n              line.geometry.setFromPoints(curve.getPoints(curveResolution));\n            }\n            line.geometry.computeBoundingSphere();\n          } else if (line.type === 'Mesh') {\n            // Update cylinder geometry\n\n            if (!curve) {\n              // straight tube\n              if (!line.geometry.type.match(/^Cylinder(Buffer)?Geometry$/)) {\n                var linkWidth = Math.ceil(linkWidthAccessor(link) * 10) / 10;\n                var r = linkWidth / 2;\n                var geometry = new three$1.CylinderGeometry(r, r, 1, state.linkResolution, 1, false);\n                geometry[applyMatrix4Fn](new three$1.Matrix4().makeTranslation(0, 1 / 2, 0));\n                geometry[applyMatrix4Fn](new three$1.Matrix4().makeRotationX(Math.PI / 2));\n                line.geometry.dispose();\n                line.geometry = geometry;\n              }\n              var vStart = new three$1.Vector3(start.x, start.y || 0, start.z || 0);\n              var vEnd = new three$1.Vector3(end.x, end.y || 0, end.z || 0);\n              var distance = vStart.distanceTo(vEnd);\n              line.position.x = vStart.x;\n              line.position.y = vStart.y;\n              line.position.z = vStart.z;\n              line.scale.z = distance;\n              line.parent.localToWorld(vEnd); // lookAt requires world coords\n              line.lookAt(vEnd);\n            } else {\n              // curved tube\n              if (!line.geometry.type.match(/^Tube(Buffer)?Geometry$/)) {\n                // reset object positioning\n                line.position.set(0, 0, 0);\n                line.rotation.set(0, 0, 0);\n                line.scale.set(1, 1, 1);\n              }\n              var _linkWidth = Math.ceil(linkWidthAccessor(link) * 10) / 10;\n              var _r = _linkWidth / 2;\n              var _geometry = new three$1.TubeGeometry(curve, curveResolution, _r, state.linkResolution, false);\n              line.geometry.dispose();\n              line.geometry = _geometry;\n            }\n          }\n        });\n\n        //\n\n        function calcLinkCurve(link) {\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          var curvature = linkCurvatureAccessor(link);\n          if (!curvature) {\n            link.__curve = null; // Straight line\n          } else {\n            // bezier curve line (only for line types)\n            var vStart = new three$1.Vector3(start.x, start.y || 0, start.z || 0);\n            var vEnd = new three$1.Vector3(end.x, end.y || 0, end.z || 0);\n            var l = vStart.distanceTo(vEnd); // line length\n\n            var curve;\n            var curveRotation = linkCurveRotationAccessor(link);\n            if (l > 0) {\n              var dx = end.x - start.x;\n              var dy = end.y - start.y || 0;\n              var vLine = new three$1.Vector3().subVectors(vEnd, vStart);\n              var cp = vLine.clone().multiplyScalar(curvature).cross(dx !== 0 || dy !== 0 ? new three$1.Vector3(0, 0, 1) : new three$1.Vector3(0, 1, 0)) // avoid cross-product of parallel vectors (prefer Z, fallback to Y)\n              .applyAxisAngle(vLine.normalize(), curveRotation) // rotate along line axis according to linkCurveRotation\n              .add(new three$1.Vector3().addVectors(vStart, vEnd).divideScalar(2));\n              curve = new three$1.QuadraticBezierCurve3(vStart, cp, vEnd);\n            } else {\n              // Same point, draw a loop\n              var d = curvature * 70;\n              var endAngle = -curveRotation; // Rotate clockwise (from Z angle perspective)\n              var startAngle = endAngle + Math.PI / 2;\n              curve = new three$1.CubicBezierCurve3(vStart, new three$1.Vector3(d * Math.cos(startAngle), d * Math.sin(startAngle), 0).add(vStart), new three$1.Vector3(d * Math.cos(endAngle), d * Math.sin(endAngle), 0).add(vStart), vEnd);\n            }\n            link.__curve = curve;\n          }\n        }\n      }\n      function updateArrows() {\n        // update link arrow position\n        var arrowRelPosAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowRelPos);\n        var arrowLengthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowLength);\n        var nodeValAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeVal);\n        state.graphData.links.forEach(function (link) {\n          var arrowObj = link.__arrowObj;\n          if (!arrowObj) return;\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          var startR = Math.cbrt(Math.max(0, nodeValAccessor(start) || 1)) * state.nodeRelSize;\n          var endR = Math.cbrt(Math.max(0, nodeValAccessor(end) || 1)) * state.nodeRelSize;\n          var arrowLength = arrowLengthAccessor(link);\n          var arrowRelPos = arrowRelPosAccessor(link);\n          var getPosAlongLine = link.__curve ? function (t) {\n            return link.__curve.getPoint(t);\n          } // interpolate along bezier curve\n          : function (t) {\n            // straight line: interpolate linearly\n            var iplt = function iplt(dim, start, end, t) {\n              return start[dim] + (end[dim] - start[dim]) * t || 0;\n            };\n            return {\n              x: iplt('x', start, end, t),\n              y: iplt('y', start, end, t),\n              z: iplt('z', start, end, t)\n            };\n          };\n          var lineLen = link.__curve ? link.__curve.getLength() : Math.sqrt(['x', 'y', 'z'].map(function (dim) {\n            return Math.pow((end[dim] || 0) - (start[dim] || 0), 2);\n          }).reduce(function (acc, v) {\n            return acc + v;\n          }, 0));\n          var posAlongLine = startR + arrowLength + (lineLen - startR - endR - arrowLength) * arrowRelPos;\n          var arrowHead = getPosAlongLine(posAlongLine / lineLen);\n          var arrowTail = getPosAlongLine((posAlongLine - arrowLength) / lineLen);\n          ['x', 'y', 'z'].forEach(function (dim) {\n            return arrowObj.position[dim] = arrowTail[dim];\n          });\n          var headVec = _construct(three$1.Vector3, _toConsumableArray(['x', 'y', 'z'].map(function (c) {\n            return arrowHead[c];\n          })));\n          arrowObj.parent.localToWorld(headVec); // lookAt requires world coords\n          arrowObj.lookAt(headVec);\n        });\n      }\n      function updatePhotons() {\n        // update link particle positions\n        var particleSpeedAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleSpeed);\n        state.graphData.links.forEach(function (link) {\n          var cyclePhotons = link.__photonsObj && link.__photonsObj.children;\n          var singleHopPhotons = link.__singleHopPhotonsObj && link.__singleHopPhotonsObj.children;\n          if ((!singleHopPhotons || !singleHopPhotons.length) && (!cyclePhotons || !cyclePhotons.length)) return;\n          var pos = isD3Sim ? link : state.layout.getLinkPosition(state.layout.graph.getLink(link.source, link.target).id);\n          var start = pos[isD3Sim ? 'source' : 'from'];\n          var end = pos[isD3Sim ? 'target' : 'to'];\n          if (!start || !end || !start.hasOwnProperty('x') || !end.hasOwnProperty('x')) return; // skip invalid link\n\n          var particleSpeed = particleSpeedAccessor(link);\n          var getPhotonPos = link.__curve ? function (t) {\n            return link.__curve.getPoint(t);\n          } // interpolate along bezier curve\n          : function (t) {\n            // straight line: interpolate linearly\n            var iplt = function iplt(dim, start, end, t) {\n              return start[dim] + (end[dim] - start[dim]) * t || 0;\n            };\n            return {\n              x: iplt('x', start, end, t),\n              y: iplt('y', start, end, t),\n              z: iplt('z', start, end, t)\n            };\n          };\n          var photons = [].concat(_toConsumableArray(cyclePhotons || []), _toConsumableArray(singleHopPhotons || []));\n          photons.forEach(function (photon, idx) {\n            var singleHop = photon.parent.__linkThreeObjType === 'singleHopPhotons';\n            if (!photon.hasOwnProperty('__progressRatio')) {\n              photon.__progressRatio = singleHop ? 0 : idx / cyclePhotons.length;\n            }\n            photon.__progressRatio += particleSpeed;\n            if (photon.__progressRatio >= 1) {\n              if (!singleHop) {\n                photon.__progressRatio = photon.__progressRatio % 1;\n              } else {\n                // remove particle\n                photon.parent.remove(photon);\n                emptyObject(photon);\n                return;\n              }\n            }\n            var photonPosRatio = photon.__progressRatio;\n            var pos = getPhotonPos(photonPosRatio);\n            ['x', 'y', 'z'].forEach(function (dim) {\n              return photon.position[dim] = pos[dim];\n            });\n          });\n        });\n      }\n    },\n    emitParticle: function emitParticle(state, link) {\n      if (link && state.graphData.links.includes(link)) {\n        if (!link.__singleHopPhotonsObj) {\n          var obj = new three$1.Group();\n          obj.__linkThreeObjType = 'singleHopPhotons';\n          link.__singleHopPhotonsObj = obj;\n          state.graphScene.add(obj);\n        }\n        var particleWidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleWidth);\n        var photonR = Math.ceil(particleWidthAccessor(link) * 10) / 10 / 2;\n        var numSegments = state.linkDirectionalParticleResolution;\n        var particleGeometry = new three$1.SphereGeometry(photonR, numSegments, numSegments);\n        var linkColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkColor);\n        var particleColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleColor);\n        var photonColor = particleColorAccessor(link) || linkColorAccessor(link) || '#f0f0f0';\n        var materialColor = new three$1.Color(colorStr2Hex(photonColor));\n        var opacity = state.linkOpacity * 3;\n        var particleMaterial = new three$1.MeshLambertMaterial({\n          color: materialColor,\n          transparent: true,\n          opacity: opacity\n        });\n\n        // add a single hop particle\n        link.__singleHopPhotonsObj.add(new three$1.Mesh(particleGeometry, particleMaterial));\n      }\n      return this;\n    },\n    getGraphBbox: function getGraphBbox(state) {\n      var nodeFilter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return true;\n      };\n      if (!state.initialised) return null;\n\n      // recursively collect all nested geometries bboxes\n      var bboxes = function getBboxes(obj) {\n        var bboxes = [];\n        if (obj.geometry) {\n          obj.geometry.computeBoundingBox();\n          var box = new three$1.Box3();\n          box.copy(obj.geometry.boundingBox).applyMatrix4(obj.matrixWorld);\n          bboxes.push(box);\n        }\n        return bboxes.concat.apply(bboxes, _toConsumableArray((obj.children || []).filter(function (obj) {\n          return !obj.hasOwnProperty('__graphObjType') || obj.__graphObjType === 'node' && nodeFilter(obj.__data);\n        } // exclude filtered out nodes\n        ).map(getBboxes)));\n      }(state.graphScene);\n      if (!bboxes.length) return null;\n\n      // extract global x,y,z min/max\n      return Object.assign.apply(Object, _toConsumableArray(['x', 'y', 'z'].map(function (c) {\n        return _defineProperty({}, c, [(0,d3_array__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(bboxes, function (bb) {\n          return bb.min[c];\n        }), (0,d3_array__WEBPACK_IMPORTED_MODULE_10__[\"default\"])(bboxes, function (bb) {\n          return bb.max[c];\n        })]);\n      })));\n    }\n  },\n  stateInit: function stateInit() {\n    return {\n      d3ForceLayout: (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_11__[\"default\"])().force('link', (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_12__[\"default\"])()).force('charge', (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_13__[\"default\"])()).force('center', (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_14__[\"default\"])()).force('dagRadial', null).stop(),\n      engineRunning: false\n    };\n  },\n  init: function init(threeObj, state) {\n    // Main three object to manipulate\n    state.graphScene = threeObj;\n  },\n  update: function update(state, changedProps) {\n    var hasAnyPropChanged = function hasAnyPropChanged(propList) {\n      return propList.some(function (p) {\n        return changedProps.hasOwnProperty(p);\n      });\n    };\n    state.engineRunning = false; // pause simulation\n    state.onUpdate();\n    if (state.nodeAutoColorBy !== null && hasAnyPropChanged(['nodeAutoColorBy', 'graphData', 'nodeColor'])) {\n      // Auto add color to uncolored nodes\n      autoColorObjects(state.graphData.nodes, (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeAutoColorBy), state.nodeColor);\n    }\n    if (state.linkAutoColorBy !== null && hasAnyPropChanged(['linkAutoColorBy', 'graphData', 'linkColor'])) {\n      // Auto add color to uncolored links\n      autoColorObjects(state.graphData.links, (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkAutoColorBy), state.linkColor);\n    }\n\n    // Digest nodes WebGL objects\n    if (state._flushObjects || hasAnyPropChanged(['graphData', 'nodeThreeObject', 'nodeThreeObjectExtend', 'nodeVal', 'nodeColor', 'nodeVisibility', 'nodeRelSize', 'nodeResolution', 'nodeOpacity'])) {\n      var customObjectAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeThreeObject);\n      var customObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeThreeObjectExtend);\n      var valAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeVal);\n      var colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeColor);\n      var visibilityAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.nodeVisibility);\n      var sphereGeometries = {}; // indexed by node value\n      var sphereMaterials = {}; // indexed by color\n\n      threeDigest(state.graphData.nodes.filter(visibilityAccessor), state.graphScene, {\n        purge: state._flushObjects || hasAnyPropChanged([\n        // recreate objects if any of these props have changed\n        'nodeThreeObject', 'nodeThreeObjectExtend']),\n        objFilter: function objFilter(obj) {\n          return obj.__graphObjType === 'node';\n        },\n        createObj: function createObj(node) {\n          var customObj = customObjectAccessor(node);\n          var extendObj = customObjectExtendAccessor(node);\n          if (customObj && state.nodeThreeObject === customObj) {\n            // clone object if it's a shared object among all nodes\n            customObj = customObj.clone();\n          }\n          var obj;\n          if (customObj && !extendObj) {\n            obj = customObj;\n          } else {\n            // Add default object (sphere mesh)\n            obj = new three$1.Mesh();\n            obj.__graphDefaultObj = true;\n            if (customObj && extendObj) {\n              obj.add(customObj); // extend default with custom\n            }\n          }\n          obj.__graphObjType = 'node'; // Add object type\n\n          return obj;\n        },\n        updateObj: function updateObj(obj, node) {\n          if (obj.__graphDefaultObj) {\n            // bypass internal updates for custom node objects\n            var val = valAccessor(node) || 1;\n            var radius = Math.cbrt(val) * state.nodeRelSize;\n            var numSegments = state.nodeResolution;\n            if (!obj.geometry.type.match(/^Sphere(Buffer)?Geometry$/) || obj.geometry.parameters.radius !== radius || obj.geometry.parameters.widthSegments !== numSegments) {\n              if (!sphereGeometries.hasOwnProperty(val)) {\n                sphereGeometries[val] = new three$1.SphereGeometry(radius, numSegments, numSegments);\n              }\n              obj.geometry.dispose();\n              obj.geometry = sphereGeometries[val];\n            }\n            var color = colorAccessor(node);\n            var materialColor = new three$1.Color(colorStr2Hex(color || '#ffffaa'));\n            var opacity = state.nodeOpacity * colorAlpha(color);\n            if (obj.material.type !== 'MeshLambertMaterial' || !obj.material.color.equals(materialColor) || obj.material.opacity !== opacity) {\n              if (!sphereMaterials.hasOwnProperty(color)) {\n                sphereMaterials[color] = new three$1.MeshLambertMaterial({\n                  color: materialColor,\n                  transparent: true,\n                  opacity: opacity\n                });\n              }\n              obj.material.dispose();\n              obj.material = sphereMaterials[color];\n            }\n          }\n        }\n      });\n    }\n\n    // Digest links WebGL objects\n    if (state._flushObjects || hasAnyPropChanged(['graphData', 'linkThreeObject', 'linkThreeObjectExtend', 'linkMaterial', 'linkColor', 'linkWidth', 'linkVisibility', 'linkResolution', 'linkOpacity', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution'])) {\n      var _customObjectAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkThreeObject);\n      var _customObjectExtendAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkThreeObjectExtend);\n      var customMaterialAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkMaterial);\n      var _visibilityAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkVisibility);\n      var _colorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkColor);\n      var widthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkWidth);\n      var cylinderGeometries = {}; // indexed by link width\n      var lambertLineMaterials = {}; // for cylinder objects, indexed by link color\n      var basicLineMaterials = {}; // for line objects, indexed by link color\n\n      var visibleLinks = state.graphData.links.filter(_visibilityAccessor);\n\n      // lines digest cycle\n      threeDigest(visibleLinks, state.graphScene, {\n        objBindAttr: '__lineObj',\n        purge: state._flushObjects || hasAnyPropChanged([\n        // recreate objects if any of these props have changed\n        'linkThreeObject', 'linkThreeObjectExtend', 'linkWidth']),\n        objFilter: function objFilter(obj) {\n          return obj.__graphObjType === 'link';\n        },\n        exitObj: function exitObj(obj) {\n          // remove trailing single photons\n          var singlePhotonsObj = obj.__data && obj.__data.__singleHopPhotonsObj;\n          if (singlePhotonsObj) {\n            singlePhotonsObj.parent.remove(singlePhotonsObj);\n            emptyObject(singlePhotonsObj);\n            delete obj.__data.__singleHopPhotonsObj;\n          }\n        },\n        createObj: function createObj(link) {\n          var customObj = _customObjectAccessor(link);\n          var extendObj = _customObjectExtendAccessor(link);\n          if (customObj && state.linkThreeObject === customObj) {\n            // clone object if it's a shared object among all links\n            customObj = customObj.clone();\n          }\n          var defaultObj;\n          if (!customObj || extendObj) {\n            // construct default line obj\n            var useCylinder = !!widthAccessor(link);\n            if (useCylinder) {\n              defaultObj = new three$1.Mesh();\n            } else {\n              // Use plain line (constant width)\n              var lineGeometry = new three$1.BufferGeometry();\n              lineGeometry[setAttributeFn]('position', new three$1.BufferAttribute(new Float32Array(2 * 3), 3));\n              defaultObj = new three$1.Line(lineGeometry);\n            }\n          }\n          var obj;\n          if (!customObj) {\n            obj = defaultObj;\n            obj.__graphDefaultObj = true;\n          } else {\n            if (!extendObj) {\n              // use custom object\n              obj = customObj;\n            } else {\n              // extend default with custom in a group\n              obj = new three$1.Group();\n              obj.__graphDefaultObj = true;\n              obj.add(defaultObj);\n              obj.add(customObj);\n            }\n          }\n          obj.renderOrder = 10; // Prevent visual glitches of dark lines on top of nodes by rendering them last\n\n          obj.__graphObjType = 'link'; // Add object type\n\n          return obj;\n        },\n        updateObj: function updateObj(updObj, link) {\n          if (updObj.__graphDefaultObj) {\n            // bypass internal updates for custom link objects\n            // select default object if it's an extended group\n            var obj = updObj.children.length ? updObj.children[0] : updObj;\n            var linkWidth = Math.ceil(widthAccessor(link) * 10) / 10;\n            var useCylinder = !!linkWidth;\n            if (useCylinder) {\n              var r = linkWidth / 2;\n              var numSegments = state.linkResolution;\n              if (!obj.geometry.type.match(/^Cylinder(Buffer)?Geometry$/) || obj.geometry.parameters.radiusTop !== r || obj.geometry.parameters.radialSegments !== numSegments) {\n                if (!cylinderGeometries.hasOwnProperty(linkWidth)) {\n                  var geometry = new three$1.CylinderGeometry(r, r, 1, numSegments, 1, false);\n                  geometry[applyMatrix4Fn](new three$1.Matrix4().makeTranslation(0, 1 / 2, 0));\n                  geometry[applyMatrix4Fn](new three$1.Matrix4().makeRotationX(Math.PI / 2));\n                  cylinderGeometries[linkWidth] = geometry;\n                }\n                obj.geometry.dispose();\n                obj.geometry = cylinderGeometries[linkWidth];\n              }\n            }\n            var customMaterial = customMaterialAccessor(link);\n            if (customMaterial) {\n              obj.material = customMaterial;\n            } else {\n              var color = _colorAccessor(link);\n              var materialColor = new three$1.Color(colorStr2Hex(color || '#f0f0f0'));\n              var opacity = state.linkOpacity * colorAlpha(color);\n              var materialType = useCylinder ? 'MeshLambertMaterial' : 'LineBasicMaterial';\n              if (obj.material.type !== materialType || !obj.material.color.equals(materialColor) || obj.material.opacity !== opacity) {\n                var lineMaterials = useCylinder ? lambertLineMaterials : basicLineMaterials;\n                if (!lineMaterials.hasOwnProperty(color)) {\n                  lineMaterials[color] = new three$1[materialType]({\n                    color: materialColor,\n                    transparent: opacity < 1,\n                    opacity: opacity,\n                    depthWrite: opacity >= 1 // Prevent transparency issues\n                  });\n                }\n                obj.material.dispose();\n                obj.material = lineMaterials[color];\n              }\n            }\n          }\n        }\n      });\n\n      // Arrows digest cycle\n      if (state.linkDirectionalArrowLength || changedProps.hasOwnProperty('linkDirectionalArrowLength')) {\n        var arrowLengthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowLength);\n        var arrowColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalArrowColor);\n        threeDigest(visibleLinks.filter(arrowLengthAccessor), state.graphScene, {\n          objBindAttr: '__arrowObj',\n          objFilter: function objFilter(obj) {\n            return obj.__linkThreeObjType === 'arrow';\n          },\n          createObj: function createObj() {\n            var obj = new three$1.Mesh(undefined, new three$1.MeshLambertMaterial({\n              transparent: true\n            }));\n            obj.__linkThreeObjType = 'arrow'; // Add object type\n\n            return obj;\n          },\n          updateObj: function updateObj(obj, link) {\n            var arrowLength = arrowLengthAccessor(link);\n            var numSegments = state.linkDirectionalArrowResolution;\n            if (!obj.geometry.type.match(/^Cone(Buffer)?Geometry$/) || obj.geometry.parameters.height !== arrowLength || obj.geometry.parameters.radialSegments !== numSegments) {\n              var coneGeometry = new three$1.ConeGeometry(arrowLength * 0.25, arrowLength, numSegments);\n              // Correct orientation\n              coneGeometry.translate(0, arrowLength / 2, 0);\n              coneGeometry.rotateX(Math.PI / 2);\n              obj.geometry.dispose();\n              obj.geometry = coneGeometry;\n            }\n            var arrowColor = arrowColorAccessor(link) || _colorAccessor(link) || '#f0f0f0';\n            obj.material.color = new three$1.Color(colorStr2Hex(arrowColor));\n            obj.material.opacity = state.linkOpacity * 3 * colorAlpha(arrowColor);\n          }\n        });\n      }\n\n      // Photon particles digest cycle\n      if (state.linkDirectionalParticles || changedProps.hasOwnProperty('linkDirectionalParticles')) {\n        var particlesAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticles);\n        var particleWidthAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleWidth);\n        var particleColorAccessor = (0,accessor_fn__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(state.linkDirectionalParticleColor);\n        var particleMaterials = {}; // indexed by link color\n        var particleGeometries = {}; // indexed by particle width\n\n        threeDigest(visibleLinks.filter(particlesAccessor), state.graphScene, {\n          objBindAttr: '__photonsObj',\n          objFilter: function objFilter(obj) {\n            return obj.__linkThreeObjType === 'photons';\n          },\n          createObj: function createObj() {\n            var obj = new three$1.Group();\n            obj.__linkThreeObjType = 'photons'; // Add object type\n\n            return obj;\n          },\n          updateObj: function updateObj(obj, link) {\n            var numPhotons = Math.round(Math.abs(particlesAccessor(link)));\n            var curPhoton = !!obj.children.length && obj.children[0];\n            var photonR = Math.ceil(particleWidthAccessor(link) * 10) / 10 / 2;\n            var numSegments = state.linkDirectionalParticleResolution;\n            var particleGeometry;\n            if (curPhoton && curPhoton.geometry.parameters.radius === photonR && curPhoton.geometry.parameters.widthSegments === numSegments) {\n              particleGeometry = curPhoton.geometry;\n            } else {\n              if (!particleGeometries.hasOwnProperty(photonR)) {\n                particleGeometries[photonR] = new three$1.SphereGeometry(photonR, numSegments, numSegments);\n              }\n              particleGeometry = particleGeometries[photonR];\n              curPhoton && curPhoton.geometry.dispose();\n            }\n            var photonColor = particleColorAccessor(link) || _colorAccessor(link) || '#f0f0f0';\n            var materialColor = new three$1.Color(colorStr2Hex(photonColor));\n            var opacity = state.linkOpacity * 3;\n            var particleMaterial;\n            if (curPhoton && curPhoton.material.color.equals(materialColor) && curPhoton.material.opacity === opacity) {\n              particleMaterial = curPhoton.material;\n            } else {\n              if (!particleMaterials.hasOwnProperty(photonColor)) {\n                particleMaterials[photonColor] = new three$1.MeshLambertMaterial({\n                  color: materialColor,\n                  transparent: true,\n                  opacity: opacity\n                });\n              }\n              particleMaterial = particleMaterials[photonColor];\n              curPhoton && curPhoton.material.dispose();\n            }\n\n            // digest cycle for each photon\n            threeDigest(_toConsumableArray(new Array(numPhotons)).map(function (_, idx) {\n              return {\n                idx: idx\n              };\n            }), obj, {\n              idAccessor: function idAccessor(d) {\n                return d.idx;\n              },\n              createObj: function createObj() {\n                return new three$1.Mesh(particleGeometry, particleMaterial);\n              },\n              updateObj: function updateObj(obj) {\n                obj.geometry = particleGeometry;\n                obj.material = particleMaterial;\n              }\n            });\n          }\n        });\n      }\n    }\n    state._flushObjects = false; // reset objects refresh flag\n\n    // simulation engine\n    if (hasAnyPropChanged(['graphData', 'nodeId', 'linkSource', 'linkTarget', 'numDimensions', 'forceEngine', 'dagMode', 'dagNodeFilter', 'dagLevelDistance'])) {\n      state.engineRunning = false; // Pause simulation\n\n      // parse links\n      state.graphData.links.forEach(function (link) {\n        link.source = link[state.linkSource];\n        link.target = link[state.linkTarget];\n      });\n\n      // Feed data to force-directed layout\n      var isD3Sim = state.forceEngine !== 'ngraph';\n      var layout;\n      if (isD3Sim) {\n        // D3-force\n        (layout = state.d3ForceLayout).stop().alpha(1) // re-heat the simulation\n        .numDimensions(state.numDimensions).nodes(state.graphData.nodes);\n\n        // add links (if link force is still active)\n        var linkForce = state.d3ForceLayout.force('link');\n        if (linkForce) {\n          linkForce.id(function (d) {\n            return d[state.nodeId];\n          }).links(state.graphData.links);\n        }\n\n        // setup dag force constraints\n        var nodeDepths = state.dagMode && getDagDepths(state.graphData, function (node) {\n          return node[state.nodeId];\n        }, {\n          nodeFilter: state.dagNodeFilter,\n          onLoopError: state.onDagError || undefined\n        });\n        var maxDepth = Math.max.apply(Math, _toConsumableArray(Object.values(nodeDepths || [])));\n        var dagLevelDistance = state.dagLevelDistance || state.graphData.nodes.length / (maxDepth || 1) * DAG_LEVEL_NODE_RATIO * (['radialin', 'radialout'].indexOf(state.dagMode) !== -1 ? 0.7 : 1);\n\n        // Fix nodes to x,y,z for dag mode\n        if (state.dagMode) {\n          var getFFn = function getFFn(fix, invert) {\n            return function (node) {\n              return !fix ? undefined : (nodeDepths[node[state.nodeId]] - maxDepth / 2) * dagLevelDistance * (invert ? -1 : 1);\n            };\n          };\n          var fxFn = getFFn(['lr', 'rl'].indexOf(state.dagMode) !== -1, state.dagMode === 'rl');\n          var fyFn = getFFn(['td', 'bu'].indexOf(state.dagMode) !== -1, state.dagMode === 'td');\n          var fzFn = getFFn(['zin', 'zout'].indexOf(state.dagMode) !== -1, state.dagMode === 'zout');\n          state.graphData.nodes.filter(state.dagNodeFilter).forEach(function (node) {\n            node.fx = fxFn(node);\n            node.fy = fyFn(node);\n            node.fz = fzFn(node);\n          });\n        }\n\n        // Use radial force for radial dags\n        state.d3ForceLayout.force('dagRadial', ['radialin', 'radialout'].indexOf(state.dagMode) !== -1 ? (0,d3_force_3d__WEBPACK_IMPORTED_MODULE_15__[\"default\"])(function (node) {\n          var nodeDepth = nodeDepths[node[state.nodeId]] || -1;\n          return (state.dagMode === 'radialin' ? maxDepth - nodeDepth : nodeDepth) * dagLevelDistance;\n        }).strength(function (node) {\n          return state.dagNodeFilter(node) ? 1 : 0;\n        }) : null);\n      } else {\n        // ngraph\n        var _graph = ngraph.graph();\n        state.graphData.nodes.forEach(function (node) {\n          _graph.addNode(node[state.nodeId]);\n        });\n        state.graphData.links.forEach(function (link) {\n          _graph.addLink(link.source, link.target);\n        });\n        layout = ngraph.forcelayout(_graph, _objectSpread2({\n          dimensions: state.numDimensions\n        }, state.ngraphPhysics));\n        layout.graph = _graph; // Attach graph reference to layout\n      }\n      for (var i = 0; i < state.warmupTicks && !(isD3Sim && state.d3AlphaMin > 0 && state.d3ForceLayout.alpha() < state.d3AlphaMin); i++) {\n        layout[isD3Sim ? \"tick\" : \"step\"]();\n      } // Initial ticks before starting to render\n\n      state.layout = layout;\n      this.resetCountdown();\n    }\n    state.engineRunning = true; // resume simulation\n\n    state.onFinishUpdate();\n  }\n});\n\nfunction fromKapsule (kapsule) {\n  var baseClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object;\n  var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var FromKapsule = /*#__PURE__*/function (_baseClass) {\n    _inherits(FromKapsule, _baseClass);\n    function FromKapsule() {\n      var _this;\n      _classCallCheck(this, FromKapsule);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, FromKapsule, [].concat(args));\n      _this.__kapsuleInstance = kapsule().apply(void 0, [].concat(_toConsumableArray(initKapsuleWithSelf ? [_assertThisInitialized(_this)] : []), args));\n      return _this;\n    }\n    return _createClass(FromKapsule);\n  }(baseClass); // attach kapsule props/methods to class prototype\n  Object.keys(kapsule()).forEach(function (m) {\n    return FromKapsule.prototype[m] = function () {\n      var _this$__kapsuleInstan;\n      var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m].apply(_this$__kapsuleInstan, arguments);\n      return returnVal === this.__kapsuleInstance ? this // chain based on this class, not the kapsule obj\n      : returnVal;\n    };\n  });\n  return FromKapsule;\n}\n\nvar three = window.THREE ? window.THREE : {\n  Group: three__WEBPACK_IMPORTED_MODULE_7__.Group\n}; // Prefer consumption from global THREE, if exists\nvar threeForcegraph = fromKapsule(ForceGraph, three.Group, true);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vdGhyZWUtZm9yY2VncmFwaEAxLjQxLjEzX3RocmVlQDAuMTYzLjAvbm9kZV9tb2R1bGVzL3RocmVlLWZvcmNlZ3JhcGgvZGlzdC90aHJlZS1mb3JjZWdyYXBoLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUEwUDtBQUN4SjtBQUNqRTtBQUNZO0FBQ2Y7QUFDTztBQUNEO0FBQ0Q7QUFDSztBQUNVO0FBQ2Y7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlGQUF5RjtBQUN6RixJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLFlBQVksa0VBQWtFO0FBQ3RGLE1BQU07QUFDTjtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixzQkFBc0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isa0JBQWtCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FB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aUNBQWlDOztBQUVqQztBQUNBO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQSx5R0FBeUcsd0RBQVc7QUFDcEg7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULCtCQUErQjtBQUMvQjtBQUNBLHNCQUFzQiwrR0FBK0c7QUFDckk7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQzs7QUFFaEM7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxhQUFhO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxhQUFhO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxTQUFTLHdDQUFLO0FBQ2QsR0FBRztBQUNIOztBQUVzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JhcGhhZWxzYWxhamEvLi9ub2RlX21vZHVsZXMvLnBucG0vdGhyZWUtZm9yY2VncmFwaEAxLjQxLjEzX3RocmVlQDAuMTYzLjAvbm9kZV9tb2R1bGVzL3RocmVlLWZvcmNlZ3JhcGgvZGlzdC90aHJlZS1mb3JjZWdyYXBoLm1qcz84YjYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyb3VwLCBNZXNoLCBNZXNoTGFtYmVydE1hdGVyaWFsLCBDb2xvciwgQnVmZmVyR2VvbWV0cnksIEJ1ZmZlckF0dHJpYnV0ZSwgTWF0cml4NCwgVmVjdG9yMywgU3BoZXJlR2VvbWV0cnksIEN5bGluZGVyR2VvbWV0cnksIFR1YmVHZW9tZXRyeSwgQ29uZUdlb21ldHJ5LCBMaW5lLCBMaW5lQmFzaWNNYXRlcmlhbCwgUXVhZHJhdGljQmV6aWVyQ3VydmUzLCBDdWJpY0JlemllckN1cnZlMywgQm94MyB9IGZyb20gJ3RocmVlJztcbmltcG9ydCB7IGZvcmNlU2ltdWxhdGlvbiwgZm9yY2VMaW5rLCBmb3JjZU1hbnlCb2R5LCBmb3JjZUNlbnRlciwgZm9yY2VSYWRpYWwgfSBmcm9tICdkMy1mb3JjZS0zZCc7XG5pbXBvcnQgZ3JhcGggZnJvbSAnbmdyYXBoLmdyYXBoJztcbmltcG9ydCBmb3JjZWxheW91dCBmcm9tICduZ3JhcGguZm9yY2VsYXlvdXQnO1xuaW1wb3J0IEthcHN1bGUgZnJvbSAna2Fwc3VsZSc7XG5pbXBvcnQgYWNjZXNzb3JGbiBmcm9tICdhY2Nlc3Nvci1mbic7XG5pbXBvcnQgeyBtaW4sIG1heCB9IGZyb20gJ2QzLWFycmF5JztcbmltcG9ydCBkYXRhSm9pbnQgZnJvbSAnZGF0YS1qb2ludCc7XG5pbXBvcnQgeyBzY2FsZU9yZGluYWwgfSBmcm9tICdkMy1zY2FsZSc7XG5pbXBvcnQgeyBzY2hlbWVQYWlyZWQgfSBmcm9tICdkMy1zY2FsZS1jaHJvbWF0aWMnO1xuaW1wb3J0IHRpbnlDb2xvciBmcm9tICd0aW55Y29sb3IyJztcblxuZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7XG4gIHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7XG59XG5mdW5jdGlvbiBfY29uc3RydWN0KHQsIGUsIHIpIHtcbiAgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgcmV0dXJuIFJlZmxlY3QuY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHZhciBvID0gW251bGxdO1xuICBvLnB1c2guYXBwbHkobywgZSk7XG4gIHZhciBwID0gbmV3ICh0LmJpbmQuYXBwbHkodCwgbykpKCk7XG4gIHJldHVybiByICYmIF9zZXRQcm90b3R5cGVPZihwLCByLnByb3RvdHlwZSksIHA7XG59XG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkge1xuICB0cnkge1xuICAgIHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTtcbiAgfSBjYXRjaCAodCkge31cbiAgcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXQ7XG4gIH0pKCk7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQociwgbCkge1xuICB2YXIgdCA9IG51bGwgPT0gciA/IG51bGwgOiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSB0KSB7XG4gICAgdmFyIGUsXG4gICAgICBuLFxuICAgICAgaSxcbiAgICAgIHUsXG4gICAgICBhID0gW10sXG4gICAgICBmID0gITAsXG4gICAgICBvID0gITE7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpID0gKHQgPSB0LmNhbGwocikpLm5leHQsIDAgPT09IGwpIHtcbiAgICAgICAgaWYgKE9iamVjdCh0KSAhPT0gdCkgcmV0dXJuO1xuICAgICAgICBmID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoZiA9IChlID0gaS5jYWxsKHQpKS5kb25lKSAmJiAoYS5wdXNoKGUudmFsdWUpLCBhLmxlbmd0aCAhPT0gbCk7IGYgPSAhMCk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgbyA9ICEwLCBuID0gcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFmICYmIG51bGwgIT0gdC5yZXR1cm4gJiYgKHUgPSB0LnJldHVybigpLCBPYmplY3QodSkgIT09IHUpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAobykgdGhyb3cgbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIG93bktleXMoZSwgcikge1xuICB2YXIgdCA9IE9iamVjdC5rZXlzKGUpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTtcbiAgICByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7XG4gICAgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkMihlKSB7XG4gIGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7XG4gICAgdmFyIHQgPSBudWxsICE9IGFyZ3VtZW50c1tyXSA/IGFyZ3VtZW50c1tyXSA6IHt9O1xuICAgIHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSB0eXBlb2YgdCB8fCAhdCkgcmV0dXJuIHQ7XG4gIHZhciBlID0gdFtTeW1ib2wudG9QcmltaXRpdmVdO1xuICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgdmFyIGkgPSBlLmNhbGwodCwgciB8fCBcImRlZmF1bHRcIik7XG4gICAgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxuZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IF90b1ByaW1pdGl2ZSh0LCBcInN0cmluZ1wiKTtcbiAgcmV0dXJuIFwic3ltYm9sXCIgPT0gdHlwZW9mIGkgPyBpIDogU3RyaW5nKGkpO1xufVxuZnVuY3Rpb24gX3R5cGVvZihvKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgX3R5cGVvZihvKTtcbn1cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwge1xuICAgIHdyaXRhYmxlOiBmYWxzZVxuICB9KTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN1YkNsYXNzLCBcInByb3RvdHlwZVwiLCB7XG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn1cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZi5iaW5kKCkgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2YuYmluZCgpIDogZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTtcbiAgICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG4gIHJldHVybiBzZWxmO1xufVxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICBpZiAoY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfSBlbHNlIGlmIChjYWxsICE9PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7XG4gIH1cbiAgcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpO1xufVxuXG52YXIgbWF0ZXJpYWxEaXNwb3NlID0gZnVuY3Rpb24gbWF0ZXJpYWxEaXNwb3NlKG1hdGVyaWFsKSB7XG4gIGlmIChtYXRlcmlhbCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgbWF0ZXJpYWwuZm9yRWFjaChtYXRlcmlhbERpc3Bvc2UpO1xuICB9IGVsc2Uge1xuICAgIGlmIChtYXRlcmlhbC5tYXApIHtcbiAgICAgIG1hdGVyaWFsLm1hcC5kaXNwb3NlKCk7XG4gICAgfVxuICAgIG1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgfVxufTtcbnZhciBkZWFsbG9jYXRlID0gZnVuY3Rpb24gZGVhbGxvY2F0ZShvYmopIHtcbiAgaWYgKG9iai5nZW9tZXRyeSkge1xuICAgIG9iai5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gIH1cbiAgaWYgKG9iai5tYXRlcmlhbCkge1xuICAgIG1hdGVyaWFsRGlzcG9zZShvYmoubWF0ZXJpYWwpO1xuICB9XG4gIGlmIChvYmoudGV4dHVyZSkge1xuICAgIG9iai50ZXh0dXJlLmRpc3Bvc2UoKTtcbiAgfVxuICBpZiAob2JqLmNoaWxkcmVuKSB7XG4gICAgb2JqLmNoaWxkcmVuLmZvckVhY2goZGVhbGxvY2F0ZSk7XG4gIH1cbn07XG52YXIgZW1wdHlPYmplY3QgPSBmdW5jdGlvbiBlbXB0eU9iamVjdChvYmopIHtcbiAgd2hpbGUgKG9iai5jaGlsZHJlbi5sZW5ndGgpIHtcbiAgICB2YXIgY2hpbGRPYmogPSBvYmouY2hpbGRyZW5bMF07XG4gICAgb2JqLnJlbW92ZShjaGlsZE9iaik7XG4gICAgZGVhbGxvY2F0ZShjaGlsZE9iaik7XG4gIH1cbn07XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJvYmpGaWx0ZXJcIl07XG5mdW5jdGlvbiB0aHJlZURpZ2VzdChkYXRhLCBzY2VuZSkge1xuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge30sXG4gICAgX3JlZiRvYmpGaWx0ZXIgPSBfcmVmLm9iakZpbHRlcixcbiAgICBvYmpGaWx0ZXIgPSBfcmVmJG9iakZpbHRlciA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSA6IF9yZWYkb2JqRmlsdGVyLFxuICAgIG9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3JlZiwgX2V4Y2x1ZGVkKTtcbiAgcmV0dXJuIGRhdGFKb2ludChkYXRhLCBzY2VuZS5jaGlsZHJlbi5maWx0ZXIob2JqRmlsdGVyKSwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBzY2VuZS5hZGQob2JqKTtcbiAgfSwgZnVuY3Rpb24gKG9iaikge1xuICAgIHNjZW5lLnJlbW92ZShvYmopO1xuICAgIGVtcHR5T2JqZWN0KG9iaik7XG4gIH0sIF9vYmplY3RTcHJlYWQyKHtcbiAgICBvYmpCaW5kQXR0cjogJ19fdGhyZWVPYmonXG4gIH0sIG9wdGlvbnMpKTtcbn1cblxudmFyIGNvbG9yU3RyMkhleCA9IGZ1bmN0aW9uIGNvbG9yU3RyMkhleChzdHIpIHtcbiAgcmV0dXJuIGlzTmFOKHN0cikgPyBwYXJzZUludCh0aW55Q29sb3Ioc3RyKS50b0hleCgpLCAxNikgOiBzdHI7XG59O1xudmFyIGNvbG9yQWxwaGEgPSBmdW5jdGlvbiBjb2xvckFscGhhKHN0cikge1xuICByZXR1cm4gaXNOYU4oc3RyKSA/IHRpbnlDb2xvcihzdHIpLmdldEFscGhhKCkgOiAxO1xufTtcbnZhciBhdXRvQ29sb3JTY2FsZSA9IHNjYWxlT3JkaW5hbChzY2hlbWVQYWlyZWQpO1xuXG4vLyBBdXRvc2V0IGF0dHJpYnV0ZSBjb2xvckZpZWxkIGJ5IGNvbG9yQnlBY2Nlc3NvciBwcm9wZXJ0eVxuLy8gSWYgYW4gb2JqZWN0IGhhcyBhbHJlYWR5IGEgY29sb3IsIGRvbid0IHNldCBpdFxuLy8gT2JqZWN0cyBjYW4gYmUgbm9kZXMgb3IgbGlua3NcbmZ1bmN0aW9uIGF1dG9Db2xvck9iamVjdHMob2JqZWN0cywgY29sb3JCeUFjY2Vzc29yLCBjb2xvckZpZWxkKSB7XG4gIGlmICghY29sb3JCeUFjY2Vzc29yIHx8IHR5cGVvZiBjb2xvckZpZWxkICE9PSAnc3RyaW5nJykgcmV0dXJuO1xuICBvYmplY3RzLmZpbHRlcihmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuICFvYmpbY29sb3JGaWVsZF07XG4gIH0pLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgIG9ialtjb2xvckZpZWxkXSA9IGF1dG9Db2xvclNjYWxlKGNvbG9yQnlBY2Nlc3NvcihvYmopKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldERhZ0RlcHRocyAoX3JlZiwgaWRBY2Nlc3Nvcikge1xuICB2YXIgbm9kZXMgPSBfcmVmLm5vZGVzLFxuICAgIGxpbmtzID0gX3JlZi5saW5rcztcbiAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fSxcbiAgICBfcmVmMiRub2RlRmlsdGVyID0gX3JlZjIubm9kZUZpbHRlcixcbiAgICBub2RlRmlsdGVyID0gX3JlZjIkbm9kZUZpbHRlciA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSA6IF9yZWYyJG5vZGVGaWx0ZXIsXG4gICAgX3JlZjIkb25Mb29wRXJyb3IgPSBfcmVmMi5vbkxvb3BFcnJvcixcbiAgICBvbkxvb3BFcnJvciA9IF9yZWYyJG9uTG9vcEVycm9yID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobG9vcElkcykge1xuICAgICAgdGhyb3cgXCJJbnZhbGlkIERBRyBzdHJ1Y3R1cmUhIEZvdW5kIGN5Y2xlIGluIG5vZGUgcGF0aDogXCIuY29uY2F0KGxvb3BJZHMuam9pbignIC0+ICcpLCBcIi5cIik7XG4gICAgfSA6IF9yZWYyJG9uTG9vcEVycm9yO1xuICAvLyBsaW5rZWQgZ3JhcGhcbiAgdmFyIGdyYXBoID0ge307XG4gIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gZ3JhcGhbaWRBY2Nlc3Nvcihub2RlKV0gPSB7XG4gICAgICBkYXRhOiBub2RlLFxuICAgICAgb3V0OiBbXSxcbiAgICAgIGRlcHRoOiAtMSxcbiAgICAgIHNraXA6ICFub2RlRmlsdGVyKG5vZGUpXG4gICAgfTtcbiAgfSk7XG4gIGxpbmtzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgdmFyIHNvdXJjZSA9IF9yZWYzLnNvdXJjZSxcbiAgICAgIHRhcmdldCA9IF9yZWYzLnRhcmdldDtcbiAgICB2YXIgc291cmNlSWQgPSBnZXROb2RlSWQoc291cmNlKTtcbiAgICB2YXIgdGFyZ2V0SWQgPSBnZXROb2RlSWQodGFyZ2V0KTtcbiAgICBpZiAoIWdyYXBoLmhhc093blByb3BlcnR5KHNvdXJjZUlkKSkgdGhyb3cgXCJNaXNzaW5nIHNvdXJjZSBub2RlIHdpdGggaWQ6IFwiLmNvbmNhdChzb3VyY2VJZCk7XG4gICAgaWYgKCFncmFwaC5oYXNPd25Qcm9wZXJ0eSh0YXJnZXRJZCkpIHRocm93IFwiTWlzc2luZyB0YXJnZXQgbm9kZSB3aXRoIGlkOiBcIi5jb25jYXQodGFyZ2V0SWQpO1xuICAgIHZhciBzb3VyY2VOb2RlID0gZ3JhcGhbc291cmNlSWRdO1xuICAgIHZhciB0YXJnZXROb2RlID0gZ3JhcGhbdGFyZ2V0SWRdO1xuICAgIHNvdXJjZU5vZGUub3V0LnB1c2godGFyZ2V0Tm9kZSk7XG4gICAgZnVuY3Rpb24gZ2V0Tm9kZUlkKG5vZGUpIHtcbiAgICAgIHJldHVybiBfdHlwZW9mKG5vZGUpID09PSAnb2JqZWN0JyA/IGlkQWNjZXNzb3Iobm9kZSkgOiBub2RlO1xuICAgIH1cbiAgfSk7XG4gIHZhciBmb3VuZExvb3BzID0gW107XG4gIHRyYXZlcnNlKE9iamVjdC52YWx1ZXMoZ3JhcGgpKTtcbiAgdmFyIG5vZGVEZXB0aHMgPSBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgW3t9XS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KE9iamVjdC5lbnRyaWVzKGdyYXBoKS5maWx0ZXIoZnVuY3Rpb24gKF9yZWY0KSB7XG4gICAgdmFyIF9yZWY1ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjQsIDIpLFxuICAgICAgbm9kZSA9IF9yZWY1WzFdO1xuICAgIHJldHVybiAhbm9kZS5za2lwO1xuICB9KS5tYXAoZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgdmFyIF9yZWY3ID0gX3NsaWNlZFRvQXJyYXkoX3JlZjYsIDIpLFxuICAgICAgaWQgPSBfcmVmN1swXSxcbiAgICAgIG5vZGUgPSBfcmVmN1sxXTtcbiAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBpZCwgbm9kZS5kZXB0aCk7XG4gIH0pKSkpO1xuICByZXR1cm4gbm9kZURlcHRocztcbiAgZnVuY3Rpb24gdHJhdmVyc2Uobm9kZXMpIHtcbiAgICB2YXIgbm9kZVN0YWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbXTtcbiAgICB2YXIgY3VycmVudERlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgIGlmIChub2RlU3RhY2suaW5kZXhPZihub2RlKSAhPT0gLTEpIHtcbiAgICAgICAgdmFyIGxvb3AgPSBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG5vZGVTdGFjay5zbGljZShub2RlU3RhY2suaW5kZXhPZihub2RlKSkpLCBbbm9kZV0pLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIHJldHVybiBpZEFjY2Vzc29yKGQuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWZvdW5kTG9vcHMuc29tZShmdW5jdGlvbiAoZm91bmRMb29wKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kTG9vcC5sZW5ndGggPT09IGxvb3AubGVuZ3RoICYmIGZvdW5kTG9vcC5ldmVyeShmdW5jdGlvbiAoaWQsIGlkeCkge1xuICAgICAgICAgICAgcmV0dXJuIGlkID09PSBsb29wW2lkeF07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pKSB7XG4gICAgICAgICAgZm91bmRMb29wcy5wdXNoKGxvb3ApO1xuICAgICAgICAgIG9uTG9vcEVycm9yKGxvb3ApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAxOyAvLyBjb250aW51ZVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnREZXB0aCA+IG5vZGUuZGVwdGgpIHtcbiAgICAgICAgLy8gRG9uJ3QgdW5uZWNlc3NhcmlseSByZXZpc2l0IGNodW5rcyBvZiB0aGUgZ3JhcGhcbiAgICAgICAgbm9kZS5kZXB0aCA9IGN1cnJlbnREZXB0aDtcbiAgICAgICAgdHJhdmVyc2Uobm9kZS5vdXQsIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZVN0YWNrKSwgW25vZGVdKSwgY3VycmVudERlcHRoICsgKG5vZGUuc2tpcCA/IDAgOiAxKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKF9sb29wKCkpIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdGhyZWUkMSA9IHdpbmRvdy5USFJFRSA/IHdpbmRvdy5USFJFRSAvLyBQcmVmZXIgY29uc3VtcHRpb24gZnJvbSBnbG9iYWwgVEhSRUUsIGlmIGV4aXN0c1xuOiB7XG4gIEdyb3VwOiBHcm91cCxcbiAgTWVzaDogTWVzaCxcbiAgTWVzaExhbWJlcnRNYXRlcmlhbDogTWVzaExhbWJlcnRNYXRlcmlhbCxcbiAgQ29sb3I6IENvbG9yLFxuICBCdWZmZXJHZW9tZXRyeTogQnVmZmVyR2VvbWV0cnksXG4gIEJ1ZmZlckF0dHJpYnV0ZTogQnVmZmVyQXR0cmlidXRlLFxuICBNYXRyaXg0OiBNYXRyaXg0LFxuICBWZWN0b3IzOiBWZWN0b3IzLFxuICBTcGhlcmVHZW9tZXRyeTogU3BoZXJlR2VvbWV0cnksXG4gIEN5bGluZGVyR2VvbWV0cnk6IEN5bGluZGVyR2VvbWV0cnksXG4gIFR1YmVHZW9tZXRyeTogVHViZUdlb21ldHJ5LFxuICBDb25lR2VvbWV0cnk6IENvbmVHZW9tZXRyeSxcbiAgTGluZTogTGluZSxcbiAgTGluZUJhc2ljTWF0ZXJpYWw6IExpbmVCYXNpY01hdGVyaWFsLFxuICBRdWFkcmF0aWNCZXppZXJDdXJ2ZTM6IFF1YWRyYXRpY0JlemllckN1cnZlMyxcbiAgQ3ViaWNCZXppZXJDdXJ2ZTM6IEN1YmljQmV6aWVyQ3VydmUzLFxuICBCb3gzOiBCb3gzXG59O1xudmFyIG5ncmFwaCA9IHtcbiAgZ3JhcGg6IGdyYXBoLFxuICBmb3JjZWxheW91dDogZm9yY2VsYXlvdXRcbn07XG5cbi8vXG5cbnZhciBEQUdfTEVWRUxfTk9ERV9SQVRJTyA9IDI7XG5cbi8vIHN1cHBvcnQgbXVsdGlwbGUgbWV0aG9kIG5hbWVzIGZvciBiYWNrd2FyZHMgdGhyZWVqcyBjb21wYXRpYmlsaXR5XG52YXIgc2V0QXR0cmlidXRlRm4gPSBuZXcgdGhyZWUkMS5CdWZmZXJHZW9tZXRyeSgpLnNldEF0dHJpYnV0ZSA/ICdzZXRBdHRyaWJ1dGUnIDogJ2FkZEF0dHJpYnV0ZSc7XG52YXIgYXBwbHlNYXRyaXg0Rm4gPSBuZXcgdGhyZWUkMS5CdWZmZXJHZW9tZXRyeSgpLmFwcGx5TWF0cml4NCA/ICdhcHBseU1hdHJpeDQnIDogJ2FwcGx5TWF0cml4JztcbnZhciBGb3JjZUdyYXBoID0gS2Fwc3VsZSh7XG4gIHByb3BzOiB7XG4gICAganNvblVybDoge1xuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGpzb25VcmwsIHN0YXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChqc29uVXJsICYmICFzdGF0ZS5mZXRjaGluZ0pzb24pIHtcbiAgICAgICAgICAvLyBMb2FkIGRhdGEgYXN5bmNocm9ub3VzbHlcbiAgICAgICAgICBzdGF0ZS5mZXRjaGluZ0pzb24gPSB0cnVlO1xuICAgICAgICAgIHN0YXRlLm9uTG9hZGluZygpO1xuICAgICAgICAgIGZldGNoKGpzb25VcmwpLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgICAgICAgIHJldHVybiByLmpzb24oKTtcbiAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChqc29uKSB7XG4gICAgICAgICAgICBzdGF0ZS5mZXRjaGluZ0pzb24gPSBmYWxzZTtcbiAgICAgICAgICAgIHN0YXRlLm9uRmluaXNoTG9hZGluZyhqc29uKTtcbiAgICAgICAgICAgIF90aGlzLmdyYXBoRGF0YShqc29uKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICBncmFwaERhdGE6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiB7XG4gICAgICAgIG5vZGVzOiBbXSxcbiAgICAgICAgbGlua3M6IFtdXG4gICAgICB9LFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGdyYXBoRGF0YSwgc3RhdGUpIHtcbiAgICAgICAgc3RhdGUuZW5naW5lUnVubmluZyA9IGZhbHNlOyAvLyBQYXVzZSBzaW11bGF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICB9XG4gICAgfSxcbiAgICBudW1EaW1lbnNpb25zOiB7XG4gICAgICBcImRlZmF1bHRcIjogMyxcbiAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZShudW1EaW0sIHN0YXRlKSB7XG4gICAgICAgIHZhciBjaGFyZ2VGb3JjZSA9IHN0YXRlLmQzRm9yY2VMYXlvdXQuZm9yY2UoJ2NoYXJnZScpO1xuICAgICAgICAvLyBJbmNyZWFzZSByZXB1bHNpb24gb24gM0QgbW9kZSBmb3IgaW1wcm92ZWQgc3BhdGlhbCBzZXBhcmF0aW9uXG4gICAgICAgIGlmIChjaGFyZ2VGb3JjZSkge1xuICAgICAgICAgIGNoYXJnZUZvcmNlLnN0cmVuZ3RoKG51bURpbSA+IDIgPyAtNjAgOiAtMzApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1EaW0gPCAzKSB7XG4gICAgICAgICAgZXJhc2VEaW1lbnNpb24oc3RhdGUuZ3JhcGhEYXRhLm5vZGVzLCAneicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1EaW0gPCAyKSB7XG4gICAgICAgICAgZXJhc2VEaW1lbnNpb24oc3RhdGUuZ3JhcGhEYXRhLm5vZGVzLCAneScpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVyYXNlRGltZW5zaW9uKG5vZGVzLCBkaW0pIHtcbiAgICAgICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBkZWxldGUgZFtkaW1dOyAvLyBwb3NpdGlvblxuICAgICAgICAgICAgZGVsZXRlIGRbXCJ2XCIuY29uY2F0KGRpbSldOyAvLyB2ZWxvY2l0eVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkYWdNb2RlOiB7XG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoZGFnTW9kZSwgc3RhdGUpIHtcbiAgICAgICAgLy8gdGQsIGJ1LCBsciwgcmwsIHppbiwgem91dCwgcmFkaWFsaW4sIHJhZGlhbG91dFxuICAgICAgICAhZGFnTW9kZSAmJiBzdGF0ZS5mb3JjZUVuZ2luZSA9PT0gJ2QzJyAmJiAoc3RhdGUuZ3JhcGhEYXRhLm5vZGVzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICAgICAgcmV0dXJuIG4uZnggPSBuLmZ5ID0gbi5meiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSk7IC8vIHVuZml4IG5vZGVzIHdoZW4gZGlzYWJsaW5nIGRhZyBtb2RlXG4gICAgICB9XG4gICAgfSxcbiAgICBkYWdMZXZlbERpc3RhbmNlOiB7fSxcbiAgICBkYWdOb2RlRmlsdGVyOiB7XG4gICAgICBcImRlZmF1bHRcIjogZnVuY3Rpb24gX2RlZmF1bHQobm9kZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uRGFnRXJyb3I6IHtcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICBub2RlUmVsU2l6ZToge1xuICAgICAgXCJkZWZhdWx0XCI6IDRcbiAgICB9LFxuICAgIC8vIHZvbHVtZSBwZXIgdmFsIHVuaXRcbiAgICBub2RlSWQ6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAnaWQnXG4gICAgfSxcbiAgICBub2RlVmFsOiB7XG4gICAgICBcImRlZmF1bHRcIjogJ3ZhbCdcbiAgICB9LFxuICAgIG5vZGVSZXNvbHV0aW9uOiB7XG4gICAgICBcImRlZmF1bHRcIjogOFxuICAgIH0sXG4gICAgLy8gaG93IG1hbnkgc2xpY2Ugc2VnbWVudHMgaW4gdGhlIHNwaGVyZSdzIGNpcmN1bWZlcmVuY2VcbiAgICBub2RlQ29sb3I6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAnY29sb3InXG4gICAgfSxcbiAgICBub2RlQXV0b0NvbG9yQnk6IHt9LFxuICAgIG5vZGVPcGFjaXR5OiB7XG4gICAgICBcImRlZmF1bHRcIjogMC43NVxuICAgIH0sXG4gICAgbm9kZVZpc2liaWxpdHk6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiB0cnVlXG4gICAgfSxcbiAgICBub2RlVGhyZWVPYmplY3Q6IHt9LFxuICAgIG5vZGVUaHJlZU9iamVjdEV4dGVuZDoge1xuICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgfSxcbiAgICBub2RlUG9zaXRpb25VcGRhdGU6IHtcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICAvLyBjdXN0b20gZnVuY3Rpb24gdG8gY2FsbCBmb3IgdXBkYXRpbmcgdGhlIG5vZGUncyBwb3NpdGlvbi4gU2lnbmF0dXJlOiAodGhyZWVPYmosIHsgeCwgeSwgen0sIG5vZGUpLiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJucyBhIHRydXRoeSB2YWx1ZSwgdGhlIHJlZ3VsYXIgbm9kZSBwb3NpdGlvbiB1cGRhdGUgd2lsbCBub3QgcnVuLlxuICAgIGxpbmtTb3VyY2U6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAnc291cmNlJ1xuICAgIH0sXG4gICAgbGlua1RhcmdldDoge1xuICAgICAgXCJkZWZhdWx0XCI6ICd0YXJnZXQnXG4gICAgfSxcbiAgICBsaW5rVmlzaWJpbGl0eToge1xuICAgICAgXCJkZWZhdWx0XCI6IHRydWVcbiAgICB9LFxuICAgIGxpbmtDb2xvcjoge1xuICAgICAgXCJkZWZhdWx0XCI6ICdjb2xvcidcbiAgICB9LFxuICAgIGxpbmtBdXRvQ29sb3JCeToge30sXG4gICAgbGlua09wYWNpdHk6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAwLjJcbiAgICB9LFxuICAgIGxpbmtXaWR0aDoge30sXG4gICAgLy8gUm91bmRlZCB0byBuZWFyZXN0IGRlY2ltYWwuIEZvciBmYWxzeSB2YWx1ZXMgdXNlIGRpbWVuc2lvbmxlc3MgbGluZSB3aXRoIDFweCByZWdhcmRsZXNzIG9mIGRpc3RhbmNlLlxuICAgIGxpbmtSZXNvbHV0aW9uOiB7XG4gICAgICBcImRlZmF1bHRcIjogNlxuICAgIH0sXG4gICAgLy8gaG93IG1hbnkgcmFkaWFsIHNlZ21lbnRzIGluIGVhY2ggbGluZSB0dWJlJ3MgZ2VvbWV0cnlcbiAgICBsaW5rQ3VydmF0dXJlOiB7XG4gICAgICBcImRlZmF1bHRcIjogMCxcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICAvLyBsaW5lIGN1cnZhdHVyZSByYWRpdXMgKDA6IHN0cmFpZ2h0LCAxOiBzZW1pLWNpcmNsZSlcbiAgICBsaW5rQ3VydmVSb3RhdGlvbjoge1xuICAgICAgXCJkZWZhdWx0XCI6IDAsXG4gICAgICB0cmlnZ2VyVXBkYXRlOiBmYWxzZVxuICAgIH0sXG4gICAgLy8gbGluZSBjdXJ2ZSByb3RhdGlvbiBhbG9uZyB0aGUgbGluZSBheGlzICgwOiBpbnRlcmVjdGlvbiB3aXRoIFhZIHBsYW5lLCBQSTogdXBzaWRlIGRvd24pXG4gICAgbGlua01hdGVyaWFsOiB7fSxcbiAgICBsaW5rVGhyZWVPYmplY3Q6IHt9LFxuICAgIGxpbmtUaHJlZU9iamVjdEV4dGVuZDoge1xuICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgfSxcbiAgICBsaW5rUG9zaXRpb25VcGRhdGU6IHtcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICAvLyBjdXN0b20gZnVuY3Rpb24gdG8gY2FsbCBmb3IgdXBkYXRpbmcgdGhlIGxpbmsncyBwb3NpdGlvbi4gU2lnbmF0dXJlOiAodGhyZWVPYmosIHsgc3RhcnQ6IHsgeCwgeSwgen0sICBlbmQ6IHsgeCwgeSwgeiB9fSwgbGluaykuIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zIGEgdHJ1dGh5IHZhbHVlLCB0aGUgcmVndWxhciBsaW5rIHBvc2l0aW9uIHVwZGF0ZSB3aWxsIG5vdCBydW4uXG4gICAgbGlua0RpcmVjdGlvbmFsQXJyb3dMZW5ndGg6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAwXG4gICAgfSxcbiAgICBsaW5rRGlyZWN0aW9uYWxBcnJvd0NvbG9yOiB7fSxcbiAgICBsaW5rRGlyZWN0aW9uYWxBcnJvd1JlbFBvczoge1xuICAgICAgXCJkZWZhdWx0XCI6IDAuNSxcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICAvLyB2YWx1ZSBiZXR3ZWVuIDA8PjEgaW5kaWNhdGluZyB0aGUgcmVsYXRpdmUgcG9zIGFsb25nIHRoZSAoZXhwb3NlZCkgbGluZVxuICAgIGxpbmtEaXJlY3Rpb25hbEFycm93UmVzb2x1dGlvbjoge1xuICAgICAgXCJkZWZhdWx0XCI6IDhcbiAgICB9LFxuICAgIC8vIGhvdyBtYW55IHNsaWNlIHNlZ21lbnRzIGluIHRoZSBhcnJvdydzIGNvbmljIGNpcmN1bWZlcmVuY2VcbiAgICBsaW5rRGlyZWN0aW9uYWxQYXJ0aWNsZXM6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAwXG4gICAgfSxcbiAgICAvLyBhbmltYXRlIHBob3RvbnMgdHJhdmVsbGluZyBpbiB0aGUgbGluayBkaXJlY3Rpb25cbiAgICBsaW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVNwZWVkOiB7XG4gICAgICBcImRlZmF1bHRcIjogMC4wMSxcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICAvLyBpbiBsaW5rIGxlbmd0aCByYXRpbyBwZXIgZnJhbWVcbiAgICBsaW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVdpZHRoOiB7XG4gICAgICBcImRlZmF1bHRcIjogMC41XG4gICAgfSxcbiAgICBsaW5rRGlyZWN0aW9uYWxQYXJ0aWNsZUNvbG9yOiB7fSxcbiAgICBsaW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVJlc29sdXRpb246IHtcbiAgICAgIFwiZGVmYXVsdFwiOiA0XG4gICAgfSxcbiAgICAvLyBob3cgbWFueSBzbGljZSBzZWdtZW50cyBpbiB0aGUgcGFydGljbGUgc3BoZXJlJ3MgY2lyY3VtZmVyZW5jZVxuICAgIGZvcmNlRW5naW5lOiB7XG4gICAgICBcImRlZmF1bHRcIjogJ2QzJ1xuICAgIH0sXG4gICAgLy8gZDMgb3IgbmdyYXBoXG4gICAgZDNBbHBoYU1pbjoge1xuICAgICAgXCJkZWZhdWx0XCI6IDBcbiAgICB9LFxuICAgIGQzQWxwaGFEZWNheToge1xuICAgICAgXCJkZWZhdWx0XCI6IDAuMDIyOCxcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlLFxuICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGFscGhhRGVjYXksIHN0YXRlKSB7XG4gICAgICAgIHN0YXRlLmQzRm9yY2VMYXlvdXQuYWxwaGFEZWNheShhbHBoYURlY2F5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGQzQWxwaGFUYXJnZXQ6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAwLFxuICAgICAgdHJpZ2dlclVwZGF0ZTogZmFsc2UsXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoYWxwaGFUYXJnZXQsIHN0YXRlKSB7XG4gICAgICAgIHN0YXRlLmQzRm9yY2VMYXlvdXQuYWxwaGFUYXJnZXQoYWxwaGFUYXJnZXQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZDNWZWxvY2l0eURlY2F5OiB7XG4gICAgICBcImRlZmF1bHRcIjogMC40LFxuICAgICAgdHJpZ2dlclVwZGF0ZTogZmFsc2UsXG4gICAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UodmVsb2NpdHlEZWNheSwgc3RhdGUpIHtcbiAgICAgICAgc3RhdGUuZDNGb3JjZUxheW91dC52ZWxvY2l0eURlY2F5KHZlbG9jaXR5RGVjYXkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbmdyYXBoUGh5c2ljczoge1xuICAgICAgXCJkZWZhdWx0XCI6IHtcbiAgICAgICAgLy8gZGVmYXVsdHMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYW52YWthL25ncmFwaC5waHlzaWNzLnNpbXVsYXRvci9ibG9iL21hc3Rlci9pbmRleC5qc1xuICAgICAgICB0aW1lU3RlcDogMjAsXG4gICAgICAgIGdyYXZpdHk6IC0xLjIsXG4gICAgICAgIHRoZXRhOiAwLjgsXG4gICAgICAgIHNwcmluZ0xlbmd0aDogMzAsXG4gICAgICAgIHNwcmluZ0NvZWZmaWNpZW50OiAwLjAwMDgsXG4gICAgICAgIGRyYWdDb2VmZmljaWVudDogMC4wMlxuICAgICAgfVxuICAgIH0sXG4gICAgd2FybXVwVGlja3M6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiAwLFxuICAgICAgdHJpZ2dlclVwZGF0ZTogZmFsc2VcbiAgICB9LFxuICAgIC8vIGhvdyBtYW55IHRpbWVzIHRvIHRpY2sgdGhlIGZvcmNlIGVuZ2luZSBhdCBpbml0IGJlZm9yZSBzdGFydGluZyB0byByZW5kZXJcbiAgICBjb29sZG93blRpY2tzOiB7XG4gICAgICBcImRlZmF1bHRcIjogSW5maW5pdHksXG4gICAgICB0cmlnZ2VyVXBkYXRlOiBmYWxzZVxuICAgIH0sXG4gICAgY29vbGRvd25UaW1lOiB7XG4gICAgICBcImRlZmF1bHRcIjogMTUwMDAsXG4gICAgICB0cmlnZ2VyVXBkYXRlOiBmYWxzZVxuICAgIH0sXG4gICAgLy8gbXNcbiAgICBvbkxvYWRpbmc6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHt9LFxuICAgICAgdHJpZ2dlclVwZGF0ZTogZmFsc2VcbiAgICB9LFxuICAgIG9uRmluaXNoTG9hZGluZzoge1xuICAgICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge30sXG4gICAgICB0cmlnZ2VyVXBkYXRlOiBmYWxzZVxuICAgIH0sXG4gICAgb25VcGRhdGU6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHt9LFxuICAgICAgdHJpZ2dlclVwZGF0ZTogZmFsc2VcbiAgICB9LFxuICAgIG9uRmluaXNoVXBkYXRlOiB7XG4gICAgICBcImRlZmF1bHRcIjogZnVuY3Rpb24gX2RlZmF1bHQoKSB7fSxcbiAgICAgIHRyaWdnZXJVcGRhdGU6IGZhbHNlXG4gICAgfSxcbiAgICBvbkVuZ2luZVRpY2s6IHtcbiAgICAgIFwiZGVmYXVsdFwiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHt9LFxuICAgICAgdHJpZ2dlclVwZGF0ZTogZmFsc2VcbiAgICB9LFxuICAgIG9uRW5naW5lU3RvcDoge1xuICAgICAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge30sXG4gICAgICB0cmlnZ2VyVXBkYXRlOiBmYWxzZVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIHJlZnJlc2g6IGZ1bmN0aW9uIHJlZnJlc2goc3RhdGUpIHtcbiAgICAgIHN0YXRlLl9mbHVzaE9iamVjdHMgPSB0cnVlO1xuICAgICAgc3RhdGUuX3JlcmVuZGVyKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIC8vIEV4cG9zZSBkMyBmb3JjZXMgZm9yIGV4dGVybmFsIG1hbmlwdWxhdGlvblxuICAgIGQzRm9yY2U6IGZ1bmN0aW9uIGQzRm9yY2Uoc3RhdGUsIGZvcmNlTmFtZSwgZm9yY2VGbikge1xuICAgICAgaWYgKGZvcmNlRm4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc3RhdGUuZDNGb3JjZUxheW91dC5mb3JjZShmb3JjZU5hbWUpOyAvLyBGb3JjZSBnZXR0ZXJcbiAgICAgIH1cbiAgICAgIHN0YXRlLmQzRm9yY2VMYXlvdXQuZm9yY2UoZm9yY2VOYW1lLCBmb3JjZUZuKTsgLy8gRm9yY2Ugc2V0dGVyXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGQzUmVoZWF0U2ltdWxhdGlvbjogZnVuY3Rpb24gZDNSZWhlYXRTaW11bGF0aW9uKHN0YXRlKSB7XG4gICAgICBzdGF0ZS5kM0ZvcmNlTGF5b3V0LmFscGhhKDEpO1xuICAgICAgdGhpcy5yZXNldENvdW50ZG93bigpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyByZXNldCBjb29sZG93biBzdGF0ZVxuICAgIHJlc2V0Q291bnRkb3duOiBmdW5jdGlvbiByZXNldENvdW50ZG93bihzdGF0ZSkge1xuICAgICAgc3RhdGUuY250VGlja3MgPSAwO1xuICAgICAgc3RhdGUuc3RhcnRUaWNrVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICBzdGF0ZS5lbmdpbmVSdW5uaW5nID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdGlja0ZyYW1lOiBmdW5jdGlvbiB0aWNrRnJhbWUoc3RhdGUpIHtcbiAgICAgIHZhciBpc0QzU2ltID0gc3RhdGUuZm9yY2VFbmdpbmUgIT09ICduZ3JhcGgnO1xuICAgICAgaWYgKHN0YXRlLmVuZ2luZVJ1bm5pbmcpIHtcbiAgICAgICAgbGF5b3V0VGljaygpO1xuICAgICAgfVxuICAgICAgdXBkYXRlQXJyb3dzKCk7XG4gICAgICB1cGRhdGVQaG90b25zKCk7XG4gICAgICByZXR1cm4gdGhpcztcblxuICAgICAgLy9cblxuICAgICAgZnVuY3Rpb24gbGF5b3V0VGljaygpIHtcbiAgICAgICAgaWYgKCsrc3RhdGUuY250VGlja3MgPiBzdGF0ZS5jb29sZG93blRpY2tzIHx8IG5ldyBEYXRlKCkgLSBzdGF0ZS5zdGFydFRpY2tUaW1lID4gc3RhdGUuY29vbGRvd25UaW1lIHx8IGlzRDNTaW0gJiYgc3RhdGUuZDNBbHBoYU1pbiA+IDAgJiYgc3RhdGUuZDNGb3JjZUxheW91dC5hbHBoYSgpIDwgc3RhdGUuZDNBbHBoYU1pbikge1xuICAgICAgICAgIHN0YXRlLmVuZ2luZVJ1bm5pbmcgPSBmYWxzZTsgLy8gU3RvcCB0aWNraW5nIGdyYXBoXG4gICAgICAgICAgc3RhdGUub25FbmdpbmVTdG9wKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RhdGUubGF5b3V0W2lzRDNTaW0gPyAndGljaycgOiAnc3RlcCddKCk7IC8vIFRpY2sgaXRcbiAgICAgICAgICBzdGF0ZS5vbkVuZ2luZVRpY2soKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9kZVRocmVlT2JqZWN0RXh0ZW5kQWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLm5vZGVUaHJlZU9iamVjdEV4dGVuZCk7XG5cbiAgICAgICAgLy8gVXBkYXRlIG5vZGVzIHBvc2l0aW9uXG4gICAgICAgIHN0YXRlLmdyYXBoRGF0YS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgdmFyIG9iaiA9IG5vZGUuX190aHJlZU9iajtcbiAgICAgICAgICBpZiAoIW9iaikgcmV0dXJuO1xuICAgICAgICAgIHZhciBwb3MgPSBpc0QzU2ltID8gbm9kZSA6IHN0YXRlLmxheW91dC5nZXROb2RlUG9zaXRpb24obm9kZVtzdGF0ZS5ub2RlSWRdKTtcbiAgICAgICAgICB2YXIgZXh0ZW5kZWRPYmogPSBub2RlVGhyZWVPYmplY3RFeHRlbmRBY2Nlc3Nvcihub2RlKTtcbiAgICAgICAgICBpZiAoIXN0YXRlLm5vZGVQb3NpdGlvblVwZGF0ZSB8fCAhc3RhdGUubm9kZVBvc2l0aW9uVXBkYXRlKGV4dGVuZGVkT2JqID8gb2JqLmNoaWxkcmVuWzBdIDogb2JqLCB7XG4gICAgICAgICAgICB4OiBwb3MueCxcbiAgICAgICAgICAgIHk6IHBvcy55LFxuICAgICAgICAgICAgejogcG9zLnpcbiAgICAgICAgICB9LCBub2RlKSAvLyBwYXNzIGNoaWxkIGN1c3RvbSBvYmplY3QgaWYgZXh0ZW5kaW5nIHRoZSBkZWZhdWx0XG4gICAgICAgICAgfHwgZXh0ZW5kZWRPYmopIHtcbiAgICAgICAgICAgIG9iai5wb3NpdGlvbi54ID0gcG9zLng7XG4gICAgICAgICAgICBvYmoucG9zaXRpb24ueSA9IHBvcy55IHx8IDA7XG4gICAgICAgICAgICBvYmoucG9zaXRpb24ueiA9IHBvcy56IHx8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBVcGRhdGUgbGlua3MgcG9zaXRpb25cbiAgICAgICAgdmFyIGxpbmtXaWR0aEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rV2lkdGgpO1xuICAgICAgICB2YXIgbGlua0N1cnZhdHVyZUFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rQ3VydmF0dXJlKTtcbiAgICAgICAgdmFyIGxpbmtDdXJ2ZVJvdGF0aW9uQWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLmxpbmtDdXJ2ZVJvdGF0aW9uKTtcbiAgICAgICAgdmFyIGxpbmtUaHJlZU9iamVjdEV4dGVuZEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rVGhyZWVPYmplY3RFeHRlbmQpO1xuICAgICAgICBzdGF0ZS5ncmFwaERhdGEubGlua3MuZm9yRWFjaChmdW5jdGlvbiAobGluaykge1xuICAgICAgICAgIHZhciBsaW5lT2JqID0gbGluay5fX2xpbmVPYmo7XG4gICAgICAgICAgaWYgKCFsaW5lT2JqKSByZXR1cm47XG4gICAgICAgICAgdmFyIHBvcyA9IGlzRDNTaW0gPyBsaW5rIDogc3RhdGUubGF5b3V0LmdldExpbmtQb3NpdGlvbihzdGF0ZS5sYXlvdXQuZ3JhcGguZ2V0TGluayhsaW5rLnNvdXJjZSwgbGluay50YXJnZXQpLmlkKTtcbiAgICAgICAgICB2YXIgc3RhcnQgPSBwb3NbaXNEM1NpbSA/ICdzb3VyY2UnIDogJ2Zyb20nXTtcbiAgICAgICAgICB2YXIgZW5kID0gcG9zW2lzRDNTaW0gPyAndGFyZ2V0JyA6ICd0byddO1xuICAgICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCB8fCAhc3RhcnQuaGFzT3duUHJvcGVydHkoJ3gnKSB8fCAhZW5kLmhhc093blByb3BlcnR5KCd4JykpIHJldHVybjsgLy8gc2tpcCBpbnZhbGlkIGxpbmtcblxuICAgICAgICAgIGNhbGNMaW5rQ3VydmUobGluayk7IC8vIGNhbGN1bGF0ZSBsaW5rIGN1cnZlIGZvciBhbGwgbGlua3MsIGluY2x1ZGluZyBjdXN0b20gcmVwbGFjZWQsIHNvIGl0IGNhbiBiZSB1c2VkIGluIGRpcmVjdGlvbmFsIGZ1bmN0aW9uYWxpdHlcblxuICAgICAgICAgIHZhciBleHRlbmRlZE9iaiA9IGxpbmtUaHJlZU9iamVjdEV4dGVuZEFjY2Vzc29yKGxpbmspO1xuICAgICAgICAgIGlmIChzdGF0ZS5saW5rUG9zaXRpb25VcGRhdGUgJiYgc3RhdGUubGlua1Bvc2l0aW9uVXBkYXRlKGV4dGVuZGVkT2JqID8gbGluZU9iai5jaGlsZHJlblsxXSA6IGxpbmVPYmosXG4gICAgICAgICAgLy8gcGFzcyBjaGlsZCBjdXN0b20gb2JqZWN0IGlmIGV4dGVuZGluZyB0aGUgZGVmYXVsdFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgICAgIHg6IHN0YXJ0LngsXG4gICAgICAgICAgICAgIHk6IHN0YXJ0LnksXG4gICAgICAgICAgICAgIHo6IHN0YXJ0LnpcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgeDogZW5kLngsXG4gICAgICAgICAgICAgIHk6IGVuZC55LFxuICAgICAgICAgICAgICB6OiBlbmQuelxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGxpbmspICYmICFleHRlbmRlZE9iaikge1xuICAgICAgICAgICAgLy8gZXhpdCBpZiBzdWNjZXNzZnVsbHkgY3VzdG9tIHVwZGF0ZWQgcG9zaXRpb24gb2Ygbm9uLWV4dGVuZGVkIG9ialxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY3VydmVSZXNvbHV0aW9uID0gMzA7IC8vICMgbGluZSBzZWdtZW50c1xuICAgICAgICAgIHZhciBjdXJ2ZSA9IGxpbmsuX19jdXJ2ZTtcblxuICAgICAgICAgIC8vIHNlbGVjdCBkZWZhdWx0IGxpbmUgb2JqIGlmIGl0J3MgYW4gZXh0ZW5kZWQgZ3JvdXBcbiAgICAgICAgICB2YXIgbGluZSA9IGxpbmVPYmouY2hpbGRyZW4ubGVuZ3RoID8gbGluZU9iai5jaGlsZHJlblswXSA6IGxpbmVPYmo7XG4gICAgICAgICAgaWYgKGxpbmUudHlwZSA9PT0gJ0xpbmUnKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgbGluZSBnZW9tZXRyeVxuICAgICAgICAgICAgaWYgKCFjdXJ2ZSkge1xuICAgICAgICAgICAgICAvLyBzdHJhaWdodCBsaW5lXG4gICAgICAgICAgICAgIHZhciBsaW5lUG9zID0gbGluZS5nZW9tZXRyeS5nZXRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJyk7XG4gICAgICAgICAgICAgIGlmICghbGluZVBvcyB8fCAhbGluZVBvcy5hcnJheSB8fCBsaW5lUG9zLmFycmF5Lmxlbmd0aCAhPT0gNikge1xuICAgICAgICAgICAgICAgIGxpbmUuZ2VvbWV0cnlbc2V0QXR0cmlidXRlRm5dKCdwb3NpdGlvbicsIGxpbmVQb3MgPSBuZXcgdGhyZWUkMS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheSgyICogMyksIDMpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsaW5lUG9zLmFycmF5WzBdID0gc3RhcnQueDtcbiAgICAgICAgICAgICAgbGluZVBvcy5hcnJheVsxXSA9IHN0YXJ0LnkgfHwgMDtcbiAgICAgICAgICAgICAgbGluZVBvcy5hcnJheVsyXSA9IHN0YXJ0LnogfHwgMDtcbiAgICAgICAgICAgICAgbGluZVBvcy5hcnJheVszXSA9IGVuZC54O1xuICAgICAgICAgICAgICBsaW5lUG9zLmFycmF5WzRdID0gZW5kLnkgfHwgMDtcbiAgICAgICAgICAgICAgbGluZVBvcy5hcnJheVs1XSA9IGVuZC56IHx8IDA7XG4gICAgICAgICAgICAgIGxpbmVQb3MubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gYmV6aWVyIGN1cnZlIGxpbmVcbiAgICAgICAgICAgICAgbGluZS5nZW9tZXRyeS5zZXRGcm9tUG9pbnRzKGN1cnZlLmdldFBvaW50cyhjdXJ2ZVJlc29sdXRpb24pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxpbmUuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaW5lLnR5cGUgPT09ICdNZXNoJykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGN5bGluZGVyIGdlb21ldHJ5XG5cbiAgICAgICAgICAgIGlmICghY3VydmUpIHtcbiAgICAgICAgICAgICAgLy8gc3RyYWlnaHQgdHViZVxuICAgICAgICAgICAgICBpZiAoIWxpbmUuZ2VvbWV0cnkudHlwZS5tYXRjaCgvXkN5bGluZGVyKEJ1ZmZlcik/R2VvbWV0cnkkLykpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlua1dpZHRoID0gTWF0aC5jZWlsKGxpbmtXaWR0aEFjY2Vzc29yKGxpbmspICogMTApIC8gMTA7XG4gICAgICAgICAgICAgICAgdmFyIHIgPSBsaW5rV2lkdGggLyAyO1xuICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyB0aHJlZSQxLkN5bGluZGVyR2VvbWV0cnkociwgciwgMSwgc3RhdGUubGlua1Jlc29sdXRpb24sIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBnZW9tZXRyeVthcHBseU1hdHJpeDRGbl0obmV3IHRocmVlJDEuTWF0cml4NCgpLm1ha2VUcmFuc2xhdGlvbigwLCAxIC8gMiwgMCkpO1xuICAgICAgICAgICAgICAgIGdlb21ldHJ5W2FwcGx5TWF0cml4NEZuXShuZXcgdGhyZWUkMS5NYXRyaXg0KCkubWFrZVJvdGF0aW9uWChNYXRoLlBJIC8gMikpO1xuICAgICAgICAgICAgICAgIGxpbmUuZ2VvbWV0cnkuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIGxpbmUuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgdlN0YXJ0ID0gbmV3IHRocmVlJDEuVmVjdG9yMyhzdGFydC54LCBzdGFydC55IHx8IDAsIHN0YXJ0LnogfHwgMCk7XG4gICAgICAgICAgICAgIHZhciB2RW5kID0gbmV3IHRocmVlJDEuVmVjdG9yMyhlbmQueCwgZW5kLnkgfHwgMCwgZW5kLnogfHwgMCk7XG4gICAgICAgICAgICAgIHZhciBkaXN0YW5jZSA9IHZTdGFydC5kaXN0YW5jZVRvKHZFbmQpO1xuICAgICAgICAgICAgICBsaW5lLnBvc2l0aW9uLnggPSB2U3RhcnQueDtcbiAgICAgICAgICAgICAgbGluZS5wb3NpdGlvbi55ID0gdlN0YXJ0Lnk7XG4gICAgICAgICAgICAgIGxpbmUucG9zaXRpb24ueiA9IHZTdGFydC56O1xuICAgICAgICAgICAgICBsaW5lLnNjYWxlLnogPSBkaXN0YW5jZTtcbiAgICAgICAgICAgICAgbGluZS5wYXJlbnQubG9jYWxUb1dvcmxkKHZFbmQpOyAvLyBsb29rQXQgcmVxdWlyZXMgd29ybGQgY29vcmRzXG4gICAgICAgICAgICAgIGxpbmUubG9va0F0KHZFbmQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gY3VydmVkIHR1YmVcbiAgICAgICAgICAgICAgaWYgKCFsaW5lLmdlb21ldHJ5LnR5cGUubWF0Y2goL15UdWJlKEJ1ZmZlcik/R2VvbWV0cnkkLykpIHtcbiAgICAgICAgICAgICAgICAvLyByZXNldCBvYmplY3QgcG9zaXRpb25pbmdcbiAgICAgICAgICAgICAgICBsaW5lLnBvc2l0aW9uLnNldCgwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICBsaW5lLnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcbiAgICAgICAgICAgICAgICBsaW5lLnNjYWxlLnNldCgxLCAxLCAxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgX2xpbmtXaWR0aCA9IE1hdGguY2VpbChsaW5rV2lkdGhBY2Nlc3NvcihsaW5rKSAqIDEwKSAvIDEwO1xuICAgICAgICAgICAgICB2YXIgX3IgPSBfbGlua1dpZHRoIC8gMjtcbiAgICAgICAgICAgICAgdmFyIF9nZW9tZXRyeSA9IG5ldyB0aHJlZSQxLlR1YmVHZW9tZXRyeShjdXJ2ZSwgY3VydmVSZXNvbHV0aW9uLCBfciwgc3RhdGUubGlua1Jlc29sdXRpb24sIGZhbHNlKTtcbiAgICAgICAgICAgICAgbGluZS5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgIGxpbmUuZ2VvbWV0cnkgPSBfZ2VvbWV0cnk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvL1xuXG4gICAgICAgIGZ1bmN0aW9uIGNhbGNMaW5rQ3VydmUobGluaykge1xuICAgICAgICAgIHZhciBwb3MgPSBpc0QzU2ltID8gbGluayA6IHN0YXRlLmxheW91dC5nZXRMaW5rUG9zaXRpb24oc3RhdGUubGF5b3V0LmdyYXBoLmdldExpbmsobGluay5zb3VyY2UsIGxpbmsudGFyZ2V0KS5pZCk7XG4gICAgICAgICAgdmFyIHN0YXJ0ID0gcG9zW2lzRDNTaW0gPyAnc291cmNlJyA6ICdmcm9tJ107XG4gICAgICAgICAgdmFyIGVuZCA9IHBvc1tpc0QzU2ltID8gJ3RhcmdldCcgOiAndG8nXTtcbiAgICAgICAgICBpZiAoIXN0YXJ0IHx8ICFlbmQgfHwgIXN0YXJ0Lmhhc093blByb3BlcnR5KCd4JykgfHwgIWVuZC5oYXNPd25Qcm9wZXJ0eSgneCcpKSByZXR1cm47IC8vIHNraXAgaW52YWxpZCBsaW5rXG5cbiAgICAgICAgICB2YXIgY3VydmF0dXJlID0gbGlua0N1cnZhdHVyZUFjY2Vzc29yKGxpbmspO1xuICAgICAgICAgIGlmICghY3VydmF0dXJlKSB7XG4gICAgICAgICAgICBsaW5rLl9fY3VydmUgPSBudWxsOyAvLyBTdHJhaWdodCBsaW5lXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGJlemllciBjdXJ2ZSBsaW5lIChvbmx5IGZvciBsaW5lIHR5cGVzKVxuICAgICAgICAgICAgdmFyIHZTdGFydCA9IG5ldyB0aHJlZSQxLlZlY3RvcjMoc3RhcnQueCwgc3RhcnQueSB8fCAwLCBzdGFydC56IHx8IDApO1xuICAgICAgICAgICAgdmFyIHZFbmQgPSBuZXcgdGhyZWUkMS5WZWN0b3IzKGVuZC54LCBlbmQueSB8fCAwLCBlbmQueiB8fCAwKTtcbiAgICAgICAgICAgIHZhciBsID0gdlN0YXJ0LmRpc3RhbmNlVG8odkVuZCk7IC8vIGxpbmUgbGVuZ3RoXG5cbiAgICAgICAgICAgIHZhciBjdXJ2ZTtcbiAgICAgICAgICAgIHZhciBjdXJ2ZVJvdGF0aW9uID0gbGlua0N1cnZlUm90YXRpb25BY2Nlc3NvcihsaW5rKTtcbiAgICAgICAgICAgIGlmIChsID4gMCkge1xuICAgICAgICAgICAgICB2YXIgZHggPSBlbmQueCAtIHN0YXJ0Lng7XG4gICAgICAgICAgICAgIHZhciBkeSA9IGVuZC55IC0gc3RhcnQueSB8fCAwO1xuICAgICAgICAgICAgICB2YXIgdkxpbmUgPSBuZXcgdGhyZWUkMS5WZWN0b3IzKCkuc3ViVmVjdG9ycyh2RW5kLCB2U3RhcnQpO1xuICAgICAgICAgICAgICB2YXIgY3AgPSB2TGluZS5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKGN1cnZhdHVyZSkuY3Jvc3MoZHggIT09IDAgfHwgZHkgIT09IDAgPyBuZXcgdGhyZWUkMS5WZWN0b3IzKDAsIDAsIDEpIDogbmV3IHRocmVlJDEuVmVjdG9yMygwLCAxLCAwKSkgLy8gYXZvaWQgY3Jvc3MtcHJvZHVjdCBvZiBwYXJhbGxlbCB2ZWN0b3JzIChwcmVmZXIgWiwgZmFsbGJhY2sgdG8gWSlcbiAgICAgICAgICAgICAgLmFwcGx5QXhpc0FuZ2xlKHZMaW5lLm5vcm1hbGl6ZSgpLCBjdXJ2ZVJvdGF0aW9uKSAvLyByb3RhdGUgYWxvbmcgbGluZSBheGlzIGFjY29yZGluZyB0byBsaW5rQ3VydmVSb3RhdGlvblxuICAgICAgICAgICAgICAuYWRkKG5ldyB0aHJlZSQxLlZlY3RvcjMoKS5hZGRWZWN0b3JzKHZTdGFydCwgdkVuZCkuZGl2aWRlU2NhbGFyKDIpKTtcbiAgICAgICAgICAgICAgY3VydmUgPSBuZXcgdGhyZWUkMS5RdWFkcmF0aWNCZXppZXJDdXJ2ZTModlN0YXJ0LCBjcCwgdkVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBTYW1lIHBvaW50LCBkcmF3IGEgbG9vcFxuICAgICAgICAgICAgICB2YXIgZCA9IGN1cnZhdHVyZSAqIDcwO1xuICAgICAgICAgICAgICB2YXIgZW5kQW5nbGUgPSAtY3VydmVSb3RhdGlvbjsgLy8gUm90YXRlIGNsb2Nrd2lzZSAoZnJvbSBaIGFuZ2xlIHBlcnNwZWN0aXZlKVxuICAgICAgICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IGVuZEFuZ2xlICsgTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICAgIGN1cnZlID0gbmV3IHRocmVlJDEuQ3ViaWNCZXppZXJDdXJ2ZTModlN0YXJ0LCBuZXcgdGhyZWUkMS5WZWN0b3IzKGQgKiBNYXRoLmNvcyhzdGFydEFuZ2xlKSwgZCAqIE1hdGguc2luKHN0YXJ0QW5nbGUpLCAwKS5hZGQodlN0YXJ0KSwgbmV3IHRocmVlJDEuVmVjdG9yMyhkICogTWF0aC5jb3MoZW5kQW5nbGUpLCBkICogTWF0aC5zaW4oZW5kQW5nbGUpLCAwKS5hZGQodlN0YXJ0KSwgdkVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsaW5rLl9fY3VydmUgPSBjdXJ2ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUFycm93cygpIHtcbiAgICAgICAgLy8gdXBkYXRlIGxpbmsgYXJyb3cgcG9zaXRpb25cbiAgICAgICAgdmFyIGFycm93UmVsUG9zQWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLmxpbmtEaXJlY3Rpb25hbEFycm93UmVsUG9zKTtcbiAgICAgICAgdmFyIGFycm93TGVuZ3RoQWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLmxpbmtEaXJlY3Rpb25hbEFycm93TGVuZ3RoKTtcbiAgICAgICAgdmFyIG5vZGVWYWxBY2Nlc3NvciA9IGFjY2Vzc29yRm4oc3RhdGUubm9kZVZhbCk7XG4gICAgICAgIHN0YXRlLmdyYXBoRGF0YS5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgdmFyIGFycm93T2JqID0gbGluay5fX2Fycm93T2JqO1xuICAgICAgICAgIGlmICghYXJyb3dPYmopIHJldHVybjtcbiAgICAgICAgICB2YXIgcG9zID0gaXNEM1NpbSA/IGxpbmsgOiBzdGF0ZS5sYXlvdXQuZ2V0TGlua1Bvc2l0aW9uKHN0YXRlLmxheW91dC5ncmFwaC5nZXRMaW5rKGxpbmsuc291cmNlLCBsaW5rLnRhcmdldCkuaWQpO1xuICAgICAgICAgIHZhciBzdGFydCA9IHBvc1tpc0QzU2ltID8gJ3NvdXJjZScgOiAnZnJvbSddO1xuICAgICAgICAgIHZhciBlbmQgPSBwb3NbaXNEM1NpbSA/ICd0YXJnZXQnIDogJ3RvJ107XG4gICAgICAgICAgaWYgKCFzdGFydCB8fCAhZW5kIHx8ICFzdGFydC5oYXNPd25Qcm9wZXJ0eSgneCcpIHx8ICFlbmQuaGFzT3duUHJvcGVydHkoJ3gnKSkgcmV0dXJuOyAvLyBza2lwIGludmFsaWQgbGlua1xuXG4gICAgICAgICAgdmFyIHN0YXJ0UiA9IE1hdGguY2JydChNYXRoLm1heCgwLCBub2RlVmFsQWNjZXNzb3Ioc3RhcnQpIHx8IDEpKSAqIHN0YXRlLm5vZGVSZWxTaXplO1xuICAgICAgICAgIHZhciBlbmRSID0gTWF0aC5jYnJ0KE1hdGgubWF4KDAsIG5vZGVWYWxBY2Nlc3NvcihlbmQpIHx8IDEpKSAqIHN0YXRlLm5vZGVSZWxTaXplO1xuICAgICAgICAgIHZhciBhcnJvd0xlbmd0aCA9IGFycm93TGVuZ3RoQWNjZXNzb3IobGluayk7XG4gICAgICAgICAgdmFyIGFycm93UmVsUG9zID0gYXJyb3dSZWxQb3NBY2Nlc3NvcihsaW5rKTtcbiAgICAgICAgICB2YXIgZ2V0UG9zQWxvbmdMaW5lID0gbGluay5fX2N1cnZlID8gZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIHJldHVybiBsaW5rLl9fY3VydmUuZ2V0UG9pbnQodCk7XG4gICAgICAgICAgfSAvLyBpbnRlcnBvbGF0ZSBhbG9uZyBiZXppZXIgY3VydmVcbiAgICAgICAgICA6IGZ1bmN0aW9uICh0KSB7XG4gICAgICAgICAgICAvLyBzdHJhaWdodCBsaW5lOiBpbnRlcnBvbGF0ZSBsaW5lYXJseVxuICAgICAgICAgICAgdmFyIGlwbHQgPSBmdW5jdGlvbiBpcGx0KGRpbSwgc3RhcnQsIGVuZCwgdCkge1xuICAgICAgICAgICAgICByZXR1cm4gc3RhcnRbZGltXSArIChlbmRbZGltXSAtIHN0YXJ0W2RpbV0pICogdCB8fCAwO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHg6IGlwbHQoJ3gnLCBzdGFydCwgZW5kLCB0KSxcbiAgICAgICAgICAgICAgeTogaXBsdCgneScsIHN0YXJ0LCBlbmQsIHQpLFxuICAgICAgICAgICAgICB6OiBpcGx0KCd6Jywgc3RhcnQsIGVuZCwgdClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgbGluZUxlbiA9IGxpbmsuX19jdXJ2ZSA/IGxpbmsuX19jdXJ2ZS5nZXRMZW5ndGgoKSA6IE1hdGguc3FydChbJ3gnLCAneScsICd6J10ubWFwKGZ1bmN0aW9uIChkaW0pIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdygoZW5kW2RpbV0gfHwgMCkgLSAoc3RhcnRbZGltXSB8fCAwKSwgMik7XG4gICAgICAgICAgfSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHYpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2MgKyB2O1xuICAgICAgICAgIH0sIDApKTtcbiAgICAgICAgICB2YXIgcG9zQWxvbmdMaW5lID0gc3RhcnRSICsgYXJyb3dMZW5ndGggKyAobGluZUxlbiAtIHN0YXJ0UiAtIGVuZFIgLSBhcnJvd0xlbmd0aCkgKiBhcnJvd1JlbFBvcztcbiAgICAgICAgICB2YXIgYXJyb3dIZWFkID0gZ2V0UG9zQWxvbmdMaW5lKHBvc0Fsb25nTGluZSAvIGxpbmVMZW4pO1xuICAgICAgICAgIHZhciBhcnJvd1RhaWwgPSBnZXRQb3NBbG9uZ0xpbmUoKHBvc0Fsb25nTGluZSAtIGFycm93TGVuZ3RoKSAvIGxpbmVMZW4pO1xuICAgICAgICAgIFsneCcsICd5JywgJ3onXS5mb3JFYWNoKGZ1bmN0aW9uIChkaW0pIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJvd09iai5wb3NpdGlvbltkaW1dID0gYXJyb3dUYWlsW2RpbV07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIGhlYWRWZWMgPSBfY29uc3RydWN0KHRocmVlJDEuVmVjdG9yMywgX3RvQ29uc3VtYWJsZUFycmF5KFsneCcsICd5JywgJ3onXS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBhcnJvd0hlYWRbY107XG4gICAgICAgICAgfSkpKTtcbiAgICAgICAgICBhcnJvd09iai5wYXJlbnQubG9jYWxUb1dvcmxkKGhlYWRWZWMpOyAvLyBsb29rQXQgcmVxdWlyZXMgd29ybGQgY29vcmRzXG4gICAgICAgICAgYXJyb3dPYmoubG9va0F0KGhlYWRWZWMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVBob3RvbnMoKSB7XG4gICAgICAgIC8vIHVwZGF0ZSBsaW5rIHBhcnRpY2xlIHBvc2l0aW9uc1xuICAgICAgICB2YXIgcGFydGljbGVTcGVlZEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVNwZWVkKTtcbiAgICAgICAgc3RhdGUuZ3JhcGhEYXRhLmxpbmtzLmZvckVhY2goZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgICB2YXIgY3ljbGVQaG90b25zID0gbGluay5fX3Bob3RvbnNPYmogJiYgbGluay5fX3Bob3RvbnNPYmouY2hpbGRyZW47XG4gICAgICAgICAgdmFyIHNpbmdsZUhvcFBob3RvbnMgPSBsaW5rLl9fc2luZ2xlSG9wUGhvdG9uc09iaiAmJiBsaW5rLl9fc2luZ2xlSG9wUGhvdG9uc09iai5jaGlsZHJlbjtcbiAgICAgICAgICBpZiAoKCFzaW5nbGVIb3BQaG90b25zIHx8ICFzaW5nbGVIb3BQaG90b25zLmxlbmd0aCkgJiYgKCFjeWNsZVBob3RvbnMgfHwgIWN5Y2xlUGhvdG9ucy5sZW5ndGgpKSByZXR1cm47XG4gICAgICAgICAgdmFyIHBvcyA9IGlzRDNTaW0gPyBsaW5rIDogc3RhdGUubGF5b3V0LmdldExpbmtQb3NpdGlvbihzdGF0ZS5sYXlvdXQuZ3JhcGguZ2V0TGluayhsaW5rLnNvdXJjZSwgbGluay50YXJnZXQpLmlkKTtcbiAgICAgICAgICB2YXIgc3RhcnQgPSBwb3NbaXNEM1NpbSA/ICdzb3VyY2UnIDogJ2Zyb20nXTtcbiAgICAgICAgICB2YXIgZW5kID0gcG9zW2lzRDNTaW0gPyAndGFyZ2V0JyA6ICd0byddO1xuICAgICAgICAgIGlmICghc3RhcnQgfHwgIWVuZCB8fCAhc3RhcnQuaGFzT3duUHJvcGVydHkoJ3gnKSB8fCAhZW5kLmhhc093blByb3BlcnR5KCd4JykpIHJldHVybjsgLy8gc2tpcCBpbnZhbGlkIGxpbmtcblxuICAgICAgICAgIHZhciBwYXJ0aWNsZVNwZWVkID0gcGFydGljbGVTcGVlZEFjY2Vzc29yKGxpbmspO1xuICAgICAgICAgIHZhciBnZXRQaG90b25Qb3MgPSBsaW5rLl9fY3VydmUgPyBmdW5jdGlvbiAodCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpbmsuX19jdXJ2ZS5nZXRQb2ludCh0KTtcbiAgICAgICAgICB9IC8vIGludGVycG9sYXRlIGFsb25nIGJlemllciBjdXJ2ZVxuICAgICAgICAgIDogZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgICAgIC8vIHN0cmFpZ2h0IGxpbmU6IGludGVycG9sYXRlIGxpbmVhcmx5XG4gICAgICAgICAgICB2YXIgaXBsdCA9IGZ1bmN0aW9uIGlwbHQoZGltLCBzdGFydCwgZW5kLCB0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBzdGFydFtkaW1dICsgKGVuZFtkaW1dIC0gc3RhcnRbZGltXSkgKiB0IHx8IDA7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgeDogaXBsdCgneCcsIHN0YXJ0LCBlbmQsIHQpLFxuICAgICAgICAgICAgICB5OiBpcGx0KCd5Jywgc3RhcnQsIGVuZCwgdCksXG4gICAgICAgICAgICAgIHo6IGlwbHQoJ3onLCBzdGFydCwgZW5kLCB0KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBwaG90b25zID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShjeWNsZVBob3RvbnMgfHwgW10pLCBfdG9Db25zdW1hYmxlQXJyYXkoc2luZ2xlSG9wUGhvdG9ucyB8fCBbXSkpO1xuICAgICAgICAgIHBob3RvbnMuZm9yRWFjaChmdW5jdGlvbiAocGhvdG9uLCBpZHgpIHtcbiAgICAgICAgICAgIHZhciBzaW5nbGVIb3AgPSBwaG90b24ucGFyZW50Ll9fbGlua1RocmVlT2JqVHlwZSA9PT0gJ3NpbmdsZUhvcFBob3RvbnMnO1xuICAgICAgICAgICAgaWYgKCFwaG90b24uaGFzT3duUHJvcGVydHkoJ19fcHJvZ3Jlc3NSYXRpbycpKSB7XG4gICAgICAgICAgICAgIHBob3Rvbi5fX3Byb2dyZXNzUmF0aW8gPSBzaW5nbGVIb3AgPyAwIDogaWR4IC8gY3ljbGVQaG90b25zLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBob3Rvbi5fX3Byb2dyZXNzUmF0aW8gKz0gcGFydGljbGVTcGVlZDtcbiAgICAgICAgICAgIGlmIChwaG90b24uX19wcm9ncmVzc1JhdGlvID49IDEpIHtcbiAgICAgICAgICAgICAgaWYgKCFzaW5nbGVIb3ApIHtcbiAgICAgICAgICAgICAgICBwaG90b24uX19wcm9ncmVzc1JhdGlvID0gcGhvdG9uLl9fcHJvZ3Jlc3NSYXRpbyAlIDE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHBhcnRpY2xlXG4gICAgICAgICAgICAgICAgcGhvdG9uLnBhcmVudC5yZW1vdmUocGhvdG9uKTtcbiAgICAgICAgICAgICAgICBlbXB0eU9iamVjdChwaG90b24pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBob3RvblBvc1JhdGlvID0gcGhvdG9uLl9fcHJvZ3Jlc3NSYXRpbztcbiAgICAgICAgICAgIHZhciBwb3MgPSBnZXRQaG90b25Qb3MocGhvdG9uUG9zUmF0aW8pO1xuICAgICAgICAgICAgWyd4JywgJ3knLCAneiddLmZvckVhY2goZnVuY3Rpb24gKGRpbSkge1xuICAgICAgICAgICAgICByZXR1cm4gcGhvdG9uLnBvc2l0aW9uW2RpbV0gPSBwb3NbZGltXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVtaXRQYXJ0aWNsZTogZnVuY3Rpb24gZW1pdFBhcnRpY2xlKHN0YXRlLCBsaW5rKSB7XG4gICAgICBpZiAobGluayAmJiBzdGF0ZS5ncmFwaERhdGEubGlua3MuaW5jbHVkZXMobGluaykpIHtcbiAgICAgICAgaWYgKCFsaW5rLl9fc2luZ2xlSG9wUGhvdG9uc09iaikge1xuICAgICAgICAgIHZhciBvYmogPSBuZXcgdGhyZWUkMS5Hcm91cCgpO1xuICAgICAgICAgIG9iai5fX2xpbmtUaHJlZU9ialR5cGUgPSAnc2luZ2xlSG9wUGhvdG9ucyc7XG4gICAgICAgICAgbGluay5fX3NpbmdsZUhvcFBob3RvbnNPYmogPSBvYmo7XG4gICAgICAgICAgc3RhdGUuZ3JhcGhTY2VuZS5hZGQob2JqKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydGljbGVXaWR0aEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVdpZHRoKTtcbiAgICAgICAgdmFyIHBob3RvblIgPSBNYXRoLmNlaWwocGFydGljbGVXaWR0aEFjY2Vzc29yKGxpbmspICogMTApIC8gMTAgLyAyO1xuICAgICAgICB2YXIgbnVtU2VnbWVudHMgPSBzdGF0ZS5saW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVJlc29sdXRpb247XG4gICAgICAgIHZhciBwYXJ0aWNsZUdlb21ldHJ5ID0gbmV3IHRocmVlJDEuU3BoZXJlR2VvbWV0cnkocGhvdG9uUiwgbnVtU2VnbWVudHMsIG51bVNlZ21lbnRzKTtcbiAgICAgICAgdmFyIGxpbmtDb2xvckFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rQ29sb3IpO1xuICAgICAgICB2YXIgcGFydGljbGVDb2xvckFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rRGlyZWN0aW9uYWxQYXJ0aWNsZUNvbG9yKTtcbiAgICAgICAgdmFyIHBob3RvbkNvbG9yID0gcGFydGljbGVDb2xvckFjY2Vzc29yKGxpbmspIHx8IGxpbmtDb2xvckFjY2Vzc29yKGxpbmspIHx8ICcjZjBmMGYwJztcbiAgICAgICAgdmFyIG1hdGVyaWFsQ29sb3IgPSBuZXcgdGhyZWUkMS5Db2xvcihjb2xvclN0cjJIZXgocGhvdG9uQ29sb3IpKTtcbiAgICAgICAgdmFyIG9wYWNpdHkgPSBzdGF0ZS5saW5rT3BhY2l0eSAqIDM7XG4gICAgICAgIHZhciBwYXJ0aWNsZU1hdGVyaWFsID0gbmV3IHRocmVlJDEuTWVzaExhbWJlcnRNYXRlcmlhbCh7XG4gICAgICAgICAgY29sb3I6IG1hdGVyaWFsQ29sb3IsXG4gICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgb3BhY2l0eTogb3BhY2l0eVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhZGQgYSBzaW5nbGUgaG9wIHBhcnRpY2xlXG4gICAgICAgIGxpbmsuX19zaW5nbGVIb3BQaG90b25zT2JqLmFkZChuZXcgdGhyZWUkMS5NZXNoKHBhcnRpY2xlR2VvbWV0cnksIHBhcnRpY2xlTWF0ZXJpYWwpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZ2V0R3JhcGhCYm94OiBmdW5jdGlvbiBnZXRHcmFwaEJib3goc3RhdGUpIHtcbiAgICAgIHZhciBub2RlRmlsdGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICAgIGlmICghc3RhdGUuaW5pdGlhbGlzZWQpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyByZWN1cnNpdmVseSBjb2xsZWN0IGFsbCBuZXN0ZWQgZ2VvbWV0cmllcyBiYm94ZXNcbiAgICAgIHZhciBiYm94ZXMgPSBmdW5jdGlvbiBnZXRCYm94ZXMob2JqKSB7XG4gICAgICAgIHZhciBiYm94ZXMgPSBbXTtcbiAgICAgICAgaWYgKG9iai5nZW9tZXRyeSkge1xuICAgICAgICAgIG9iai5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcbiAgICAgICAgICB2YXIgYm94ID0gbmV3IHRocmVlJDEuQm94MygpO1xuICAgICAgICAgIGJveC5jb3B5KG9iai5nZW9tZXRyeS5ib3VuZGluZ0JveCkuYXBwbHlNYXRyaXg0KG9iai5tYXRyaXhXb3JsZCk7XG4gICAgICAgICAgYmJveGVzLnB1c2goYm94KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmJveGVzLmNvbmNhdC5hcHBseShiYm94ZXMsIF90b0NvbnN1bWFibGVBcnJheSgob2JqLmNoaWxkcmVuIHx8IFtdKS5maWx0ZXIoZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiAhb2JqLmhhc093blByb3BlcnR5KCdfX2dyYXBoT2JqVHlwZScpIHx8IG9iai5fX2dyYXBoT2JqVHlwZSA9PT0gJ25vZGUnICYmIG5vZGVGaWx0ZXIob2JqLl9fZGF0YSk7XG4gICAgICAgIH0gLy8gZXhjbHVkZSBmaWx0ZXJlZCBvdXQgbm9kZXNcbiAgICAgICAgKS5tYXAoZ2V0QmJveGVzKSkpO1xuICAgICAgfShzdGF0ZS5ncmFwaFNjZW5lKTtcbiAgICAgIGlmICghYmJveGVzLmxlbmd0aCkgcmV0dXJuIG51bGw7XG5cbiAgICAgIC8vIGV4dHJhY3QgZ2xvYmFsIHgseSx6IG1pbi9tYXhcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgX3RvQ29uc3VtYWJsZUFycmF5KFsneCcsICd5JywgJ3onXS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYywgW21pbihiYm94ZXMsIGZ1bmN0aW9uIChiYikge1xuICAgICAgICAgIHJldHVybiBiYi5taW5bY107XG4gICAgICAgIH0pLCBtYXgoYmJveGVzLCBmdW5jdGlvbiAoYmIpIHtcbiAgICAgICAgICByZXR1cm4gYmIubWF4W2NdO1xuICAgICAgICB9KV0pO1xuICAgICAgfSkpKTtcbiAgICB9XG4gIH0sXG4gIHN0YXRlSW5pdDogZnVuY3Rpb24gc3RhdGVJbml0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBkM0ZvcmNlTGF5b3V0OiBmb3JjZVNpbXVsYXRpb24oKS5mb3JjZSgnbGluaycsIGZvcmNlTGluaygpKS5mb3JjZSgnY2hhcmdlJywgZm9yY2VNYW55Qm9keSgpKS5mb3JjZSgnY2VudGVyJywgZm9yY2VDZW50ZXIoKSkuZm9yY2UoJ2RhZ1JhZGlhbCcsIG51bGwpLnN0b3AoKSxcbiAgICAgIGVuZ2luZVJ1bm5pbmc6IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCh0aHJlZU9iaiwgc3RhdGUpIHtcbiAgICAvLyBNYWluIHRocmVlIG9iamVjdCB0byBtYW5pcHVsYXRlXG4gICAgc3RhdGUuZ3JhcGhTY2VuZSA9IHRocmVlT2JqO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShzdGF0ZSwgY2hhbmdlZFByb3BzKSB7XG4gICAgdmFyIGhhc0FueVByb3BDaGFuZ2VkID0gZnVuY3Rpb24gaGFzQW55UHJvcENoYW5nZWQocHJvcExpc3QpIHtcbiAgICAgIHJldHVybiBwcm9wTGlzdC5zb21lKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgIHJldHVybiBjaGFuZ2VkUHJvcHMuaGFzT3duUHJvcGVydHkocCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHN0YXRlLmVuZ2luZVJ1bm5pbmcgPSBmYWxzZTsgLy8gcGF1c2Ugc2ltdWxhdGlvblxuICAgIHN0YXRlLm9uVXBkYXRlKCk7XG4gICAgaWYgKHN0YXRlLm5vZGVBdXRvQ29sb3JCeSAhPT0gbnVsbCAmJiBoYXNBbnlQcm9wQ2hhbmdlZChbJ25vZGVBdXRvQ29sb3JCeScsICdncmFwaERhdGEnLCAnbm9kZUNvbG9yJ10pKSB7XG4gICAgICAvLyBBdXRvIGFkZCBjb2xvciB0byB1bmNvbG9yZWQgbm9kZXNcbiAgICAgIGF1dG9Db2xvck9iamVjdHMoc3RhdGUuZ3JhcGhEYXRhLm5vZGVzLCBhY2Nlc3NvckZuKHN0YXRlLm5vZGVBdXRvQ29sb3JCeSksIHN0YXRlLm5vZGVDb2xvcik7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5saW5rQXV0b0NvbG9yQnkgIT09IG51bGwgJiYgaGFzQW55UHJvcENoYW5nZWQoWydsaW5rQXV0b0NvbG9yQnknLCAnZ3JhcGhEYXRhJywgJ2xpbmtDb2xvciddKSkge1xuICAgICAgLy8gQXV0byBhZGQgY29sb3IgdG8gdW5jb2xvcmVkIGxpbmtzXG4gICAgICBhdXRvQ29sb3JPYmplY3RzKHN0YXRlLmdyYXBoRGF0YS5saW5rcywgYWNjZXNzb3JGbihzdGF0ZS5saW5rQXV0b0NvbG9yQnkpLCBzdGF0ZS5saW5rQ29sb3IpO1xuICAgIH1cblxuICAgIC8vIERpZ2VzdCBub2RlcyBXZWJHTCBvYmplY3RzXG4gICAgaWYgKHN0YXRlLl9mbHVzaE9iamVjdHMgfHwgaGFzQW55UHJvcENoYW5nZWQoWydncmFwaERhdGEnLCAnbm9kZVRocmVlT2JqZWN0JywgJ25vZGVUaHJlZU9iamVjdEV4dGVuZCcsICdub2RlVmFsJywgJ25vZGVDb2xvcicsICdub2RlVmlzaWJpbGl0eScsICdub2RlUmVsU2l6ZScsICdub2RlUmVzb2x1dGlvbicsICdub2RlT3BhY2l0eSddKSkge1xuICAgICAgdmFyIGN1c3RvbU9iamVjdEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5ub2RlVGhyZWVPYmplY3QpO1xuICAgICAgdmFyIGN1c3RvbU9iamVjdEV4dGVuZEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5ub2RlVGhyZWVPYmplY3RFeHRlbmQpO1xuICAgICAgdmFyIHZhbEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5ub2RlVmFsKTtcbiAgICAgIHZhciBjb2xvckFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5ub2RlQ29sb3IpO1xuICAgICAgdmFyIHZpc2liaWxpdHlBY2Nlc3NvciA9IGFjY2Vzc29yRm4oc3RhdGUubm9kZVZpc2liaWxpdHkpO1xuICAgICAgdmFyIHNwaGVyZUdlb21ldHJpZXMgPSB7fTsgLy8gaW5kZXhlZCBieSBub2RlIHZhbHVlXG4gICAgICB2YXIgc3BoZXJlTWF0ZXJpYWxzID0ge307IC8vIGluZGV4ZWQgYnkgY29sb3JcblxuICAgICAgdGhyZWVEaWdlc3Qoc3RhdGUuZ3JhcGhEYXRhLm5vZGVzLmZpbHRlcih2aXNpYmlsaXR5QWNjZXNzb3IpLCBzdGF0ZS5ncmFwaFNjZW5lLCB7XG4gICAgICAgIHB1cmdlOiBzdGF0ZS5fZmx1c2hPYmplY3RzIHx8IGhhc0FueVByb3BDaGFuZ2VkKFtcbiAgICAgICAgLy8gcmVjcmVhdGUgb2JqZWN0cyBpZiBhbnkgb2YgdGhlc2UgcHJvcHMgaGF2ZSBjaGFuZ2VkXG4gICAgICAgICdub2RlVGhyZWVPYmplY3QnLCAnbm9kZVRocmVlT2JqZWN0RXh0ZW5kJ10pLFxuICAgICAgICBvYmpGaWx0ZXI6IGZ1bmN0aW9uIG9iakZpbHRlcihvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqLl9fZ3JhcGhPYmpUeXBlID09PSAnbm9kZSc7XG4gICAgICAgIH0sXG4gICAgICAgIGNyZWF0ZU9iajogZnVuY3Rpb24gY3JlYXRlT2JqKG5vZGUpIHtcbiAgICAgICAgICB2YXIgY3VzdG9tT2JqID0gY3VzdG9tT2JqZWN0QWNjZXNzb3Iobm9kZSk7XG4gICAgICAgICAgdmFyIGV4dGVuZE9iaiA9IGN1c3RvbU9iamVjdEV4dGVuZEFjY2Vzc29yKG5vZGUpO1xuICAgICAgICAgIGlmIChjdXN0b21PYmogJiYgc3RhdGUubm9kZVRocmVlT2JqZWN0ID09PSBjdXN0b21PYmopIHtcbiAgICAgICAgICAgIC8vIGNsb25lIG9iamVjdCBpZiBpdCdzIGEgc2hhcmVkIG9iamVjdCBhbW9uZyBhbGwgbm9kZXNcbiAgICAgICAgICAgIGN1c3RvbU9iaiA9IGN1c3RvbU9iai5jbG9uZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb2JqO1xuICAgICAgICAgIGlmIChjdXN0b21PYmogJiYgIWV4dGVuZE9iaikge1xuICAgICAgICAgICAgb2JqID0gY3VzdG9tT2JqO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBZGQgZGVmYXVsdCBvYmplY3QgKHNwaGVyZSBtZXNoKVxuICAgICAgICAgICAgb2JqID0gbmV3IHRocmVlJDEuTWVzaCgpO1xuICAgICAgICAgICAgb2JqLl9fZ3JhcGhEZWZhdWx0T2JqID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChjdXN0b21PYmogJiYgZXh0ZW5kT2JqKSB7XG4gICAgICAgICAgICAgIG9iai5hZGQoY3VzdG9tT2JqKTsgLy8gZXh0ZW5kIGRlZmF1bHQgd2l0aCBjdXN0b21cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgb2JqLl9fZ3JhcGhPYmpUeXBlID0gJ25vZGUnOyAvLyBBZGQgb2JqZWN0IHR5cGVcblxuICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZU9iajogZnVuY3Rpb24gdXBkYXRlT2JqKG9iaiwgbm9kZSkge1xuICAgICAgICAgIGlmIChvYmouX19ncmFwaERlZmF1bHRPYmopIHtcbiAgICAgICAgICAgIC8vIGJ5cGFzcyBpbnRlcm5hbCB1cGRhdGVzIGZvciBjdXN0b20gbm9kZSBvYmplY3RzXG4gICAgICAgICAgICB2YXIgdmFsID0gdmFsQWNjZXNzb3Iobm9kZSkgfHwgMTtcbiAgICAgICAgICAgIHZhciByYWRpdXMgPSBNYXRoLmNicnQodmFsKSAqIHN0YXRlLm5vZGVSZWxTaXplO1xuICAgICAgICAgICAgdmFyIG51bVNlZ21lbnRzID0gc3RhdGUubm9kZVJlc29sdXRpb247XG4gICAgICAgICAgICBpZiAoIW9iai5nZW9tZXRyeS50eXBlLm1hdGNoKC9eU3BoZXJlKEJ1ZmZlcik/R2VvbWV0cnkkLykgfHwgb2JqLmdlb21ldHJ5LnBhcmFtZXRlcnMucmFkaXVzICE9PSByYWRpdXMgfHwgb2JqLmdlb21ldHJ5LnBhcmFtZXRlcnMud2lkdGhTZWdtZW50cyAhPT0gbnVtU2VnbWVudHMpIHtcbiAgICAgICAgICAgICAgaWYgKCFzcGhlcmVHZW9tZXRyaWVzLmhhc093blByb3BlcnR5KHZhbCkpIHtcbiAgICAgICAgICAgICAgICBzcGhlcmVHZW9tZXRyaWVzW3ZhbF0gPSBuZXcgdGhyZWUkMS5TcGhlcmVHZW9tZXRyeShyYWRpdXMsIG51bVNlZ21lbnRzLCBudW1TZWdtZW50cyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb2JqLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgb2JqLmdlb21ldHJ5ID0gc3BoZXJlR2VvbWV0cmllc1t2YWxdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGNvbG9yID0gY29sb3JBY2Nlc3Nvcihub2RlKTtcbiAgICAgICAgICAgIHZhciBtYXRlcmlhbENvbG9yID0gbmV3IHRocmVlJDEuQ29sb3IoY29sb3JTdHIySGV4KGNvbG9yIHx8ICcjZmZmZmFhJykpO1xuICAgICAgICAgICAgdmFyIG9wYWNpdHkgPSBzdGF0ZS5ub2RlT3BhY2l0eSAqIGNvbG9yQWxwaGEoY29sb3IpO1xuICAgICAgICAgICAgaWYgKG9iai5tYXRlcmlhbC50eXBlICE9PSAnTWVzaExhbWJlcnRNYXRlcmlhbCcgfHwgIW9iai5tYXRlcmlhbC5jb2xvci5lcXVhbHMobWF0ZXJpYWxDb2xvcikgfHwgb2JqLm1hdGVyaWFsLm9wYWNpdHkgIT09IG9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgaWYgKCFzcGhlcmVNYXRlcmlhbHMuaGFzT3duUHJvcGVydHkoY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgc3BoZXJlTWF0ZXJpYWxzW2NvbG9yXSA9IG5ldyB0aHJlZSQxLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe1xuICAgICAgICAgICAgICAgICAgY29sb3I6IG1hdGVyaWFsQ29sb3IsXG4gICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvYmoubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICBvYmoubWF0ZXJpYWwgPSBzcGhlcmVNYXRlcmlhbHNbY29sb3JdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gRGlnZXN0IGxpbmtzIFdlYkdMIG9iamVjdHNcbiAgICBpZiAoc3RhdGUuX2ZsdXNoT2JqZWN0cyB8fCBoYXNBbnlQcm9wQ2hhbmdlZChbJ2dyYXBoRGF0YScsICdsaW5rVGhyZWVPYmplY3QnLCAnbGlua1RocmVlT2JqZWN0RXh0ZW5kJywgJ2xpbmtNYXRlcmlhbCcsICdsaW5rQ29sb3InLCAnbGlua1dpZHRoJywgJ2xpbmtWaXNpYmlsaXR5JywgJ2xpbmtSZXNvbHV0aW9uJywgJ2xpbmtPcGFjaXR5JywgJ2xpbmtEaXJlY3Rpb25hbEFycm93TGVuZ3RoJywgJ2xpbmtEaXJlY3Rpb25hbEFycm93Q29sb3InLCAnbGlua0RpcmVjdGlvbmFsQXJyb3dSZXNvbHV0aW9uJywgJ2xpbmtEaXJlY3Rpb25hbFBhcnRpY2xlcycsICdsaW5rRGlyZWN0aW9uYWxQYXJ0aWNsZVdpZHRoJywgJ2xpbmtEaXJlY3Rpb25hbFBhcnRpY2xlQ29sb3InLCAnbGlua0RpcmVjdGlvbmFsUGFydGljbGVSZXNvbHV0aW9uJ10pKSB7XG4gICAgICB2YXIgX2N1c3RvbU9iamVjdEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rVGhyZWVPYmplY3QpO1xuICAgICAgdmFyIF9jdXN0b21PYmplY3RFeHRlbmRBY2Nlc3NvciA9IGFjY2Vzc29yRm4oc3RhdGUubGlua1RocmVlT2JqZWN0RXh0ZW5kKTtcbiAgICAgIHZhciBjdXN0b21NYXRlcmlhbEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rTWF0ZXJpYWwpO1xuICAgICAgdmFyIF92aXNpYmlsaXR5QWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLmxpbmtWaXNpYmlsaXR5KTtcbiAgICAgIHZhciBfY29sb3JBY2Nlc3NvciA9IGFjY2Vzc29yRm4oc3RhdGUubGlua0NvbG9yKTtcbiAgICAgIHZhciB3aWR0aEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rV2lkdGgpO1xuICAgICAgdmFyIGN5bGluZGVyR2VvbWV0cmllcyA9IHt9OyAvLyBpbmRleGVkIGJ5IGxpbmsgd2lkdGhcbiAgICAgIHZhciBsYW1iZXJ0TGluZU1hdGVyaWFscyA9IHt9OyAvLyBmb3IgY3lsaW5kZXIgb2JqZWN0cywgaW5kZXhlZCBieSBsaW5rIGNvbG9yXG4gICAgICB2YXIgYmFzaWNMaW5lTWF0ZXJpYWxzID0ge307IC8vIGZvciBsaW5lIG9iamVjdHMsIGluZGV4ZWQgYnkgbGluayBjb2xvclxuXG4gICAgICB2YXIgdmlzaWJsZUxpbmtzID0gc3RhdGUuZ3JhcGhEYXRhLmxpbmtzLmZpbHRlcihfdmlzaWJpbGl0eUFjY2Vzc29yKTtcblxuICAgICAgLy8gbGluZXMgZGlnZXN0IGN5Y2xlXG4gICAgICB0aHJlZURpZ2VzdCh2aXNpYmxlTGlua3MsIHN0YXRlLmdyYXBoU2NlbmUsIHtcbiAgICAgICAgb2JqQmluZEF0dHI6ICdfX2xpbmVPYmonLFxuICAgICAgICBwdXJnZTogc3RhdGUuX2ZsdXNoT2JqZWN0cyB8fCBoYXNBbnlQcm9wQ2hhbmdlZChbXG4gICAgICAgIC8vIHJlY3JlYXRlIG9iamVjdHMgaWYgYW55IG9mIHRoZXNlIHByb3BzIGhhdmUgY2hhbmdlZFxuICAgICAgICAnbGlua1RocmVlT2JqZWN0JywgJ2xpbmtUaHJlZU9iamVjdEV4dGVuZCcsICdsaW5rV2lkdGgnXSksXG4gICAgICAgIG9iakZpbHRlcjogZnVuY3Rpb24gb2JqRmlsdGVyKG9iaikge1xuICAgICAgICAgIHJldHVybiBvYmouX19ncmFwaE9ialR5cGUgPT09ICdsaW5rJztcbiAgICAgICAgfSxcbiAgICAgICAgZXhpdE9iajogZnVuY3Rpb24gZXhpdE9iaihvYmopIHtcbiAgICAgICAgICAvLyByZW1vdmUgdHJhaWxpbmcgc2luZ2xlIHBob3RvbnNcbiAgICAgICAgICB2YXIgc2luZ2xlUGhvdG9uc09iaiA9IG9iai5fX2RhdGEgJiYgb2JqLl9fZGF0YS5fX3NpbmdsZUhvcFBob3RvbnNPYmo7XG4gICAgICAgICAgaWYgKHNpbmdsZVBob3RvbnNPYmopIHtcbiAgICAgICAgICAgIHNpbmdsZVBob3RvbnNPYmoucGFyZW50LnJlbW92ZShzaW5nbGVQaG90b25zT2JqKTtcbiAgICAgICAgICAgIGVtcHR5T2JqZWN0KHNpbmdsZVBob3RvbnNPYmopO1xuICAgICAgICAgICAgZGVsZXRlIG9iai5fX2RhdGEuX19zaW5nbGVIb3BQaG90b25zT2JqO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlT2JqOiBmdW5jdGlvbiBjcmVhdGVPYmoobGluaykge1xuICAgICAgICAgIHZhciBjdXN0b21PYmogPSBfY3VzdG9tT2JqZWN0QWNjZXNzb3IobGluayk7XG4gICAgICAgICAgdmFyIGV4dGVuZE9iaiA9IF9jdXN0b21PYmplY3RFeHRlbmRBY2Nlc3NvcihsaW5rKTtcbiAgICAgICAgICBpZiAoY3VzdG9tT2JqICYmIHN0YXRlLmxpbmtUaHJlZU9iamVjdCA9PT0gY3VzdG9tT2JqKSB7XG4gICAgICAgICAgICAvLyBjbG9uZSBvYmplY3QgaWYgaXQncyBhIHNoYXJlZCBvYmplY3QgYW1vbmcgYWxsIGxpbmtzXG4gICAgICAgICAgICBjdXN0b21PYmogPSBjdXN0b21PYmouY2xvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRlZmF1bHRPYmo7XG4gICAgICAgICAgaWYgKCFjdXN0b21PYmogfHwgZXh0ZW5kT2JqKSB7XG4gICAgICAgICAgICAvLyBjb25zdHJ1Y3QgZGVmYXVsdCBsaW5lIG9ialxuICAgICAgICAgICAgdmFyIHVzZUN5bGluZGVyID0gISF3aWR0aEFjY2Vzc29yKGxpbmspO1xuICAgICAgICAgICAgaWYgKHVzZUN5bGluZGVyKSB7XG4gICAgICAgICAgICAgIGRlZmF1bHRPYmogPSBuZXcgdGhyZWUkMS5NZXNoKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBVc2UgcGxhaW4gbGluZSAoY29uc3RhbnQgd2lkdGgpXG4gICAgICAgICAgICAgIHZhciBsaW5lR2VvbWV0cnkgPSBuZXcgdGhyZWUkMS5CdWZmZXJHZW9tZXRyeSgpO1xuICAgICAgICAgICAgICBsaW5lR2VvbWV0cnlbc2V0QXR0cmlidXRlRm5dKCdwb3NpdGlvbicsIG5ldyB0aHJlZSQxLkJ1ZmZlckF0dHJpYnV0ZShuZXcgRmxvYXQzMkFycmF5KDIgKiAzKSwgMykpO1xuICAgICAgICAgICAgICBkZWZhdWx0T2JqID0gbmV3IHRocmVlJDEuTGluZShsaW5lR2VvbWV0cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb2JqO1xuICAgICAgICAgIGlmICghY3VzdG9tT2JqKSB7XG4gICAgICAgICAgICBvYmogPSBkZWZhdWx0T2JqO1xuICAgICAgICAgICAgb2JqLl9fZ3JhcGhEZWZhdWx0T2JqID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFleHRlbmRPYmopIHtcbiAgICAgICAgICAgICAgLy8gdXNlIGN1c3RvbSBvYmplY3RcbiAgICAgICAgICAgICAgb2JqID0gY3VzdG9tT2JqO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gZXh0ZW5kIGRlZmF1bHQgd2l0aCBjdXN0b20gaW4gYSBncm91cFxuICAgICAgICAgICAgICBvYmogPSBuZXcgdGhyZWUkMS5Hcm91cCgpO1xuICAgICAgICAgICAgICBvYmouX19ncmFwaERlZmF1bHRPYmogPSB0cnVlO1xuICAgICAgICAgICAgICBvYmouYWRkKGRlZmF1bHRPYmopO1xuICAgICAgICAgICAgICBvYmouYWRkKGN1c3RvbU9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9iai5yZW5kZXJPcmRlciA9IDEwOyAvLyBQcmV2ZW50IHZpc3VhbCBnbGl0Y2hlcyBvZiBkYXJrIGxpbmVzIG9uIHRvcCBvZiBub2RlcyBieSByZW5kZXJpbmcgdGhlbSBsYXN0XG5cbiAgICAgICAgICBvYmouX19ncmFwaE9ialR5cGUgPSAnbGluayc7IC8vIEFkZCBvYmplY3QgdHlwZVxuXG4gICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlT2JqOiBmdW5jdGlvbiB1cGRhdGVPYmoodXBkT2JqLCBsaW5rKSB7XG4gICAgICAgICAgaWYgKHVwZE9iai5fX2dyYXBoRGVmYXVsdE9iaikge1xuICAgICAgICAgICAgLy8gYnlwYXNzIGludGVybmFsIHVwZGF0ZXMgZm9yIGN1c3RvbSBsaW5rIG9iamVjdHNcbiAgICAgICAgICAgIC8vIHNlbGVjdCBkZWZhdWx0IG9iamVjdCBpZiBpdCdzIGFuIGV4dGVuZGVkIGdyb3VwXG4gICAgICAgICAgICB2YXIgb2JqID0gdXBkT2JqLmNoaWxkcmVuLmxlbmd0aCA/IHVwZE9iai5jaGlsZHJlblswXSA6IHVwZE9iajtcbiAgICAgICAgICAgIHZhciBsaW5rV2lkdGggPSBNYXRoLmNlaWwod2lkdGhBY2Nlc3NvcihsaW5rKSAqIDEwKSAvIDEwO1xuICAgICAgICAgICAgdmFyIHVzZUN5bGluZGVyID0gISFsaW5rV2lkdGg7XG4gICAgICAgICAgICBpZiAodXNlQ3lsaW5kZXIpIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBsaW5rV2lkdGggLyAyO1xuICAgICAgICAgICAgICB2YXIgbnVtU2VnbWVudHMgPSBzdGF0ZS5saW5rUmVzb2x1dGlvbjtcbiAgICAgICAgICAgICAgaWYgKCFvYmouZ2VvbWV0cnkudHlwZS5tYXRjaCgvXkN5bGluZGVyKEJ1ZmZlcik/R2VvbWV0cnkkLykgfHwgb2JqLmdlb21ldHJ5LnBhcmFtZXRlcnMucmFkaXVzVG9wICE9PSByIHx8IG9iai5nZW9tZXRyeS5wYXJhbWV0ZXJzLnJhZGlhbFNlZ21lbnRzICE9PSBudW1TZWdtZW50cykge1xuICAgICAgICAgICAgICAgIGlmICghY3lsaW5kZXJHZW9tZXRyaWVzLmhhc093blByb3BlcnR5KGxpbmtXaWR0aCkpIHtcbiAgICAgICAgICAgICAgICAgIHZhciBnZW9tZXRyeSA9IG5ldyB0aHJlZSQxLkN5bGluZGVyR2VvbWV0cnkociwgciwgMSwgbnVtU2VnbWVudHMsIDEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgIGdlb21ldHJ5W2FwcGx5TWF0cml4NEZuXShuZXcgdGhyZWUkMS5NYXRyaXg0KCkubWFrZVRyYW5zbGF0aW9uKDAsIDEgLyAyLCAwKSk7XG4gICAgICAgICAgICAgICAgICBnZW9tZXRyeVthcHBseU1hdHJpeDRGbl0obmV3IHRocmVlJDEuTWF0cml4NCgpLm1ha2VSb3RhdGlvblgoTWF0aC5QSSAvIDIpKTtcbiAgICAgICAgICAgICAgICAgIGN5bGluZGVyR2VvbWV0cmllc1tsaW5rV2lkdGhdID0gZ2VvbWV0cnk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iai5nZW9tZXRyeS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgb2JqLmdlb21ldHJ5ID0gY3lsaW5kZXJHZW9tZXRyaWVzW2xpbmtXaWR0aF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdXN0b21NYXRlcmlhbCA9IGN1c3RvbU1hdGVyaWFsQWNjZXNzb3IobGluayk7XG4gICAgICAgICAgICBpZiAoY3VzdG9tTWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgb2JqLm1hdGVyaWFsID0gY3VzdG9tTWF0ZXJpYWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgY29sb3IgPSBfY29sb3JBY2Nlc3NvcihsaW5rKTtcbiAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsQ29sb3IgPSBuZXcgdGhyZWUkMS5Db2xvcihjb2xvclN0cjJIZXgoY29sb3IgfHwgJyNmMGYwZjAnKSk7XG4gICAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gc3RhdGUubGlua09wYWNpdHkgKiBjb2xvckFscGhhKGNvbG9yKTtcbiAgICAgICAgICAgICAgdmFyIG1hdGVyaWFsVHlwZSA9IHVzZUN5bGluZGVyID8gJ01lc2hMYW1iZXJ0TWF0ZXJpYWwnIDogJ0xpbmVCYXNpY01hdGVyaWFsJztcbiAgICAgICAgICAgICAgaWYgKG9iai5tYXRlcmlhbC50eXBlICE9PSBtYXRlcmlhbFR5cGUgfHwgIW9iai5tYXRlcmlhbC5jb2xvci5lcXVhbHMobWF0ZXJpYWxDb2xvcikgfHwgb2JqLm1hdGVyaWFsLm9wYWNpdHkgIT09IG9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGluZU1hdGVyaWFscyA9IHVzZUN5bGluZGVyID8gbGFtYmVydExpbmVNYXRlcmlhbHMgOiBiYXNpY0xpbmVNYXRlcmlhbHM7XG4gICAgICAgICAgICAgICAgaWYgKCFsaW5lTWF0ZXJpYWxzLmhhc093blByb3BlcnR5KGNvbG9yKSkge1xuICAgICAgICAgICAgICAgICAgbGluZU1hdGVyaWFsc1tjb2xvcl0gPSBuZXcgdGhyZWUkMVttYXRlcmlhbFR5cGVdKHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IG1hdGVyaWFsQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zcGFyZW50OiBvcGFjaXR5IDwgMSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgZGVwdGhXcml0ZTogb3BhY2l0eSA+PSAxIC8vIFByZXZlbnQgdHJhbnNwYXJlbmN5IGlzc3Vlc1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9iai5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgb2JqLm1hdGVyaWFsID0gbGluZU1hdGVyaWFsc1tjb2xvcl07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBBcnJvd3MgZGlnZXN0IGN5Y2xlXG4gICAgICBpZiAoc3RhdGUubGlua0RpcmVjdGlvbmFsQXJyb3dMZW5ndGggfHwgY2hhbmdlZFByb3BzLmhhc093blByb3BlcnR5KCdsaW5rRGlyZWN0aW9uYWxBcnJvd0xlbmd0aCcpKSB7XG4gICAgICAgIHZhciBhcnJvd0xlbmd0aEFjY2Vzc29yID0gYWNjZXNzb3JGbihzdGF0ZS5saW5rRGlyZWN0aW9uYWxBcnJvd0xlbmd0aCk7XG4gICAgICAgIHZhciBhcnJvd0NvbG9yQWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLmxpbmtEaXJlY3Rpb25hbEFycm93Q29sb3IpO1xuICAgICAgICB0aHJlZURpZ2VzdCh2aXNpYmxlTGlua3MuZmlsdGVyKGFycm93TGVuZ3RoQWNjZXNzb3IpLCBzdGF0ZS5ncmFwaFNjZW5lLCB7XG4gICAgICAgICAgb2JqQmluZEF0dHI6ICdfX2Fycm93T2JqJyxcbiAgICAgICAgICBvYmpGaWx0ZXI6IGZ1bmN0aW9uIG9iakZpbHRlcihvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouX19saW5rVGhyZWVPYmpUeXBlID09PSAnYXJyb3cnO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY3JlYXRlT2JqOiBmdW5jdGlvbiBjcmVhdGVPYmooKSB7XG4gICAgICAgICAgICB2YXIgb2JqID0gbmV3IHRocmVlJDEuTWVzaCh1bmRlZmluZWQsIG5ldyB0aHJlZSQxLk1lc2hMYW1iZXJ0TWF0ZXJpYWwoe1xuICAgICAgICAgICAgICB0cmFuc3BhcmVudDogdHJ1ZVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgb2JqLl9fbGlua1RocmVlT2JqVHlwZSA9ICdhcnJvdyc7IC8vIEFkZCBvYmplY3QgdHlwZVxuXG4gICAgICAgICAgICByZXR1cm4gb2JqO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdXBkYXRlT2JqOiBmdW5jdGlvbiB1cGRhdGVPYmoob2JqLCBsaW5rKSB7XG4gICAgICAgICAgICB2YXIgYXJyb3dMZW5ndGggPSBhcnJvd0xlbmd0aEFjY2Vzc29yKGxpbmspO1xuICAgICAgICAgICAgdmFyIG51bVNlZ21lbnRzID0gc3RhdGUubGlua0RpcmVjdGlvbmFsQXJyb3dSZXNvbHV0aW9uO1xuICAgICAgICAgICAgaWYgKCFvYmouZ2VvbWV0cnkudHlwZS5tYXRjaCgvXkNvbmUoQnVmZmVyKT9HZW9tZXRyeSQvKSB8fCBvYmouZ2VvbWV0cnkucGFyYW1ldGVycy5oZWlnaHQgIT09IGFycm93TGVuZ3RoIHx8IG9iai5nZW9tZXRyeS5wYXJhbWV0ZXJzLnJhZGlhbFNlZ21lbnRzICE9PSBudW1TZWdtZW50cykge1xuICAgICAgICAgICAgICB2YXIgY29uZUdlb21ldHJ5ID0gbmV3IHRocmVlJDEuQ29uZUdlb21ldHJ5KGFycm93TGVuZ3RoICogMC4yNSwgYXJyb3dMZW5ndGgsIG51bVNlZ21lbnRzKTtcbiAgICAgICAgICAgICAgLy8gQ29ycmVjdCBvcmllbnRhdGlvblxuICAgICAgICAgICAgICBjb25lR2VvbWV0cnkudHJhbnNsYXRlKDAsIGFycm93TGVuZ3RoIC8gMiwgMCk7XG4gICAgICAgICAgICAgIGNvbmVHZW9tZXRyeS5yb3RhdGVYKE1hdGguUEkgLyAyKTtcbiAgICAgICAgICAgICAgb2JqLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgb2JqLmdlb21ldHJ5ID0gY29uZUdlb21ldHJ5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGFycm93Q29sb3IgPSBhcnJvd0NvbG9yQWNjZXNzb3IobGluaykgfHwgX2NvbG9yQWNjZXNzb3IobGluaykgfHwgJyNmMGYwZjAnO1xuICAgICAgICAgICAgb2JqLm1hdGVyaWFsLmNvbG9yID0gbmV3IHRocmVlJDEuQ29sb3IoY29sb3JTdHIySGV4KGFycm93Q29sb3IpKTtcbiAgICAgICAgICAgIG9iai5tYXRlcmlhbC5vcGFjaXR5ID0gc3RhdGUubGlua09wYWNpdHkgKiAzICogY29sb3JBbHBoYShhcnJvd0NvbG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBQaG90b24gcGFydGljbGVzIGRpZ2VzdCBjeWNsZVxuICAgICAgaWYgKHN0YXRlLmxpbmtEaXJlY3Rpb25hbFBhcnRpY2xlcyB8fCBjaGFuZ2VkUHJvcHMuaGFzT3duUHJvcGVydHkoJ2xpbmtEaXJlY3Rpb25hbFBhcnRpY2xlcycpKSB7XG4gICAgICAgIHZhciBwYXJ0aWNsZXNBY2Nlc3NvciA9IGFjY2Vzc29yRm4oc3RhdGUubGlua0RpcmVjdGlvbmFsUGFydGljbGVzKTtcbiAgICAgICAgdmFyIHBhcnRpY2xlV2lkdGhBY2Nlc3NvciA9IGFjY2Vzc29yRm4oc3RhdGUubGlua0RpcmVjdGlvbmFsUGFydGljbGVXaWR0aCk7XG4gICAgICAgIHZhciBwYXJ0aWNsZUNvbG9yQWNjZXNzb3IgPSBhY2Nlc3NvckZuKHN0YXRlLmxpbmtEaXJlY3Rpb25hbFBhcnRpY2xlQ29sb3IpO1xuICAgICAgICB2YXIgcGFydGljbGVNYXRlcmlhbHMgPSB7fTsgLy8gaW5kZXhlZCBieSBsaW5rIGNvbG9yXG4gICAgICAgIHZhciBwYXJ0aWNsZUdlb21ldHJpZXMgPSB7fTsgLy8gaW5kZXhlZCBieSBwYXJ0aWNsZSB3aWR0aFxuXG4gICAgICAgIHRocmVlRGlnZXN0KHZpc2libGVMaW5rcy5maWx0ZXIocGFydGljbGVzQWNjZXNzb3IpLCBzdGF0ZS5ncmFwaFNjZW5lLCB7XG4gICAgICAgICAgb2JqQmluZEF0dHI6ICdfX3Bob3RvbnNPYmonLFxuICAgICAgICAgIG9iakZpbHRlcjogZnVuY3Rpb24gb2JqRmlsdGVyKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5fX2xpbmtUaHJlZU9ialR5cGUgPT09ICdwaG90b25zJztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNyZWF0ZU9iajogZnVuY3Rpb24gY3JlYXRlT2JqKCkge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG5ldyB0aHJlZSQxLkdyb3VwKCk7XG4gICAgICAgICAgICBvYmouX19saW5rVGhyZWVPYmpUeXBlID0gJ3Bob3RvbnMnOyAvLyBBZGQgb2JqZWN0IHR5cGVcblxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHVwZGF0ZU9iajogZnVuY3Rpb24gdXBkYXRlT2JqKG9iaiwgbGluaykge1xuICAgICAgICAgICAgdmFyIG51bVBob3RvbnMgPSBNYXRoLnJvdW5kKE1hdGguYWJzKHBhcnRpY2xlc0FjY2Vzc29yKGxpbmspKSk7XG4gICAgICAgICAgICB2YXIgY3VyUGhvdG9uID0gISFvYmouY2hpbGRyZW4ubGVuZ3RoICYmIG9iai5jaGlsZHJlblswXTtcbiAgICAgICAgICAgIHZhciBwaG90b25SID0gTWF0aC5jZWlsKHBhcnRpY2xlV2lkdGhBY2Nlc3NvcihsaW5rKSAqIDEwKSAvIDEwIC8gMjtcbiAgICAgICAgICAgIHZhciBudW1TZWdtZW50cyA9IHN0YXRlLmxpbmtEaXJlY3Rpb25hbFBhcnRpY2xlUmVzb2x1dGlvbjtcbiAgICAgICAgICAgIHZhciBwYXJ0aWNsZUdlb21ldHJ5O1xuICAgICAgICAgICAgaWYgKGN1clBob3RvbiAmJiBjdXJQaG90b24uZ2VvbWV0cnkucGFyYW1ldGVycy5yYWRpdXMgPT09IHBob3RvblIgJiYgY3VyUGhvdG9uLmdlb21ldHJ5LnBhcmFtZXRlcnMud2lkdGhTZWdtZW50cyA9PT0gbnVtU2VnbWVudHMpIHtcbiAgICAgICAgICAgICAgcGFydGljbGVHZW9tZXRyeSA9IGN1clBob3Rvbi5nZW9tZXRyeTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICghcGFydGljbGVHZW9tZXRyaWVzLmhhc093blByb3BlcnR5KHBob3RvblIpKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGVHZW9tZXRyaWVzW3Bob3RvblJdID0gbmV3IHRocmVlJDEuU3BoZXJlR2VvbWV0cnkocGhvdG9uUiwgbnVtU2VnbWVudHMsIG51bVNlZ21lbnRzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJ0aWNsZUdlb21ldHJ5ID0gcGFydGljbGVHZW9tZXRyaWVzW3Bob3RvblJdO1xuICAgICAgICAgICAgICBjdXJQaG90b24gJiYgY3VyUGhvdG9uLmdlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwaG90b25Db2xvciA9IHBhcnRpY2xlQ29sb3JBY2Nlc3NvcihsaW5rKSB8fCBfY29sb3JBY2Nlc3NvcihsaW5rKSB8fCAnI2YwZjBmMCc7XG4gICAgICAgICAgICB2YXIgbWF0ZXJpYWxDb2xvciA9IG5ldyB0aHJlZSQxLkNvbG9yKGNvbG9yU3RyMkhleChwaG90b25Db2xvcikpO1xuICAgICAgICAgICAgdmFyIG9wYWNpdHkgPSBzdGF0ZS5saW5rT3BhY2l0eSAqIDM7XG4gICAgICAgICAgICB2YXIgcGFydGljbGVNYXRlcmlhbDtcbiAgICAgICAgICAgIGlmIChjdXJQaG90b24gJiYgY3VyUGhvdG9uLm1hdGVyaWFsLmNvbG9yLmVxdWFscyhtYXRlcmlhbENvbG9yKSAmJiBjdXJQaG90b24ubWF0ZXJpYWwub3BhY2l0eSA9PT0gb3BhY2l0eSkge1xuICAgICAgICAgICAgICBwYXJ0aWNsZU1hdGVyaWFsID0gY3VyUGhvdG9uLm1hdGVyaWFsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFwYXJ0aWNsZU1hdGVyaWFscy5oYXNPd25Qcm9wZXJ0eShwaG90b25Db2xvcikpIHtcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZU1hdGVyaWFsc1twaG90b25Db2xvcl0gPSBuZXcgdGhyZWUkMS5NZXNoTGFtYmVydE1hdGVyaWFsKHtcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiBtYXRlcmlhbENvbG9yLFxuICAgICAgICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcGFydGljbGVNYXRlcmlhbCA9IHBhcnRpY2xlTWF0ZXJpYWxzW3Bob3RvbkNvbG9yXTtcbiAgICAgICAgICAgICAgY3VyUGhvdG9uICYmIGN1clBob3Rvbi5tYXRlcmlhbC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGRpZ2VzdCBjeWNsZSBmb3IgZWFjaCBwaG90b25cbiAgICAgICAgICAgIHRocmVlRGlnZXN0KF90b0NvbnN1bWFibGVBcnJheShuZXcgQXJyYXkobnVtUGhvdG9ucykpLm1hcChmdW5jdGlvbiAoXywgaWR4KSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaWR4OiBpZHhcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pLCBvYmosIHtcbiAgICAgICAgICAgICAgaWRBY2Nlc3NvcjogZnVuY3Rpb24gaWRBY2Nlc3NvcihkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQuaWR4O1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjcmVhdGVPYmo6IGZ1bmN0aW9uIGNyZWF0ZU9iaigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRocmVlJDEuTWVzaChwYXJ0aWNsZUdlb21ldHJ5LCBwYXJ0aWNsZU1hdGVyaWFsKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdXBkYXRlT2JqOiBmdW5jdGlvbiB1cGRhdGVPYmoob2JqKSB7XG4gICAgICAgICAgICAgICAgb2JqLmdlb21ldHJ5ID0gcGFydGljbGVHZW9tZXRyeTtcbiAgICAgICAgICAgICAgICBvYmoubWF0ZXJpYWwgPSBwYXJ0aWNsZU1hdGVyaWFsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzdGF0ZS5fZmx1c2hPYmplY3RzID0gZmFsc2U7IC8vIHJlc2V0IG9iamVjdHMgcmVmcmVzaCBmbGFnXG5cbiAgICAvLyBzaW11bGF0aW9uIGVuZ2luZVxuICAgIGlmIChoYXNBbnlQcm9wQ2hhbmdlZChbJ2dyYXBoRGF0YScsICdub2RlSWQnLCAnbGlua1NvdXJjZScsICdsaW5rVGFyZ2V0JywgJ251bURpbWVuc2lvbnMnLCAnZm9yY2VFbmdpbmUnLCAnZGFnTW9kZScsICdkYWdOb2RlRmlsdGVyJywgJ2RhZ0xldmVsRGlzdGFuY2UnXSkpIHtcbiAgICAgIHN0YXRlLmVuZ2luZVJ1bm5pbmcgPSBmYWxzZTsgLy8gUGF1c2Ugc2ltdWxhdGlvblxuXG4gICAgICAvLyBwYXJzZSBsaW5rc1xuICAgICAgc3RhdGUuZ3JhcGhEYXRhLmxpbmtzLmZvckVhY2goZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgbGluay5zb3VyY2UgPSBsaW5rW3N0YXRlLmxpbmtTb3VyY2VdO1xuICAgICAgICBsaW5rLnRhcmdldCA9IGxpbmtbc3RhdGUubGlua1RhcmdldF07XG4gICAgICB9KTtcblxuICAgICAgLy8gRmVlZCBkYXRhIHRvIGZvcmNlLWRpcmVjdGVkIGxheW91dFxuICAgICAgdmFyIGlzRDNTaW0gPSBzdGF0ZS5mb3JjZUVuZ2luZSAhPT0gJ25ncmFwaCc7XG4gICAgICB2YXIgbGF5b3V0O1xuICAgICAgaWYgKGlzRDNTaW0pIHtcbiAgICAgICAgLy8gRDMtZm9yY2VcbiAgICAgICAgKGxheW91dCA9IHN0YXRlLmQzRm9yY2VMYXlvdXQpLnN0b3AoKS5hbHBoYSgxKSAvLyByZS1oZWF0IHRoZSBzaW11bGF0aW9uXG4gICAgICAgIC5udW1EaW1lbnNpb25zKHN0YXRlLm51bURpbWVuc2lvbnMpLm5vZGVzKHN0YXRlLmdyYXBoRGF0YS5ub2Rlcyk7XG5cbiAgICAgICAgLy8gYWRkIGxpbmtzIChpZiBsaW5rIGZvcmNlIGlzIHN0aWxsIGFjdGl2ZSlcbiAgICAgICAgdmFyIGxpbmtGb3JjZSA9IHN0YXRlLmQzRm9yY2VMYXlvdXQuZm9yY2UoJ2xpbmsnKTtcbiAgICAgICAgaWYgKGxpbmtGb3JjZSkge1xuICAgICAgICAgIGxpbmtGb3JjZS5pZChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRbc3RhdGUubm9kZUlkXTtcbiAgICAgICAgICB9KS5saW5rcyhzdGF0ZS5ncmFwaERhdGEubGlua3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V0dXAgZGFnIGZvcmNlIGNvbnN0cmFpbnRzXG4gICAgICAgIHZhciBub2RlRGVwdGhzID0gc3RhdGUuZGFnTW9kZSAmJiBnZXREYWdEZXB0aHMoc3RhdGUuZ3JhcGhEYXRhLCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIHJldHVybiBub2RlW3N0YXRlLm5vZGVJZF07XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBub2RlRmlsdGVyOiBzdGF0ZS5kYWdOb2RlRmlsdGVyLFxuICAgICAgICAgIG9uTG9vcEVycm9yOiBzdGF0ZS5vbkRhZ0Vycm9yIHx8IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG1heERlcHRoID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KE9iamVjdC52YWx1ZXMobm9kZURlcHRocyB8fCBbXSkpKTtcbiAgICAgICAgdmFyIGRhZ0xldmVsRGlzdGFuY2UgPSBzdGF0ZS5kYWdMZXZlbERpc3RhbmNlIHx8IHN0YXRlLmdyYXBoRGF0YS5ub2Rlcy5sZW5ndGggLyAobWF4RGVwdGggfHwgMSkgKiBEQUdfTEVWRUxfTk9ERV9SQVRJTyAqIChbJ3JhZGlhbGluJywgJ3JhZGlhbG91dCddLmluZGV4T2Yoc3RhdGUuZGFnTW9kZSkgIT09IC0xID8gMC43IDogMSk7XG5cbiAgICAgICAgLy8gRml4IG5vZGVzIHRvIHgseSx6IGZvciBkYWcgbW9kZVxuICAgICAgICBpZiAoc3RhdGUuZGFnTW9kZSkge1xuICAgICAgICAgIHZhciBnZXRGRm4gPSBmdW5jdGlvbiBnZXRGRm4oZml4LCBpbnZlcnQpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gIWZpeCA/IHVuZGVmaW5lZCA6IChub2RlRGVwdGhzW25vZGVbc3RhdGUubm9kZUlkXV0gLSBtYXhEZXB0aCAvIDIpICogZGFnTGV2ZWxEaXN0YW5jZSAqIChpbnZlcnQgPyAtMSA6IDEpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHZhciBmeEZuID0gZ2V0RkZuKFsnbHInLCAncmwnXS5pbmRleE9mKHN0YXRlLmRhZ01vZGUpICE9PSAtMSwgc3RhdGUuZGFnTW9kZSA9PT0gJ3JsJyk7XG4gICAgICAgICAgdmFyIGZ5Rm4gPSBnZXRGRm4oWyd0ZCcsICdidSddLmluZGV4T2Yoc3RhdGUuZGFnTW9kZSkgIT09IC0xLCBzdGF0ZS5kYWdNb2RlID09PSAndGQnKTtcbiAgICAgICAgICB2YXIgZnpGbiA9IGdldEZGbihbJ3ppbicsICd6b3V0J10uaW5kZXhPZihzdGF0ZS5kYWdNb2RlKSAhPT0gLTEsIHN0YXRlLmRhZ01vZGUgPT09ICd6b3V0Jyk7XG4gICAgICAgICAgc3RhdGUuZ3JhcGhEYXRhLm5vZGVzLmZpbHRlcihzdGF0ZS5kYWdOb2RlRmlsdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICBub2RlLmZ4ID0gZnhGbihub2RlKTtcbiAgICAgICAgICAgIG5vZGUuZnkgPSBmeUZuKG5vZGUpO1xuICAgICAgICAgICAgbm9kZS5meiA9IGZ6Rm4obm9kZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVc2UgcmFkaWFsIGZvcmNlIGZvciByYWRpYWwgZGFnc1xuICAgICAgICBzdGF0ZS5kM0ZvcmNlTGF5b3V0LmZvcmNlKCdkYWdSYWRpYWwnLCBbJ3JhZGlhbGluJywgJ3JhZGlhbG91dCddLmluZGV4T2Yoc3RhdGUuZGFnTW9kZSkgIT09IC0xID8gZm9yY2VSYWRpYWwoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICB2YXIgbm9kZURlcHRoID0gbm9kZURlcHRoc1tub2RlW3N0YXRlLm5vZGVJZF1dIHx8IC0xO1xuICAgICAgICAgIHJldHVybiAoc3RhdGUuZGFnTW9kZSA9PT0gJ3JhZGlhbGluJyA/IG1heERlcHRoIC0gbm9kZURlcHRoIDogbm9kZURlcHRoKSAqIGRhZ0xldmVsRGlzdGFuY2U7XG4gICAgICAgIH0pLnN0cmVuZ3RoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLmRhZ05vZGVGaWx0ZXIobm9kZSkgPyAxIDogMDtcbiAgICAgICAgfSkgOiBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5ncmFwaFxuICAgICAgICB2YXIgX2dyYXBoID0gbmdyYXBoLmdyYXBoKCk7XG4gICAgICAgIHN0YXRlLmdyYXBoRGF0YS5ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgX2dyYXBoLmFkZE5vZGUobm9kZVtzdGF0ZS5ub2RlSWRdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXRlLmdyYXBoRGF0YS5saW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5rKSB7XG4gICAgICAgICAgX2dyYXBoLmFkZExpbmsobGluay5zb3VyY2UsIGxpbmsudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dCA9IG5ncmFwaC5mb3JjZWxheW91dChfZ3JhcGgsIF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgICBkaW1lbnNpb25zOiBzdGF0ZS5udW1EaW1lbnNpb25zXG4gICAgICAgIH0sIHN0YXRlLm5ncmFwaFBoeXNpY3MpKTtcbiAgICAgICAgbGF5b3V0LmdyYXBoID0gX2dyYXBoOyAvLyBBdHRhY2ggZ3JhcGggcmVmZXJlbmNlIHRvIGxheW91dFxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGF0ZS53YXJtdXBUaWNrcyAmJiAhKGlzRDNTaW0gJiYgc3RhdGUuZDNBbHBoYU1pbiA+IDAgJiYgc3RhdGUuZDNGb3JjZUxheW91dC5hbHBoYSgpIDwgc3RhdGUuZDNBbHBoYU1pbik7IGkrKykge1xuICAgICAgICBsYXlvdXRbaXNEM1NpbSA/IFwidGlja1wiIDogXCJzdGVwXCJdKCk7XG4gICAgICB9IC8vIEluaXRpYWwgdGlja3MgYmVmb3JlIHN0YXJ0aW5nIHRvIHJlbmRlclxuXG4gICAgICBzdGF0ZS5sYXlvdXQgPSBsYXlvdXQ7XG4gICAgICB0aGlzLnJlc2V0Q291bnRkb3duKCk7XG4gICAgfVxuICAgIHN0YXRlLmVuZ2luZVJ1bm5pbmcgPSB0cnVlOyAvLyByZXN1bWUgc2ltdWxhdGlvblxuXG4gICAgc3RhdGUub25GaW5pc2hVcGRhdGUoKTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGZyb21LYXBzdWxlIChrYXBzdWxlKSB7XG4gIHZhciBiYXNlQ2xhc3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IE9iamVjdDtcbiAgdmFyIGluaXRLYXBzdWxlV2l0aFNlbGYgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICB2YXIgRnJvbUthcHN1bGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9iYXNlQ2xhc3MpIHtcbiAgICBfaW5oZXJpdHMoRnJvbUthcHN1bGUsIF9iYXNlQ2xhc3MpO1xuICAgIGZ1bmN0aW9uIEZyb21LYXBzdWxlKCkge1xuICAgICAgdmFyIF90aGlzO1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZyb21LYXBzdWxlKTtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgX3RoaXMgPSBfY2FsbFN1cGVyKHRoaXMsIEZyb21LYXBzdWxlLCBbXS5jb25jYXQoYXJncykpO1xuICAgICAgX3RoaXMuX19rYXBzdWxlSW5zdGFuY2UgPSBrYXBzdWxlKCkuYXBwbHkodm9pZCAwLCBbXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGluaXRLYXBzdWxlV2l0aFNlbGYgPyBbX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyldIDogW10pLCBhcmdzKSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlQ2xhc3MoRnJvbUthcHN1bGUpO1xuICB9KGJhc2VDbGFzcyk7IC8vIGF0dGFjaCBrYXBzdWxlIHByb3BzL21ldGhvZHMgdG8gY2xhc3MgcHJvdG90eXBlXG4gIE9iamVjdC5rZXlzKGthcHN1bGUoKSkuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBGcm9tS2Fwc3VsZS5wcm90b3R5cGVbbV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkX19rYXBzdWxlSW5zdGFuO1xuICAgICAgdmFyIHJldHVyblZhbCA9IChfdGhpcyRfX2thcHN1bGVJbnN0YW4gPSB0aGlzLl9fa2Fwc3VsZUluc3RhbmNlKVttXS5hcHBseShfdGhpcyRfX2thcHN1bGVJbnN0YW4sIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsID09PSB0aGlzLl9fa2Fwc3VsZUluc3RhbmNlID8gdGhpcyAvLyBjaGFpbiBiYXNlZCBvbiB0aGlzIGNsYXNzLCBub3QgdGhlIGthcHN1bGUgb2JqXG4gICAgICA6IHJldHVyblZhbDtcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIEZyb21LYXBzdWxlO1xufVxuXG52YXIgdGhyZWUgPSB3aW5kb3cuVEhSRUUgPyB3aW5kb3cuVEhSRUUgOiB7XG4gIEdyb3VwOiBHcm91cFxufTsgLy8gUHJlZmVyIGNvbnN1bXB0aW9uIGZyb20gZ2xvYmFsIFRIUkVFLCBpZiBleGlzdHNcbnZhciB0aHJlZUZvcmNlZ3JhcGggPSBmcm9tS2Fwc3VsZShGb3JjZUdyYXBoLCB0aHJlZS5Hcm91cCwgdHJ1ZSk7XG5cbmV4cG9ydCB7IHRocmVlRm9yY2VncmFwaCBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/three-forcegraph@1.41.13_three@0.163.0/node_modules/three-forcegraph/dist/three-forcegraph.mjs\n");

/***/ })

};
;