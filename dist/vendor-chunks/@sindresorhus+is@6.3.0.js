"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sindresorhus+is@6.3.0";
exports.ids = ["vendor-chunks/@sindresorhus+is@6.3.0"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/@sindresorhus+is@6.3.0/node_modules/@sindresorhus/is/dist/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sindresorhus+is@6.3.0/node_modules/@sindresorhus/is/dist/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   assertAll: () => (/* binding */ assertAll),\n/* harmony export */   assertAny: () => (/* binding */ assertAny),\n/* harmony export */   assertArray: () => (/* binding */ assertArray),\n/* harmony export */   assertArrayBuffer: () => (/* binding */ assertArrayBuffer),\n/* harmony export */   assertArrayLike: () => (/* binding */ assertArrayLike),\n/* harmony export */   assertAsyncFunction: () => (/* binding */ assertAsyncFunction),\n/* harmony export */   assertAsyncGenerator: () => (/* binding */ assertAsyncGenerator),\n/* harmony export */   assertAsyncGeneratorFunction: () => (/* binding */ assertAsyncGeneratorFunction),\n/* harmony export */   assertAsyncIterable: () => (/* binding */ assertAsyncIterable),\n/* harmony export */   assertBigInt64Array: () => (/* binding */ assertBigInt64Array),\n/* harmony export */   assertBigUint64Array: () => (/* binding */ assertBigUint64Array),\n/* harmony export */   assertBigint: () => (/* binding */ assertBigint),\n/* harmony export */   assertBlob: () => (/* binding */ assertBlob),\n/* harmony export */   assertBoolean: () => (/* binding */ assertBoolean),\n/* harmony export */   assertBoundFunction: () => (/* binding */ assertBoundFunction),\n/* harmony export */   assertBuffer: () => (/* binding */ assertBuffer),\n/* harmony export */   assertClass: () => (/* binding */ assertClass),\n/* harmony export */   assertDataView: () => (/* binding */ assertDataView),\n/* harmony export */   assertDate: () => (/* binding */ assertDate),\n/* harmony export */   assertDirectInstanceOf: () => (/* binding */ assertDirectInstanceOf),\n/* harmony export */   assertEmptyArray: () => (/* binding */ assertEmptyArray),\n/* harmony export */   assertEmptyMap: () => (/* binding */ assertEmptyMap),\n/* harmony export */   assertEmptyObject: () => (/* binding */ assertEmptyObject),\n/* harmony export */   assertEmptySet: () => (/* binding */ assertEmptySet),\n/* harmony export */   assertEmptyString: () => (/* binding */ assertEmptyString),\n/* harmony export */   assertEmptyStringOrWhitespace: () => (/* binding */ assertEmptyStringOrWhitespace),\n/* harmony export */   assertEnumCase: () => (/* binding */ assertEnumCase),\n/* harmony export */   assertError: () => (/* binding */ assertError),\n/* harmony export */   assertEvenInteger: () => (/* binding */ assertEvenInteger),\n/* harmony export */   assertFalsy: () => (/* binding */ assertFalsy),\n/* harmony export */   assertFloat32Array: () => (/* binding */ assertFloat32Array),\n/* harmony export */   assertFloat64Array: () => (/* binding */ assertFloat64Array),\n/* harmony export */   assertFormData: () => (/* binding */ assertFormData),\n/* harmony export */   assertFunction: () => (/* binding */ assertFunction),\n/* harmony export */   assertGenerator: () => (/* binding */ assertGenerator),\n/* harmony export */   assertGeneratorFunction: () => (/* binding */ assertGeneratorFunction),\n/* harmony export */   assertHtmlElement: () => (/* binding */ assertHtmlElement),\n/* harmony export */   assertInRange: () => (/* binding */ assertInRange),\n/* harmony export */   assertInfinite: () => (/* binding */ assertInfinite),\n/* harmony export */   assertInt16Array: () => (/* binding */ assertInt16Array),\n/* harmony export */   assertInt32Array: () => (/* binding */ assertInt32Array),\n/* harmony export */   assertInt8Array: () => (/* binding */ assertInt8Array),\n/* harmony export */   assertInteger: () => (/* binding */ assertInteger),\n/* harmony export */   assertIterable: () => (/* binding */ assertIterable),\n/* harmony export */   assertMap: () => (/* binding */ assertMap),\n/* harmony export */   assertNan: () => (/* binding */ assertNan),\n/* harmony export */   assertNativePromise: () => (/* binding */ assertNativePromise),\n/* harmony export */   assertNegativeNumber: () => (/* binding */ assertNegativeNumber),\n/* harmony export */   assertNodeStream: () => (/* binding */ assertNodeStream),\n/* harmony export */   assertNonEmptyArray: () => (/* binding */ assertNonEmptyArray),\n/* harmony export */   assertNonEmptyMap: () => (/* binding */ assertNonEmptyMap),\n/* harmony export */   assertNonEmptyObject: () => (/* binding */ assertNonEmptyObject),\n/* harmony export */   assertNonEmptySet: () => (/* binding */ assertNonEmptySet),\n/* harmony export */   assertNonEmptyString: () => (/* binding */ assertNonEmptyString),\n/* harmony export */   assertNonEmptyStringAndNotWhitespace: () => (/* binding */ assertNonEmptyStringAndNotWhitespace),\n/* harmony export */   assertNull: () => (/* binding */ assertNull),\n/* harmony export */   assertNullOrUndefined: () => (/* binding */ assertNullOrUndefined),\n/* harmony export */   assertNumber: () => (/* binding */ assertNumber),\n/* harmony export */   assertNumericString: () => (/* binding */ assertNumericString),\n/* harmony export */   assertObject: () => (/* binding */ assertObject),\n/* harmony export */   assertObservable: () => (/* binding */ assertObservable),\n/* harmony export */   assertOddInteger: () => (/* binding */ assertOddInteger),\n/* harmony export */   assertPlainObject: () => (/* binding */ assertPlainObject),\n/* harmony export */   assertPositiveNumber: () => (/* binding */ assertPositiveNumber),\n/* harmony export */   assertPrimitive: () => (/* binding */ assertPrimitive),\n/* harmony export */   assertPromise: () => (/* binding */ assertPromise),\n/* harmony export */   assertPropertyKey: () => (/* binding */ assertPropertyKey),\n/* harmony export */   assertRegExp: () => (/* binding */ assertRegExp),\n/* harmony export */   assertSafeInteger: () => (/* binding */ assertSafeInteger),\n/* harmony export */   assertSet: () => (/* binding */ assertSet),\n/* harmony export */   assertSharedArrayBuffer: () => (/* binding */ assertSharedArrayBuffer),\n/* harmony export */   assertString: () => (/* binding */ assertString),\n/* harmony export */   assertSymbol: () => (/* binding */ assertSymbol),\n/* harmony export */   assertTruthy: () => (/* binding */ assertTruthy),\n/* harmony export */   assertTupleLike: () => (/* binding */ assertTupleLike),\n/* harmony export */   assertTypedArray: () => (/* binding */ assertTypedArray),\n/* harmony export */   assertUint16Array: () => (/* binding */ assertUint16Array),\n/* harmony export */   assertUint32Array: () => (/* binding */ assertUint32Array),\n/* harmony export */   assertUint8Array: () => (/* binding */ assertUint8Array),\n/* harmony export */   assertUint8ClampedArray: () => (/* binding */ assertUint8ClampedArray),\n/* harmony export */   assertUndefined: () => (/* binding */ assertUndefined),\n/* harmony export */   assertUrlInstance: () => (/* binding */ assertUrlInstance),\n/* harmony export */   assertUrlSearchParams: () => (/* binding */ assertUrlSearchParams),\n/* harmony export */   assertUrlString: () => (/* binding */ assertUrlString),\n/* harmony export */   assertValidDate: () => (/* binding */ assertValidDate),\n/* harmony export */   assertValidLength: () => (/* binding */ assertValidLength),\n/* harmony export */   assertWeakMap: () => (/* binding */ assertWeakMap),\n/* harmony export */   assertWeakRef: () => (/* binding */ assertWeakRef),\n/* harmony export */   assertWeakSet: () => (/* binding */ assertWeakSet),\n/* harmony export */   assertWhitespaceString: () => (/* binding */ assertWhitespaceString),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isAll: () => (/* binding */ isAll),\n/* harmony export */   isAny: () => (/* binding */ isAny),\n/* harmony export */   isArray: () => (/* binding */ isArray),\n/* harmony export */   isArrayBuffer: () => (/* binding */ isArrayBuffer),\n/* harmony export */   isArrayLike: () => (/* binding */ isArrayLike),\n/* harmony export */   isAsyncFunction: () => (/* binding */ isAsyncFunction),\n/* harmony export */   isAsyncGenerator: () => (/* binding */ isAsyncGenerator),\n/* harmony export */   isAsyncGeneratorFunction: () => (/* binding */ isAsyncGeneratorFunction),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isBigInt64Array: () => (/* binding */ isBigInt64Array),\n/* harmony export */   isBigUint64Array: () => (/* binding */ isBigUint64Array),\n/* harmony export */   isBigint: () => (/* binding */ isBigint),\n/* harmony export */   isBlob: () => (/* binding */ isBlob),\n/* harmony export */   isBoolean: () => (/* binding */ isBoolean),\n/* harmony export */   isBoundFunction: () => (/* binding */ isBoundFunction),\n/* harmony export */   isBuffer: () => (/* binding */ isBuffer),\n/* harmony export */   isClass: () => (/* binding */ isClass),\n/* harmony export */   isDataView: () => (/* binding */ isDataView),\n/* harmony export */   isDate: () => (/* binding */ isDate),\n/* harmony export */   isDirectInstanceOf: () => (/* binding */ isDirectInstanceOf),\n/* harmony export */   isEmptyArray: () => (/* binding */ isEmptyArray),\n/* harmony export */   isEmptyMap: () => (/* binding */ isEmptyMap),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isEmptySet: () => (/* binding */ isEmptySet),\n/* harmony export */   isEmptyString: () => (/* binding */ isEmptyString),\n/* harmony export */   isEmptyStringOrWhitespace: () => (/* binding */ isEmptyStringOrWhitespace),\n/* harmony export */   isEnumCase: () => (/* binding */ isEnumCase),\n/* harmony export */   isError: () => (/* binding */ isError),\n/* harmony export */   isEvenInteger: () => (/* binding */ isEvenInteger),\n/* harmony export */   isFalsy: () => (/* binding */ isFalsy),\n/* harmony export */   isFloat32Array: () => (/* binding */ isFloat32Array),\n/* harmony export */   isFloat64Array: () => (/* binding */ isFloat64Array),\n/* harmony export */   isFormData: () => (/* binding */ isFormData),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isGenerator: () => (/* binding */ isGenerator),\n/* harmony export */   isGeneratorFunction: () => (/* binding */ isGeneratorFunction),\n/* harmony export */   isHtmlElement: () => (/* binding */ isHtmlElement),\n/* harmony export */   isInRange: () => (/* binding */ isInRange),\n/* harmony export */   isInfinite: () => (/* binding */ isInfinite),\n/* harmony export */   isInt16Array: () => (/* binding */ isInt16Array),\n/* harmony export */   isInt32Array: () => (/* binding */ isInt32Array),\n/* harmony export */   isInt8Array: () => (/* binding */ isInt8Array),\n/* harmony export */   isInteger: () => (/* binding */ isInteger),\n/* harmony export */   isIterable: () => (/* binding */ isIterable),\n/* harmony export */   isMap: () => (/* binding */ isMap),\n/* harmony export */   isNan: () => (/* binding */ isNan),\n/* harmony export */   isNativePromise: () => (/* binding */ isNativePromise),\n/* harmony export */   isNegativeNumber: () => (/* binding */ isNegativeNumber),\n/* harmony export */   isNodeStream: () => (/* binding */ isNodeStream),\n/* harmony export */   isNonEmptyArray: () => (/* binding */ isNonEmptyArray),\n/* harmony export */   isNonEmptyMap: () => (/* binding */ isNonEmptyMap),\n/* harmony export */   isNonEmptyObject: () => (/* binding */ isNonEmptyObject),\n/* harmony export */   isNonEmptySet: () => (/* binding */ isNonEmptySet),\n/* harmony export */   isNonEmptyString: () => (/* binding */ isNonEmptyString),\n/* harmony export */   isNonEmptyStringAndNotWhitespace: () => (/* binding */ isNonEmptyStringAndNotWhitespace),\n/* harmony export */   isNull: () => (/* binding */ isNull),\n/* harmony export */   isNullOrUndefined: () => (/* binding */ isNullOrUndefined),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isNumericString: () => (/* binding */ isNumericString),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   isOddInteger: () => (/* binding */ isOddInteger),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isPositiveNumber: () => (/* binding */ isPositiveNumber),\n/* harmony export */   isPrimitive: () => (/* binding */ isPrimitive),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   isPropertyKey: () => (/* binding */ isPropertyKey),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isSafeInteger: () => (/* binding */ isSafeInteger),\n/* harmony export */   isSet: () => (/* binding */ isSet),\n/* harmony export */   isSharedArrayBuffer: () => (/* binding */ isSharedArrayBuffer),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isSymbol: () => (/* binding */ isSymbol),\n/* harmony export */   isTruthy: () => (/* binding */ isTruthy),\n/* harmony export */   isTupleLike: () => (/* binding */ isTupleLike),\n/* harmony export */   isTypedArray: () => (/* binding */ isTypedArray),\n/* harmony export */   isUint16Array: () => (/* binding */ isUint16Array),\n/* harmony export */   isUint32Array: () => (/* binding */ isUint32Array),\n/* harmony export */   isUint8Array: () => (/* binding */ isUint8Array),\n/* harmony export */   isUint8ClampedArray: () => (/* binding */ isUint8ClampedArray),\n/* harmony export */   isUndefined: () => (/* binding */ isUndefined),\n/* harmony export */   isUrlInstance: () => (/* binding */ isUrlInstance),\n/* harmony export */   isUrlSearchParams: () => (/* binding */ isUrlSearchParams),\n/* harmony export */   isUrlString: () => (/* binding */ isUrlString),\n/* harmony export */   isValidDate: () => (/* binding */ isValidDate),\n/* harmony export */   isValidLength: () => (/* binding */ isValidLength),\n/* harmony export */   isWeakMap: () => (/* binding */ isWeakMap),\n/* harmony export */   isWeakRef: () => (/* binding */ isWeakRef),\n/* harmony export */   isWeakSet: () => (/* binding */ isWeakSet),\n/* harmony export */   isWhitespaceString: () => (/* binding */ isWhitespaceString)\n/* harmony export */ });\nconst typedArrayTypeNames = [\n    'Int8Array',\n    'Uint8Array',\n    'Uint8ClampedArray',\n    'Int16Array',\n    'Uint16Array',\n    'Int32Array',\n    'Uint32Array',\n    'Float32Array',\n    'Float64Array',\n    'BigInt64Array',\n    'BigUint64Array',\n];\nfunction isTypedArrayName(name) {\n    return typedArrayTypeNames.includes(name);\n}\nconst objectTypeNames = [\n    'Function',\n    'Generator',\n    'AsyncGenerator',\n    'GeneratorFunction',\n    'AsyncGeneratorFunction',\n    'AsyncFunction',\n    'Observable',\n    'Array',\n    'Buffer',\n    'Blob',\n    'Object',\n    'RegExp',\n    'Date',\n    'Error',\n    'Map',\n    'Set',\n    'WeakMap',\n    'WeakSet',\n    'WeakRef',\n    'ArrayBuffer',\n    'SharedArrayBuffer',\n    'DataView',\n    'Promise',\n    'URL',\n    'FormData',\n    'URLSearchParams',\n    'HTMLElement',\n    'NaN',\n    ...typedArrayTypeNames,\n];\nfunction isObjectTypeName(name) {\n    return objectTypeNames.includes(name);\n}\nconst primitiveTypeNames = [\n    'null',\n    'undefined',\n    'string',\n    'number',\n    'bigint',\n    'boolean',\n    'symbol',\n];\nfunction isPrimitiveTypeName(name) {\n    return primitiveTypeNames.includes(name);\n}\nconst assertionTypeDescriptions = [\n    'positive number',\n    'negative number',\n    'Class',\n    'string with a number',\n    'null or undefined',\n    'Iterable',\n    'AsyncIterable',\n    'native Promise',\n    'EnumCase',\n    'string with a URL',\n    'truthy',\n    'falsy',\n    'primitive',\n    'integer',\n    'plain object',\n    'TypedArray',\n    'array-like',\n    'tuple-like',\n    'Node.js Stream',\n    'infinite number',\n    'empty array',\n    'non-empty array',\n    'empty string',\n    'empty string or whitespace',\n    'non-empty string',\n    'non-empty string and not whitespace',\n    'empty object',\n    'non-empty object',\n    'empty set',\n    'non-empty set',\n    'empty map',\n    'non-empty map',\n    'PropertyKey',\n    'even integer',\n    'odd integer',\n    'T',\n    'in range',\n    'predicate returns truthy for any value',\n    'predicate returns truthy for all values',\n    'valid Date',\n    'valid length',\n    'whitespace string',\n    ...objectTypeNames,\n    ...primitiveTypeNames,\n];\nconst getObjectType = (value) => {\n    const objectTypeName = Object.prototype.toString.call(value).slice(8, -1);\n    if (/HTML\\w+Element/.test(objectTypeName) && isHtmlElement(value)) {\n        return 'HTMLElement';\n    }\n    if (isObjectTypeName(objectTypeName)) {\n        return objectTypeName;\n    }\n    return undefined;\n};\nfunction detect(value) {\n    if (value === null) {\n        return 'null';\n    }\n    switch (typeof value) {\n        case 'undefined': {\n            return 'undefined';\n        }\n        case 'string': {\n            return 'string';\n        }\n        case 'number': {\n            return Number.isNaN(value) ? 'NaN' : 'number';\n        }\n        case 'boolean': {\n            return 'boolean';\n        }\n        case 'function': {\n            return 'Function';\n        }\n        case 'bigint': {\n            return 'bigint';\n        }\n        case 'symbol': {\n            return 'symbol';\n        }\n        default:\n    }\n    if (isObservable(value)) {\n        return 'Observable';\n    }\n    if (isArray(value)) {\n        return 'Array';\n    }\n    if (isBuffer(value)) {\n        return 'Buffer';\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return 'Object';\n}\nfunction hasPromiseApi(value) {\n    return isFunction(value?.then) && isFunction(value?.catch);\n}\nconst is = Object.assign(detect, {\n    all: isAll,\n    any: isAny,\n    array: isArray,\n    arrayBuffer: isArrayBuffer,\n    arrayLike: isArrayLike,\n    asyncFunction: isAsyncFunction,\n    asyncGenerator: isAsyncGenerator,\n    asyncGeneratorFunction: isAsyncGeneratorFunction,\n    asyncIterable: isAsyncIterable,\n    bigint: isBigint,\n    bigInt64Array: isBigInt64Array,\n    bigUint64Array: isBigUint64Array,\n    blob: isBlob,\n    boolean: isBoolean,\n    boundFunction: isBoundFunction,\n    buffer: isBuffer,\n    class: isClass,\n    /** @deprecated Renamed to `class`. */\n    class_: isClass,\n    dataView: isDataView,\n    date: isDate,\n    detect,\n    directInstanceOf: isDirectInstanceOf,\n    /** @deprecated Renamed to `htmlElement` */\n    domElement: isHtmlElement,\n    emptyArray: isEmptyArray,\n    emptyMap: isEmptyMap,\n    emptyObject: isEmptyObject,\n    emptySet: isEmptySet,\n    emptyString: isEmptyString,\n    emptyStringOrWhitespace: isEmptyStringOrWhitespace,\n    enumCase: isEnumCase,\n    error: isError,\n    evenInteger: isEvenInteger,\n    falsy: isFalsy,\n    float32Array: isFloat32Array,\n    float64Array: isFloat64Array,\n    formData: isFormData,\n    function: isFunction,\n    /** @deprecated Renamed to `function`. */\n    function_: isFunction,\n    generator: isGenerator,\n    generatorFunction: isGeneratorFunction,\n    htmlElement: isHtmlElement,\n    infinite: isInfinite,\n    inRange: isInRange,\n    int16Array: isInt16Array,\n    int32Array: isInt32Array,\n    int8Array: isInt8Array,\n    integer: isInteger,\n    iterable: isIterable,\n    map: isMap,\n    nan: isNan,\n    nativePromise: isNativePromise,\n    negativeNumber: isNegativeNumber,\n    nodeStream: isNodeStream,\n    nonEmptyArray: isNonEmptyArray,\n    nonEmptyMap: isNonEmptyMap,\n    nonEmptyObject: isNonEmptyObject,\n    nonEmptySet: isNonEmptySet,\n    nonEmptyString: isNonEmptyString,\n    nonEmptyStringAndNotWhitespace: isNonEmptyStringAndNotWhitespace,\n    null: isNull,\n    /** @deprecated Renamed to `null`. */\n    null_: isNull,\n    nullOrUndefined: isNullOrUndefined,\n    number: isNumber,\n    numericString: isNumericString,\n    object: isObject,\n    observable: isObservable,\n    oddInteger: isOddInteger,\n    plainObject: isPlainObject,\n    positiveNumber: isPositiveNumber,\n    primitive: isPrimitive,\n    promise: isPromise,\n    propertyKey: isPropertyKey,\n    regExp: isRegExp,\n    safeInteger: isSafeInteger,\n    set: isSet,\n    sharedArrayBuffer: isSharedArrayBuffer,\n    string: isString,\n    symbol: isSymbol,\n    truthy: isTruthy,\n    tupleLike: isTupleLike,\n    typedArray: isTypedArray,\n    uint16Array: isUint16Array,\n    uint32Array: isUint32Array,\n    uint8Array: isUint8Array,\n    uint8ClampedArray: isUint8ClampedArray,\n    undefined: isUndefined,\n    urlInstance: isUrlInstance,\n    urlSearchParams: isUrlSearchParams,\n    urlString: isUrlString,\n    validDate: isValidDate,\n    validLength: isValidLength,\n    weakMap: isWeakMap,\n    weakRef: isWeakRef,\n    weakSet: isWeakSet,\n    whitespaceString: isWhitespaceString,\n});\nfunction isAbsoluteMod2(remainder) {\n    return (value) => isInteger(value) && Math.abs(value % 2) === remainder;\n}\nfunction isAll(predicate, ...values) {\n    return predicateOnArray(Array.prototype.every, predicate, values);\n}\nfunction isAny(predicate, ...values) {\n    const predicates = isArray(predicate) ? predicate : [predicate];\n    return predicates.some(singlePredicate => predicateOnArray(Array.prototype.some, singlePredicate, values));\n}\nfunction isArray(value, assertion) {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n    if (!isFunction(assertion)) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return value.every(element => assertion(element));\n}\nfunction isArrayBuffer(value) {\n    return getObjectType(value) === 'ArrayBuffer';\n}\nfunction isArrayLike(value) {\n    return !isNullOrUndefined(value) && !isFunction(value) && isValidLength(value.length);\n}\nfunction isAsyncFunction(value) {\n    return getObjectType(value) === 'AsyncFunction';\n}\nfunction isAsyncGenerator(value) {\n    return isAsyncIterable(value) && isFunction(value.next) && isFunction(value.throw);\n}\nfunction isAsyncGeneratorFunction(value) {\n    return getObjectType(value) === 'AsyncGeneratorFunction';\n}\nfunction isAsyncIterable(value) {\n    return isFunction(value?.[Symbol.asyncIterator]);\n}\nfunction isBigint(value) {\n    return typeof value === 'bigint';\n}\nfunction isBigInt64Array(value) {\n    return getObjectType(value) === 'BigInt64Array';\n}\nfunction isBigUint64Array(value) {\n    return getObjectType(value) === 'BigUint64Array';\n}\nfunction isBlob(value) {\n    return getObjectType(value) === 'Blob';\n}\nfunction isBoolean(value) {\n    return value === true || value === false;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isBoundFunction(value) {\n    return isFunction(value) && !Object.prototype.hasOwnProperty.call(value, 'prototype');\n}\nfunction isBuffer(value) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-call\n    return value?.constructor?.isBuffer?.(value) ?? false;\n}\nfunction isClass(value) {\n    return isFunction(value) && value.toString().startsWith('class ');\n}\nfunction isDataView(value) {\n    return getObjectType(value) === 'DataView';\n}\nfunction isDate(value) {\n    return getObjectType(value) === 'Date';\n}\nfunction isDirectInstanceOf(instance, class_) {\n    if (instance === undefined || instance === null) {\n        return false;\n    }\n    return Object.getPrototypeOf(instance) === class_.prototype;\n}\nfunction isEmptyArray(value) {\n    return isArray(value) && value.length === 0;\n}\nfunction isEmptyMap(value) {\n    return isMap(value) && value.size === 0;\n}\nfunction isEmptyObject(value) {\n    return isObject(value) && !isMap(value) && !isSet(value) && Object.keys(value).length === 0;\n}\nfunction isEmptySet(value) {\n    return isSet(value) && value.size === 0;\n}\nfunction isEmptyString(value) {\n    return isString(value) && value.length === 0;\n}\nfunction isEmptyStringOrWhitespace(value) {\n    return isEmptyString(value) || isWhitespaceString(value);\n}\nfunction isEnumCase(value, targetEnum) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return Object.values(targetEnum).includes(value);\n}\nfunction isError(value) {\n    return getObjectType(value) === 'Error';\n}\nfunction isEvenInteger(value) {\n    return isAbsoluteMod2(0)(value);\n}\n// Example: `is.falsy = (value: unknown): value is (not true | 0 | '' | undefined | null) => Boolean(value);`\nfunction isFalsy(value) {\n    return !value;\n}\nfunction isFloat32Array(value) {\n    return getObjectType(value) === 'Float32Array';\n}\nfunction isFloat64Array(value) {\n    return getObjectType(value) === 'Float64Array';\n}\nfunction isFormData(value) {\n    return getObjectType(value) === 'FormData';\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isGenerator(value) {\n    return isIterable(value) && isFunction(value?.next) && isFunction(value?.throw);\n}\nfunction isGeneratorFunction(value) {\n    return getObjectType(value) === 'GeneratorFunction';\n}\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst NODE_TYPE_ELEMENT = 1;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nconst DOM_PROPERTIES_TO_CHECK = [\n    'innerHTML',\n    'ownerDocument',\n    'style',\n    'attributes',\n    'nodeValue',\n];\nfunction isHtmlElement(value) {\n    return isObject(value)\n        && value.nodeType === NODE_TYPE_ELEMENT\n        && isString(value.nodeName)\n        && !isPlainObject(value)\n        && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n}\nfunction isInfinite(value) {\n    return value === Number.POSITIVE_INFINITY || value === Number.NEGATIVE_INFINITY;\n}\nfunction isInRange(value, range) {\n    if (isNumber(range)) {\n        return value >= Math.min(0, range) && value <= Math.max(range, 0);\n    }\n    if (isArray(range) && range.length === 2) {\n        return value >= Math.min(...range) && value <= Math.max(...range);\n    }\n    throw new TypeError(`Invalid range: ${JSON.stringify(range)}`);\n}\nfunction isInt16Array(value) {\n    return getObjectType(value) === 'Int16Array';\n}\nfunction isInt32Array(value) {\n    return getObjectType(value) === 'Int32Array';\n}\nfunction isInt8Array(value) {\n    return getObjectType(value) === 'Int8Array';\n}\nfunction isInteger(value) {\n    return Number.isInteger(value);\n}\nfunction isIterable(value) {\n    return isFunction(value?.[Symbol.iterator]);\n}\nfunction isMap(value) {\n    return getObjectType(value) === 'Map';\n}\nfunction isNan(value) {\n    return Number.isNaN(value);\n}\nfunction isNativePromise(value) {\n    return getObjectType(value) === 'Promise';\n}\nfunction isNegativeNumber(value) {\n    return isNumber(value) && value < 0;\n}\nfunction isNodeStream(value) {\n    return isObject(value) && isFunction(value.pipe) && !isObservable(value);\n}\nfunction isNonEmptyArray(value) {\n    return isArray(value) && value.length > 0;\n}\nfunction isNonEmptyMap(value) {\n    return isMap(value) && value.size > 0;\n}\n// TODO: Use `not` operator here to remove `Map` and `Set` from type guard:\n// - https://github.com/Microsoft/TypeScript/pull/29317\nfunction isNonEmptyObject(value) {\n    return isObject(value) && !isMap(value) && !isSet(value) && Object.keys(value).length > 0;\n}\nfunction isNonEmptySet(value) {\n    return isSet(value) && value.size > 0;\n}\n// TODO: Use `not ''` when the `not` operator is available.\nfunction isNonEmptyString(value) {\n    return isString(value) && value.length > 0;\n}\n// TODO: Use `not ''` when the `not` operator is available.\nfunction isNonEmptyStringAndNotWhitespace(value) {\n    return isString(value) && !isEmptyStringOrWhitespace(value);\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNull(value) {\n    return value === null;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isNullOrUndefined(value) {\n    return isNull(value) || isUndefined(value);\n}\nfunction isNumber(value) {\n    return typeof value === 'number' && !Number.isNaN(value);\n}\nfunction isNumericString(value) {\n    return isString(value) && !isEmptyStringOrWhitespace(value) && !Number.isNaN(Number(value));\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isObject(value) {\n    return !isNull(value) && (typeof value === 'object' || isFunction(value));\n}\nfunction isObservable(value) {\n    if (!value) {\n        return false;\n    }\n    // eslint-disable-next-line no-use-extend-native/no-use-extend-native, @typescript-eslint/no-unsafe-call\n    if (value === value[Symbol.observable]?.()) {\n        return true;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n    if (value === value['@@observable']?.()) {\n        return true;\n    }\n    return false;\n}\nfunction isOddInteger(value) {\n    return isAbsoluteMod2(1)(value);\n}\nfunction isPlainObject(value) {\n    // From: https://github.com/sindresorhus/is-plain-obj/blob/main/index.js\n    if (typeof value !== 'object' || value === null) {\n        return false;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const prototype = Object.getPrototypeOf(value);\n    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\nfunction isPositiveNumber(value) {\n    return isNumber(value) && value > 0;\n}\nfunction isPrimitive(value) {\n    return isNull(value) || isPrimitiveTypeName(typeof value);\n}\nfunction isPromise(value) {\n    return isNativePromise(value) || hasPromiseApi(value);\n}\n// `PropertyKey` is any value that can be used as an object key (string, number, or symbol)\nfunction isPropertyKey(value) {\n    return isAny([isString, isNumber, isSymbol], value);\n}\nfunction isRegExp(value) {\n    return getObjectType(value) === 'RegExp';\n}\nfunction isSafeInteger(value) {\n    return Number.isSafeInteger(value);\n}\nfunction isSet(value) {\n    return getObjectType(value) === 'Set';\n}\nfunction isSharedArrayBuffer(value) {\n    return getObjectType(value) === 'SharedArrayBuffer';\n}\nfunction isString(value) {\n    return typeof value === 'string';\n}\nfunction isSymbol(value) {\n    return typeof value === 'symbol';\n}\n// Example: `is.truthy = (value: unknown): value is (not false | not 0 | not '' | not undefined | not null) => Boolean(value);`\n// eslint-disable-next-line unicorn/prefer-native-coercion-functions\nfunction isTruthy(value) {\n    return Boolean(value);\n}\nfunction isTupleLike(value, guards) {\n    if (isArray(guards) && isArray(value) && guards.length === value.length) {\n        return guards.every((guard, index) => guard(value[index]));\n    }\n    return false;\n}\nfunction isTypedArray(value) {\n    return isTypedArrayName(getObjectType(value));\n}\nfunction isUint16Array(value) {\n    return getObjectType(value) === 'Uint16Array';\n}\nfunction isUint32Array(value) {\n    return getObjectType(value) === 'Uint32Array';\n}\nfunction isUint8Array(value) {\n    return getObjectType(value) === 'Uint8Array';\n}\nfunction isUint8ClampedArray(value) {\n    return getObjectType(value) === 'Uint8ClampedArray';\n}\nfunction isUndefined(value) {\n    return value === undefined;\n}\nfunction isUrlInstance(value) {\n    return getObjectType(value) === 'URL';\n}\n// eslint-disable-next-line unicorn/prevent-abbreviations\nfunction isUrlSearchParams(value) {\n    return getObjectType(value) === 'URLSearchParams';\n}\nfunction isUrlString(value) {\n    if (!isString(value)) {\n        return false;\n    }\n    try {\n        new URL(value); // eslint-disable-line no-new\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nfunction isValidDate(value) {\n    return isDate(value) && !isNan(Number(value));\n}\nfunction isValidLength(value) {\n    return isSafeInteger(value) && value >= 0;\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isWeakMap(value) {\n    return getObjectType(value) === 'WeakMap';\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isWeakRef(value) {\n    return getObjectType(value) === 'WeakRef';\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isWeakSet(value) {\n    return getObjectType(value) === 'WeakSet';\n}\nfunction isWhitespaceString(value) {\n    return isString(value) && /^\\s+$/.test(value);\n}\nfunction predicateOnArray(method, predicate, values) {\n    if (!isFunction(predicate)) {\n        throw new TypeError(`Invalid predicate: ${JSON.stringify(predicate)}`);\n    }\n    if (values.length === 0) {\n        throw new TypeError('Invalid number of values');\n    }\n    return method.call(values, predicate);\n}\nfunction typeErrorMessage(description, value) {\n    return `Expected value which is \\`${description}\\`, received value of type \\`${is(value)}\\`.`;\n}\nfunction unique(values) {\n    // eslint-disable-next-line unicorn/prefer-spread\n    return Array.from(new Set(values));\n}\nconst andFormatter = new Intl.ListFormat('en', { style: 'long', type: 'conjunction' });\nconst orFormatter = new Intl.ListFormat('en', { style: 'long', type: 'disjunction' });\nfunction typeErrorMessageMultipleValues(expectedType, values) {\n    const uniqueExpectedTypes = unique((isArray(expectedType) ? expectedType : [expectedType]).map(value => `\\`${value}\\``));\n    const uniqueValueTypes = unique(values.map(value => `\\`${is(value)}\\``));\n    return `Expected values which are ${orFormatter.format(uniqueExpectedTypes)}. Received values of type${uniqueValueTypes.length > 1 ? 's' : ''} ${andFormatter.format(uniqueValueTypes)}.`;\n}\nconst assert = {\n    all: assertAll,\n    any: assertAny,\n    array: assertArray,\n    arrayBuffer: assertArrayBuffer,\n    arrayLike: assertArrayLike,\n    asyncFunction: assertAsyncFunction,\n    asyncGenerator: assertAsyncGenerator,\n    asyncGeneratorFunction: assertAsyncGeneratorFunction,\n    asyncIterable: assertAsyncIterable,\n    bigint: assertBigint,\n    bigInt64Array: assertBigInt64Array,\n    bigUint64Array: assertBigUint64Array,\n    blob: assertBlob,\n    boolean: assertBoolean,\n    boundFunction: assertBoundFunction,\n    buffer: assertBuffer,\n    class: assertClass,\n    class_: assertClass,\n    dataView: assertDataView,\n    date: assertDate,\n    directInstanceOf: assertDirectInstanceOf,\n    domElement: assertHtmlElement,\n    emptyArray: assertEmptyArray,\n    emptyMap: assertEmptyMap,\n    emptyObject: assertEmptyObject,\n    emptySet: assertEmptySet,\n    emptyString: assertEmptyString,\n    emptyStringOrWhitespace: assertEmptyStringOrWhitespace,\n    enumCase: assertEnumCase,\n    error: assertError,\n    evenInteger: assertEvenInteger,\n    falsy: assertFalsy,\n    float32Array: assertFloat32Array,\n    float64Array: assertFloat64Array,\n    formData: assertFormData,\n    function: assertFunction,\n    function_: assertFunction,\n    generator: assertGenerator,\n    generatorFunction: assertGeneratorFunction,\n    htmlElement: assertHtmlElement,\n    infinite: assertInfinite,\n    inRange: assertInRange,\n    int16Array: assertInt16Array,\n    int32Array: assertInt32Array,\n    int8Array: assertInt8Array,\n    integer: assertInteger,\n    iterable: assertIterable,\n    map: assertMap,\n    nan: assertNan,\n    nativePromise: assertNativePromise,\n    negativeNumber: assertNegativeNumber,\n    nodeStream: assertNodeStream,\n    nonEmptyArray: assertNonEmptyArray,\n    nonEmptyMap: assertNonEmptyMap,\n    nonEmptyObject: assertNonEmptyObject,\n    nonEmptySet: assertNonEmptySet,\n    nonEmptyString: assertNonEmptyString,\n    nonEmptyStringAndNotWhitespace: assertNonEmptyStringAndNotWhitespace,\n    null: assertNull,\n    null_: assertNull,\n    nullOrUndefined: assertNullOrUndefined,\n    number: assertNumber,\n    numericString: assertNumericString,\n    object: assertObject,\n    observable: assertObservable,\n    oddInteger: assertOddInteger,\n    plainObject: assertPlainObject,\n    positiveNumber: assertPositiveNumber,\n    primitive: assertPrimitive,\n    promise: assertPromise,\n    propertyKey: assertPropertyKey,\n    regExp: assertRegExp,\n    safeInteger: assertSafeInteger,\n    set: assertSet,\n    sharedArrayBuffer: assertSharedArrayBuffer,\n    string: assertString,\n    symbol: assertSymbol,\n    truthy: assertTruthy,\n    tupleLike: assertTupleLike,\n    typedArray: assertTypedArray,\n    uint16Array: assertUint16Array,\n    uint32Array: assertUint32Array,\n    uint8Array: assertUint8Array,\n    uint8ClampedArray: assertUint8ClampedArray,\n    undefined: assertUndefined,\n    urlInstance: assertUrlInstance,\n    urlSearchParams: assertUrlSearchParams,\n    urlString: assertUrlString,\n    validDate: assertValidDate,\n    validLength: assertValidLength,\n    weakMap: assertWeakMap,\n    weakRef: assertWeakRef,\n    weakSet: assertWeakSet,\n    whitespaceString: assertWhitespaceString,\n};\nconst methodTypeMap = {\n    isArray: 'Array',\n    isArrayBuffer: 'ArrayBuffer',\n    isArrayLike: 'array-like',\n    isAsyncFunction: 'AsyncFunction',\n    isAsyncGenerator: 'AsyncGenerator',\n    isAsyncGeneratorFunction: 'AsyncGeneratorFunction',\n    isAsyncIterable: 'AsyncIterable',\n    isBigint: 'bigint',\n    isBigInt64Array: 'BigInt64Array',\n    isBigUint64Array: 'BigUint64Array',\n    isBlob: 'Blob',\n    isBoolean: 'boolean',\n    isBoundFunction: 'Function',\n    isBuffer: 'Buffer',\n    isClass: 'Class',\n    isDataView: 'DataView',\n    isDate: 'Date',\n    isDirectInstanceOf: 'T',\n    /** @deprecated */\n    isDomElement: 'HTMLElement',\n    isEmptyArray: 'empty array',\n    isEmptyMap: 'empty map',\n    isEmptyObject: 'empty object',\n    isEmptySet: 'empty set',\n    isEmptyString: 'empty string',\n    isEmptyStringOrWhitespace: 'empty string or whitespace',\n    isEnumCase: 'EnumCase',\n    isError: 'Error',\n    isEvenInteger: 'even integer',\n    isFalsy: 'falsy',\n    isFloat32Array: 'Float32Array',\n    isFloat64Array: 'Float64Array',\n    isFormData: 'FormData',\n    isFunction: 'Function',\n    isGenerator: 'Generator',\n    isGeneratorFunction: 'GeneratorFunction',\n    isHtmlElement: 'HTMLElement',\n    isInfinite: 'infinite number',\n    isInRange: 'in range',\n    isInt16Array: 'Int16Array',\n    isInt32Array: 'Int32Array',\n    isInt8Array: 'Int8Array',\n    isInteger: 'integer',\n    isIterable: 'Iterable',\n    isMap: 'Map',\n    isNan: 'NaN',\n    isNativePromise: 'native Promise',\n    isNegativeNumber: 'negative number',\n    isNodeStream: 'Node.js Stream',\n    isNonEmptyArray: 'non-empty array',\n    isNonEmptyMap: 'non-empty map',\n    isNonEmptyObject: 'non-empty object',\n    isNonEmptySet: 'non-empty set',\n    isNonEmptyString: 'non-empty string',\n    isNonEmptyStringAndNotWhitespace: 'non-empty string and not whitespace',\n    isNull: 'null',\n    isNullOrUndefined: 'null or undefined',\n    isNumber: 'number',\n    isNumericString: 'string with a number',\n    isObject: 'Object',\n    isObservable: 'Observable',\n    isOddInteger: 'odd integer',\n    isPlainObject: 'plain object',\n    isPositiveNumber: 'positive number',\n    isPrimitive: 'primitive',\n    isPromise: 'Promise',\n    isPropertyKey: 'PropertyKey',\n    isRegExp: 'RegExp',\n    isSafeInteger: 'integer',\n    isSet: 'Set',\n    isSharedArrayBuffer: 'SharedArrayBuffer',\n    isString: 'string',\n    isSymbol: 'symbol',\n    isTruthy: 'truthy',\n    isTupleLike: 'tuple-like',\n    isTypedArray: 'TypedArray',\n    isUint16Array: 'Uint16Array',\n    isUint32Array: 'Uint32Array',\n    isUint8Array: 'Uint8Array',\n    isUint8ClampedArray: 'Uint8ClampedArray',\n    isUndefined: 'undefined',\n    isUrlInstance: 'URL',\n    isUrlSearchParams: 'URLSearchParams',\n    isUrlString: 'string with a URL',\n    isValidDate: 'valid Date',\n    isValidLength: 'valid length',\n    isWeakMap: 'WeakMap',\n    isWeakRef: 'WeakRef',\n    isWeakSet: 'WeakSet',\n    isWhitespaceString: 'whitespace string',\n};\nfunction keysOf(value) {\n    return Object.keys(value);\n}\nconst isMethodNames = keysOf(methodTypeMap);\nfunction isIsMethodName(value) {\n    return isMethodNames.includes(value);\n}\nfunction assertAll(predicate, ...values) {\n    if (!isAll(predicate, ...values)) {\n        const expectedType = isIsMethodName(predicate.name) ? methodTypeMap[predicate.name] : 'predicate returns truthy for all values';\n        throw new TypeError(typeErrorMessageMultipleValues(expectedType, values));\n    }\n}\nfunction assertAny(predicate, ...values) {\n    if (!isAny(predicate, ...values)) {\n        const predicates = isArray(predicate) ? predicate : [predicate];\n        const expectedTypes = predicates.map(predicate => isIsMethodName(predicate.name) ? methodTypeMap[predicate.name] : 'predicate returns truthy for any value');\n        throw new TypeError(typeErrorMessageMultipleValues(expectedTypes, values));\n    }\n}\nfunction assertArray(value, assertion, message) {\n    if (!isArray(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Array', value));\n    }\n    if (assertion) {\n        // eslint-disable-next-line unicorn/no-array-for-each, unicorn/no-array-callback-reference\n        value.forEach(assertion);\n    }\n}\nfunction assertArrayBuffer(value, message) {\n    if (!isArrayBuffer(value)) {\n        throw new TypeError(message ?? typeErrorMessage('ArrayBuffer', value));\n    }\n}\nfunction assertArrayLike(value, message) {\n    if (!isArrayLike(value)) {\n        throw new TypeError(message ?? typeErrorMessage('array-like', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertAsyncFunction(value, message) {\n    if (!isAsyncFunction(value)) {\n        throw new TypeError(message ?? typeErrorMessage('AsyncFunction', value));\n    }\n}\nfunction assertAsyncGenerator(value, message) {\n    if (!isAsyncGenerator(value)) {\n        throw new TypeError(message ?? typeErrorMessage('AsyncGenerator', value));\n    }\n}\nfunction assertAsyncGeneratorFunction(value, message) {\n    if (!isAsyncGeneratorFunction(value)) {\n        throw new TypeError(message ?? typeErrorMessage('AsyncGeneratorFunction', value));\n    }\n}\nfunction assertAsyncIterable(value, message) {\n    if (!isAsyncIterable(value)) {\n        throw new TypeError(message ?? typeErrorMessage('AsyncIterable', value));\n    }\n}\nfunction assertBigint(value, message) {\n    if (!isBigint(value)) {\n        throw new TypeError(message ?? typeErrorMessage('bigint', value));\n    }\n}\nfunction assertBigInt64Array(value, message) {\n    if (!isBigInt64Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('BigInt64Array', value));\n    }\n}\nfunction assertBigUint64Array(value, message) {\n    if (!isBigUint64Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('BigUint64Array', value));\n    }\n}\nfunction assertBlob(value, message) {\n    if (!isBlob(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Blob', value));\n    }\n}\nfunction assertBoolean(value, message) {\n    if (!isBoolean(value)) {\n        throw new TypeError(message ?? typeErrorMessage('boolean', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertBoundFunction(value, message) {\n    if (!isBoundFunction(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Function', value));\n    }\n}\nfunction assertBuffer(value, message) {\n    if (!isBuffer(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Buffer', value));\n    }\n}\nfunction assertClass(value, message) {\n    if (!isClass(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Class', value));\n    }\n}\nfunction assertDataView(value, message) {\n    if (!isDataView(value)) {\n        throw new TypeError(message ?? typeErrorMessage('DataView', value));\n    }\n}\nfunction assertDate(value, message) {\n    if (!isDate(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Date', value));\n    }\n}\nfunction assertDirectInstanceOf(instance, class_, message) {\n    if (!isDirectInstanceOf(instance, class_)) {\n        throw new TypeError(message ?? typeErrorMessage('T', instance));\n    }\n}\nfunction assertEmptyArray(value, message) {\n    if (!isEmptyArray(value)) {\n        throw new TypeError(message ?? typeErrorMessage('empty array', value));\n    }\n}\nfunction assertEmptyMap(value, message) {\n    if (!isEmptyMap(value)) {\n        throw new TypeError(message ?? typeErrorMessage('empty map', value));\n    }\n}\nfunction assertEmptyObject(value, message) {\n    if (!isEmptyObject(value)) {\n        throw new TypeError(message ?? typeErrorMessage('empty object', value));\n    }\n}\nfunction assertEmptySet(value, message) {\n    if (!isEmptySet(value)) {\n        throw new TypeError(message ?? typeErrorMessage('empty set', value));\n    }\n}\nfunction assertEmptyString(value, message) {\n    if (!isEmptyString(value)) {\n        throw new TypeError(message ?? typeErrorMessage('empty string', value));\n    }\n}\nfunction assertEmptyStringOrWhitespace(value, message) {\n    if (!isEmptyStringOrWhitespace(value)) {\n        throw new TypeError(message ?? typeErrorMessage('empty string or whitespace', value));\n    }\n}\nfunction assertEnumCase(value, targetEnum, message) {\n    if (!isEnumCase(value, targetEnum)) {\n        throw new TypeError(message ?? typeErrorMessage('EnumCase', value));\n    }\n}\nfunction assertError(value, message) {\n    if (!isError(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Error', value));\n    }\n}\nfunction assertEvenInteger(value, message) {\n    if (!isEvenInteger(value)) {\n        throw new TypeError(message ?? typeErrorMessage('even integer', value));\n    }\n}\nfunction assertFalsy(value, message) {\n    if (!isFalsy(value)) {\n        throw new TypeError(message ?? typeErrorMessage('falsy', value));\n    }\n}\nfunction assertFloat32Array(value, message) {\n    if (!isFloat32Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Float32Array', value));\n    }\n}\nfunction assertFloat64Array(value, message) {\n    if (!isFloat64Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Float64Array', value));\n    }\n}\nfunction assertFormData(value, message) {\n    if (!isFormData(value)) {\n        throw new TypeError(message ?? typeErrorMessage('FormData', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertFunction(value, message) {\n    if (!isFunction(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Function', value));\n    }\n}\nfunction assertGenerator(value, message) {\n    if (!isGenerator(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Generator', value));\n    }\n}\nfunction assertGeneratorFunction(value, message) {\n    if (!isGeneratorFunction(value)) {\n        throw new TypeError(message ?? typeErrorMessage('GeneratorFunction', value));\n    }\n}\nfunction assertHtmlElement(value, message) {\n    if (!isHtmlElement(value)) {\n        throw new TypeError(message ?? typeErrorMessage('HTMLElement', value));\n    }\n}\nfunction assertInfinite(value, message) {\n    if (!isInfinite(value)) {\n        throw new TypeError(message ?? typeErrorMessage('infinite number', value));\n    }\n}\nfunction assertInRange(value, range, message) {\n    if (!isInRange(value, range)) {\n        throw new TypeError(message ?? typeErrorMessage('in range', value));\n    }\n}\nfunction assertInt16Array(value, message) {\n    if (!isInt16Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Int16Array', value));\n    }\n}\nfunction assertInt32Array(value, message) {\n    if (!isInt32Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Int32Array', value));\n    }\n}\nfunction assertInt8Array(value, message) {\n    if (!isInt8Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Int8Array', value));\n    }\n}\nfunction assertInteger(value, message) {\n    if (!isInteger(value)) {\n        throw new TypeError(message ?? typeErrorMessage('integer', value));\n    }\n}\nfunction assertIterable(value, message) {\n    if (!isIterable(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Iterable', value));\n    }\n}\nfunction assertMap(value, message) {\n    if (!isMap(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Map', value));\n    }\n}\nfunction assertNan(value, message) {\n    if (!isNan(value)) {\n        throw new TypeError(message ?? typeErrorMessage('NaN', value));\n    }\n}\nfunction assertNativePromise(value, message) {\n    if (!isNativePromise(value)) {\n        throw new TypeError(message ?? typeErrorMessage('native Promise', value));\n    }\n}\nfunction assertNegativeNumber(value, message) {\n    if (!isNegativeNumber(value)) {\n        throw new TypeError(message ?? typeErrorMessage('negative number', value));\n    }\n}\nfunction assertNodeStream(value, message) {\n    if (!isNodeStream(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Node.js Stream', value));\n    }\n}\nfunction assertNonEmptyArray(value, message) {\n    if (!isNonEmptyArray(value)) {\n        throw new TypeError(message ?? typeErrorMessage('non-empty array', value));\n    }\n}\nfunction assertNonEmptyMap(value, message) {\n    if (!isNonEmptyMap(value)) {\n        throw new TypeError(message ?? typeErrorMessage('non-empty map', value));\n    }\n}\nfunction assertNonEmptyObject(value, message) {\n    if (!isNonEmptyObject(value)) {\n        throw new TypeError(message ?? typeErrorMessage('non-empty object', value));\n    }\n}\nfunction assertNonEmptySet(value, message) {\n    if (!isNonEmptySet(value)) {\n        throw new TypeError(message ?? typeErrorMessage('non-empty set', value));\n    }\n}\nfunction assertNonEmptyString(value, message) {\n    if (!isNonEmptyString(value)) {\n        throw new TypeError(message ?? typeErrorMessage('non-empty string', value));\n    }\n}\nfunction assertNonEmptyStringAndNotWhitespace(value, message) {\n    if (!isNonEmptyStringAndNotWhitespace(value)) {\n        throw new TypeError(message ?? typeErrorMessage('non-empty string and not whitespace', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertNull(value, message) {\n    if (!isNull(value)) {\n        throw new TypeError(message ?? typeErrorMessage('null', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertNullOrUndefined(value, message) {\n    if (!isNullOrUndefined(value)) {\n        throw new TypeError(message ?? typeErrorMessage('null or undefined', value));\n    }\n}\nfunction assertNumber(value, message) {\n    if (!isNumber(value)) {\n        throw new TypeError(message ?? typeErrorMessage('number', value));\n    }\n}\nfunction assertNumericString(value, message) {\n    if (!isNumericString(value)) {\n        throw new TypeError(message ?? typeErrorMessage('string with a number', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertObject(value, message) {\n    if (!isObject(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Object', value));\n    }\n}\nfunction assertObservable(value, message) {\n    if (!isObservable(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Observable', value));\n    }\n}\nfunction assertOddInteger(value, message) {\n    if (!isOddInteger(value)) {\n        throw new TypeError(message ?? typeErrorMessage('odd integer', value));\n    }\n}\nfunction assertPlainObject(value, message) {\n    if (!isPlainObject(value)) {\n        throw new TypeError(message ?? typeErrorMessage('plain object', value));\n    }\n}\nfunction assertPositiveNumber(value, message) {\n    if (!isPositiveNumber(value)) {\n        throw new TypeError(message ?? typeErrorMessage('positive number', value));\n    }\n}\nfunction assertPrimitive(value, message) {\n    if (!isPrimitive(value)) {\n        throw new TypeError(message ?? typeErrorMessage('primitive', value));\n    }\n}\nfunction assertPromise(value, message) {\n    if (!isPromise(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Promise', value));\n    }\n}\nfunction assertPropertyKey(value, message) {\n    if (!isPropertyKey(value)) {\n        throw new TypeError(message ?? typeErrorMessage('PropertyKey', value));\n    }\n}\nfunction assertRegExp(value, message) {\n    if (!isRegExp(value)) {\n        throw new TypeError(message ?? typeErrorMessage('RegExp', value));\n    }\n}\nfunction assertSafeInteger(value, message) {\n    if (!isSafeInteger(value)) {\n        throw new TypeError(message ?? typeErrorMessage('integer', value));\n    }\n}\nfunction assertSet(value, message) {\n    if (!isSet(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Set', value));\n    }\n}\nfunction assertSharedArrayBuffer(value, message) {\n    if (!isSharedArrayBuffer(value)) {\n        throw new TypeError(message ?? typeErrorMessage('SharedArrayBuffer', value));\n    }\n}\nfunction assertString(value, message) {\n    if (!isString(value)) {\n        throw new TypeError(message ?? typeErrorMessage('string', value));\n    }\n}\nfunction assertSymbol(value, message) {\n    if (!isSymbol(value)) {\n        throw new TypeError(message ?? typeErrorMessage('symbol', value));\n    }\n}\nfunction assertTruthy(value, message) {\n    if (!isTruthy(value)) {\n        throw new TypeError(message ?? typeErrorMessage('truthy', value));\n    }\n}\nfunction assertTupleLike(value, guards, message) {\n    if (!isTupleLike(value, guards)) {\n        throw new TypeError(message ?? typeErrorMessage('tuple-like', value));\n    }\n}\nfunction assertTypedArray(value, message) {\n    if (!isTypedArray(value)) {\n        throw new TypeError(message ?? typeErrorMessage('TypedArray', value));\n    }\n}\nfunction assertUint16Array(value, message) {\n    if (!isUint16Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Uint16Array', value));\n    }\n}\nfunction assertUint32Array(value, message) {\n    if (!isUint32Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Uint32Array', value));\n    }\n}\nfunction assertUint8Array(value, message) {\n    if (!isUint8Array(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Uint8Array', value));\n    }\n}\nfunction assertUint8ClampedArray(value, message) {\n    if (!isUint8ClampedArray(value)) {\n        throw new TypeError(message ?? typeErrorMessage('Uint8ClampedArray', value));\n    }\n}\nfunction assertUndefined(value, message) {\n    if (!isUndefined(value)) {\n        throw new TypeError(message ?? typeErrorMessage('undefined', value));\n    }\n}\nfunction assertUrlInstance(value, message) {\n    if (!isUrlInstance(value)) {\n        throw new TypeError(message ?? typeErrorMessage('URL', value));\n    }\n}\n// eslint-disable-next-line unicorn/prevent-abbreviations\nfunction assertUrlSearchParams(value, message) {\n    if (!isUrlSearchParams(value)) {\n        throw new TypeError(message ?? typeErrorMessage('URLSearchParams', value));\n    }\n}\nfunction assertUrlString(value, message) {\n    if (!isUrlString(value)) {\n        throw new TypeError(message ?? typeErrorMessage('string with a URL', value));\n    }\n}\nfunction assertValidDate(value, message) {\n    if (!isValidDate(value)) {\n        throw new TypeError(message ?? typeErrorMessage('valid Date', value));\n    }\n}\nfunction assertValidLength(value, message) {\n    if (!isValidLength(value)) {\n        throw new TypeError(message ?? typeErrorMessage('valid length', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertWeakMap(value, message) {\n    if (!isWeakMap(value)) {\n        throw new TypeError(message ?? typeErrorMessage('WeakMap', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertWeakRef(value, message) {\n    if (!isWeakRef(value)) {\n        throw new TypeError(message ?? typeErrorMessage('WeakRef', value));\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction assertWeakSet(value, message) {\n    if (!isWeakSet(value)) {\n        throw new TypeError(message ?? typeErrorMessage('WeakSet', value));\n    }\n}\nfunction assertWhitespaceString(value, message) {\n    if (!isWhitespaceString(value)) {\n        throw new TypeError(message ?? typeErrorMessage('whitespace string', value));\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (is);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@sindresorhus+is@6.3.0/node_modules/@sindresorhus/is/dist/index.js\n");

/***/ })

};
;